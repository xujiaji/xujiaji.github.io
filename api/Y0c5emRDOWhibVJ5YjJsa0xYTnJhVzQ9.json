{"title":"Android 无缝换肤深入了解与使用","date":"2018-04-21T01:03:41.000Z","author":"xujiaji","excerpt":"","slug":"android-skin","comments":true,"tags":["android","分析框架"],"categories":["文章"],"updated":"2018-04-22T00:31:44.918Z","content":"<blockquote>\n<p>思路整体结构</p>\n</blockquote>\n<p><img src=\"image/android-skin/android-skin.svg\" alt=\"Android 换肤\"></p>\n<h2 id=\"方案及轮子\"><a href=\"#方案及轮子\" class=\"headerlink\" title=\"方案及轮子\"></a>方案及轮子</h2><ol>\n<li>内部资源加载方案<ul>\n<li>通过在BaseActivity中setTheme</li>\n<li>不好实时的刷新，需要重新创建页面</li>\n<li>存在需要解决哪些Vew需要刷新的问题</li>\n</ul>\n</li>\n<li>自定义View<ul>\n<li><a href=\"https://github.com/dersoncheng/MultipleTheme\" target=\"_blank\" rel=\"noopener\">MultipleTheme</a></li>\n<li>通过自定义View配合setTheme后立即刷新资源。</li>\n<li>需要替换所有需要换肤的view</li>\n</ul>\n</li>\n<li>自定义xml属性，Java中绑定view<ul>\n<li><a href=\"https://github.com/hehonghui/Colorful\" target=\"_blank\" rel=\"noopener\">Colorful</a></li>\n<li>首先通过在java代码中添加view</li>\n<li>然后setTheme设置当前页面主题</li>\n<li>最后通过内部引用的上下文getTheme遍历view来修改资源</li>\n</ul>\n</li>\n<li>动态资源加载方案<ul>\n<li><a href=\"https://github.com/fengjundev/Android-Skin-Loader\" target=\"_blank\" rel=\"noopener\">Android-Skin-Loader</a></li>\n<li><a href=\"https://github.com/burgessjp/ThemeSkinning\" target=\"_blank\" rel=\"noopener\">ThemeSkinning</a>（是上面那个框架的衍生，整篇就是研究的这框架）</li>\n<li>resource替换：通过单独打包一个资源apk，只用来访问资源，资源名得与本身对应</li>\n<li>无需关心皮肤多少，可下载，等等</li>\n<li>准备采用该方案</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"采用方案的技术点\"><a href=\"#采用方案的技术点\" class=\"headerlink\" title=\"采用方案的技术点\"></a>采用方案的技术点</h2><ol>\n<li>获取皮肤资源包apk的资源</li>\n<li>自定义xml属性，用来标记需要换肤的view</li>\n<li>获取并相应有换肤需求的布局<ul>\n<li><a href=\"https://blog.csdn.net/u013085697/article/details/53898879\" target=\"_blank\" rel=\"noopener\">LayoutInflater Factory使用基础与进阶</a></li>\n<li><a href=\"https://blog.csdn.net/lmj623565791/article/details/51503977\" target=\"_blank\" rel=\"noopener\">Android 探究 LayoutInflater setFactory</a></li>\n</ul>\n</li>\n<li>其他<ul>\n<li>扩展可自行添加所支持换肤的属性</li>\n<li>改变状态栏颜色</li>\n<li>改变字体</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"采用方案的实现过程\"><a href=\"#采用方案的实现过程\" class=\"headerlink\" title=\"采用方案的实现过程\"></a>采用方案的实现过程</h2><p><img src=\"image/android-skin/换肤框架流程.svg\" alt=\"实现过程\"></p>\n<h2 id=\"加载皮肤apk获取里面的资源（为了得到皮肤apk-Resources对象）\"><a href=\"#加载皮肤apk获取里面的资源（为了得到皮肤apk-Resources对象）\" class=\"headerlink\" title=\"加载皮肤apk获取里面的资源（为了得到皮肤apk  Resources对象）\"></a>加载皮肤apk获取里面的资源（为了得到皮肤apk  Resources对象）</h2><blockquote>\n<p>下面所有的代码位置，包括处理一些特殊问题的方案等等！</p>\n</blockquote>\n<p><a href=\"https://github.com/xujiaji/ThemeSkinning\" target=\"_blank\" rel=\"noopener\">https://github.com/xujiaji/ThemeSkinning</a></p>\n<blockquote>\n<p>通过皮肤apk的全路径，可知道其包名（需要用包名来获取它的资源id）</p>\n</blockquote>\n<ul>\n<li><code>skinPkgPath</code>是apk的全路径，通过<code>mInfo.packageName</code>就可以得到包名</li>\n<li>代码位置：<a href=\"https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinManager.java\" target=\"_blank\" rel=\"noopener\">SkinManager.java</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PackageManager mPm = context.getPackageManager();</span><br><span class=\"line\">PackageInfo mInfo = mPm.getPackageArchiveInfo(skinPkgPath, PackageManager.GET_ACTIVITIES);</span><br><span class=\"line\">skinPackageName = mInfo.packageName;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过反射添加路径可以创建皮肤apk的AssetManager对象</p>\n</blockquote>\n<ul>\n<li><code>skinPkgPath</code>是apk的全路径，添加路径的方法是AssetManager里一个隐藏的方法通过反射可以设置。</li>\n<li>此时还可以用<code>assetManager</code>来访问apk里assets目录的资源。</li>\n<li>想想如果更换的资源是放在assets目录下的，那么我们可以在这里动动手脚。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AssetManager assetManager = AssetManager.class.newInstance();</span><br><span class=\"line\">Method addAssetPath = assetManager.getClass().getMethod(<span class=\"string\">\"addAssetPath\"</span>, String.class);</span><br><span class=\"line\">addAssetPath.invoke(assetManager, skinPkgPath);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>创建皮肤apk的资源对象 </p>\n</blockquote>\n<ul>\n<li>获取当前的app的Resources，主要是为了创建apk的Resources<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Resources superRes = context.getResources();</span><br><span class=\"line\">Resources skinResource = <span class=\"keyword\">new</span> Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>当要通过资源id获取颜色的时候</p>\n</blockquote>\n<ol>\n<li>先获取内置的颜色<code>int originColor = ContextCompat.getColor(context, resId);</code></li>\n<li>如果没有外置皮肤apk资源或就用默认资源的情况下直接返回内置颜色</li>\n<li>通过 <code>context.getResources().getResourceEntryName(resId);</code>获取资源id获取它的名字</li>\n<li>通过<code>mResources.getIdentifier(resName, &quot;color&quot;, skinPackageName)</code>得到皮肤apk中该资源id。（resName：就是资源名字；skinPackegeName就是皮肤apk的包名）</li>\n<li>如果没有获取到皮肤apk中资源id（也就是等于0）返回原来的颜色，否则返回<code>mResources.getColor(trueResId)</code></li>\n</ol>\n<p><em>通过<code>getIdentifier</code>方法可以通过名字来获取id，比如将第二个参数修改为<code>layout</code>、<code>mipmap</code>、<code>drawable</code>或<code>string</code>就是通过资源名字获取对应<code>layout目录</code>、<code>mipmap目录</code>、<code>drawable目录</code>或<code>string文件</code>里的资源id</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getColor</span><span class=\"params\">(<span class=\"keyword\">int</span> resId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> originColor = ContextCompat.getColor(context, resId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mResources == <span class=\"keyword\">null</span> || isDefaultSkin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originColor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String resName = context.getResources().getResourceEntryName(resId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> trueResId = mResources.getIdentifier(resName, <span class=\"string\">\"color\"</span>, skinPackageName);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> trueColor;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (trueResId == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        trueColor = originColor;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        trueColor = mResources.getColor(trueResId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trueColor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当要通过资源id获取图片的时候</p>\n</blockquote>\n<ol>\n<li>和上面获取颜色是差不多的</li>\n<li>只是在图片在<code>drawable</code>目录还是<code>mipmap</code>目录进行了判断</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getDrawable</span><span class=\"params\">(<span class=\"keyword\">int</span> resId)</span> </span>&#123;</span><br><span class=\"line\">    Drawable originDrawable = ContextCompat.getDrawable(context, resId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mResources == <span class=\"keyword\">null</span> || isDefaultSkin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> originDrawable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String resName = context.getResources().getResourceEntryName(resId);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> trueResId = mResources.getIdentifier(resName, <span class=\"string\">\"drawable\"</span>, skinPackageName);</span><br><span class=\"line\">    Drawable trueDrawable;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (trueResId == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        trueResId = mResources.getIdentifier(resName, <span class=\"string\">\"mipmap\"</span>, skinPackageName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (trueResId == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        trueDrawable = originDrawable;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class=\"number\">22</span>) &#123;</span><br><span class=\"line\">            trueDrawable = mResources.getDrawable(trueResId);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            trueDrawable = mResources.getDrawable(trueResId, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> trueDrawable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对所有view进行拦截处理\"><a href=\"#对所有view进行拦截处理\" class=\"headerlink\" title=\"对所有view进行拦截处理\"></a>对所有view进行拦截处理</h2><ul>\n<li>自己实现<code>LayoutInflater.Factory2</code>接口来替换系统默认的</li>\n</ul>\n<blockquote>\n<p>那么如何替换呢？</p>\n</blockquote>\n<ul>\n<li>就这样通过在Activity方法中super.onCreate之前调用</li>\n<li>代码位置：<a href=\"https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/base/SkinBaseActivity.java\" target=\"_blank\" rel=\"noopener\">SkinBaseActivity.java</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    mSkinInflaterFactory = <span class=\"keyword\">new</span> SkinInflaterFactory(<span class=\"keyword\">this</span>);<span class=\"comment\">//自定义的Factory</span></span><br><span class=\"line\">    LayoutInflaterCompat.setFactory2(getLayoutInflater(), mSkinInflaterFactory);</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们使用的Activity一般是<code>AppCompatActivity</code>在里面的onCreate方法中也有对其的设置和初始化，但是setFactory方法只能被调用一次，导致默认的一些初始化操作没有被调用，这么操作？</p>\n</blockquote>\n<ul>\n<li>这是实现了<code>LayoutInflater.Factory2</code>接口的类，看<code>onCreateView</code>方法中。在进行其他操作前调用<code>delegate.createView(parent, name, context, attrs)</code>处理系统的那一套逻辑。</li>\n<li><code>attrs.getAttributeBooleanValue</code>获取当前view是否是可换肤的，第一个参数是xml名字空间，第二个参数是属性名，第三个参数是默认值。这里相当于是<code>attrs.getAttributeBooleanValue(&quot;http://schemas.android.com/android/skin&quot;, &quot;enable&quot;, false)</code></li>\n<li>代码位置：<a href=\"https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinInflaterFactory.java\" target=\"_blank\" rel=\"noopener\">SkinInflaterFactory.java</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SkinInflaterFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">LayoutInflater</span>.<span class=\"title\">Factory2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> AppCompatActivity mAppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SkinInflaterFactory</span><span class=\"params\">(AppCompatActivity appCompatActivity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mAppCompatActivity = appCompatActivity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(String s, Context context, AttributeSet attributeSet)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isSkinEnable = attrs.getAttributeBooleanValue(SkinConfig.NAMESPACE, SkinConfig.ATTR_SKIN_ENABLE, <span class=\"keyword\">false</span>);<span class=\"comment\">//是否是可换肤的view</span></span><br><span class=\"line\">        AppCompatDelegate delegate = mAppCompatActivity.getDelegate();</span><br><span class=\"line\">        View view = delegate.createView(parent, name, context, attrs);<span class=\"comment\">//处理系统逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> TextView &amp;&amp; SkinConfig.isCanChangeFont()) &#123;</span><br><span class=\"line\">            TextViewRepository.add(mAppCompatActivity, (TextView) view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSkinEnable || SkinConfig.isGlobalSkinApply()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                view = ViewProducer.createViewFromTag(context, name, attrs);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (view == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            parseSkinAttr(context, attrs, view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当内部的初始化操作完成后，如果判断没有创建好view，则需要我们自己去创建view</p>\n</blockquote>\n<ul>\n<li>看上一步是通过<code>ViewProducer.createViewFromTag(context, name, attrs)</code>来创建</li>\n<li>那么直接来看一下这个类<code>ViewProducer</code>，原理功能请看代码注释</li>\n<li>在AppCompatViewInflater中你可以看到相同的代码</li>\n<li>代码位置：<a href=\"https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/ViewProducer.java\" target=\"_blank\" rel=\"noopener\">ViewProducer.java</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewProducer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//该处定义的是view构造方法的参数，也就是View两个参数的构造方法：public View(Context context, AttributeSet attrs)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] mConstructorArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">//存放反射得到的构造器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String, Constructor&lt;? extends View&gt;&gt; sConstructorMap</span><br><span class=\"line\">            = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//这是View两个参数的构造器所对应的两个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Class&lt;?&gt;[] sConstructorSignature = <span class=\"keyword\">new</span> Class[]&#123;</span><br><span class=\"line\">            Context.class, AttributeSet.class&#125;;</span><br><span class=\"line\">    <span class=\"comment\">//如果是系统的View或ViewGroup在xml中并不是全路径的，通过反射来实例化是需要全路径的，这里列出来它们可能出现的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] sClassPrefixList = &#123;</span><br><span class=\"line\">            <span class=\"string\">\"android.widget.\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"android.view.\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"android.webkit.\"</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> View <span class=\"title\">createViewFromTag</span><span class=\"params\">(Context context, String name, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"view\"</span>)) &#123;<span class=\"comment\">//如果是view标签，则获取里面的class属性（该View的全名）</span></span><br><span class=\"line\">            name = attrs.getAttributeValue(<span class=\"keyword\">null</span>, <span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//需要传入构造器的两个参数的值</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = context;</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">1</span>] = attrs;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">'.'</span>)) &#123;<span class=\"comment\">//如果不包含小点，则是内部View</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sClassPrefixList.length; i++) &#123;<span class=\"comment\">//由于不知道View具体在哪个路径，所以通过循环所有路径，直到能实例化或结束</span></span><br><span class=\"line\">                    <span class=\"keyword\">final</span> View view = createView(context, name, sClassPrefixList[i]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//否则就是自定义View</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> createView(context, name, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果抛出异常，则返回null，让LayoutInflater自己去实例化</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 清空当前数据，避免和下次数据混在一起</span></span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">0</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            mConstructorArgs[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> View <span class=\"title\">createView</span><span class=\"params\">(Context context, String name, String prefix)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ClassNotFoundException, InflateException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先从缓存中获取当前类的构造器</span></span><br><span class=\"line\">        Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (constructor == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果缓存中没有创建过，则尝试去创建这个构造器。通过类加载器加载这个类，如果是系统内部View由于不是全路径的，则前面加上</span></span><br><span class=\"line\">                Class&lt;? extends View&gt; clazz = context.getClassLoader().loadClass(</span><br><span class=\"line\">                        prefix != <span class=\"keyword\">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class=\"line\">                <span class=\"comment\">//获取构造器</span></span><br><span class=\"line\">                constructor = clazz.getConstructor(sConstructorSignature);</span><br><span class=\"line\">                <span class=\"comment\">//将构造器放入缓存</span></span><br><span class=\"line\">                sConstructorMap.put(name, constructor);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//设置为无障碍（设置后即使是私有方法和成员变量都可访问和修改，除了final修饰的）</span></span><br><span class=\"line\">            constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"comment\">//实例化</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> constructor.newInstance(mConstructorArgs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We do not want to catch these, lets return null and let the actual LayoutInflater</span></span><br><span class=\"line\">            <span class=\"comment\">// try</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当然还有另外的方式来创建，就是直接用LayoutInflater内部的那一套</li>\n<li>将<code>view = ViewProducer.createViewFromTag(context, name, attrs);</code>删除，换成下方代码：</li>\n<li>代码位置：<a href=\"https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinInflaterFactory.java\" target=\"_blank\" rel=\"noopener\">SkinInflaterFactory.java</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LayoutInflater inflater = mAppCompatActivity.getLayoutInflater();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (-<span class=\"number\">1</span> == name.indexOf(<span class=\"string\">'.'</span>))<span class=\"comment\">//如果为系统内部的View则，通过循环这几个地方来实例化View，道理跟上面ViewProducer里面一样</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String prefix : sClassPrefixList)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            view = inflater.createView(name, prefix, attrs);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        view = inflater.createView(name, <span class=\"keyword\">null</span>, attrs);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>sClassPrefixList</code>的定义 </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] sClassPrefixList = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"android.widget.\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"android.view.\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"android.webkit.\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>最后是最终的拦截获取需要换肤的View的部分，也就是上面<code>SkinInflaterFactory</code>类的<code>onCreateView</code>最后调用的<code>parseSkinAttr</code>方法</p>\n</blockquote>\n<ul>\n<li>定义类一个成员来保存所有需要换肤的View, SkinItem里面的逻辑就是定义了设置换肤的方法。如：View的setBackgroundColor或setColor等设置换肤就是靠它。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;View, SkinItem&gt; mSkinItemMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>SkinAttr: 需要换肤处理的xml属性，如何定义请参照官方文档：<a href=\"https://github.com/burgessjp/ThemeSkinning\" target=\"_blank\" rel=\"noopener\">https://github.com/burgessjp/ThemeSkinning</a></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">parseSkinAttr</span><span class=\"params\">(Context context, AttributeSet attrs, View view)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//保存需要换肤处理的xml属性</span></span><br><span class=\"line\">    List&lt;SkinAttr&gt; viewAttrs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//变量该view的所有属性</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; attrs.getAttributeCount(); i++) &#123;</span><br><span class=\"line\">        String attrName = attrs.getAttributeName(i);<span class=\"comment\">//获取属性名</span></span><br><span class=\"line\">        String attrValue = attrs.getAttributeValue(i);<span class=\"comment\">//获取属性值</span></span><br><span class=\"line\">        <span class=\"comment\">//如果属性是style，例如xml中设置：style=\"@style/test_style\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"style\"</span>.equals(attrName)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//可换肤的属性</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span>[] skinAttrs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;android.R.attr.textColor, android.R.attr.background&#125;;</span><br><span class=\"line\">            <span class=\"comment\">//经常在自定义View时，构造方法中获取属性值的时候使用到。</span></span><br><span class=\"line\">            <span class=\"comment\">//这里通过传入skinAttrs，TypeArray中将会包含这两个属性和值，如果style里没有那就没有 - -</span></span><br><span class=\"line\">            TypedArray a = context.getTheme().obtainStyledAttributes(attrs, skinAttrs, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">//获取属性对应资源的id，第一个参数这里对应下标的就是上面skinAttrs数组里定义的下标，第二个参数是没有获取到的默认值</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> textColorId = a.getResourceId(<span class=\"number\">0</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> backgroundId = a.getResourceId(<span class=\"number\">1</span>, -<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (textColorId != -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//如果有颜色属性</span></span><br><span class=\"line\">                <span class=\"comment\">//&lt;style name=\"test_style\"&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">//&lt;item name=\"android:textColor\"&gt;@color/colorAccent&lt;/item&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">//&lt;item name=\"android:background\"&gt;@color/colorPrimary&lt;/item&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">//&lt;/style&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">//以上边的参照来看</span></span><br><span class=\"line\">                <span class=\"comment\">//entryName就是colorAccent</span></span><br><span class=\"line\">                String entryName = context.getResources().getResourceEntryName(textColorId);</span><br><span class=\"line\">                <span class=\"comment\">//typeName就是color</span></span><br><span class=\"line\">                String typeName = context.getResources().getResourceTypeName(textColorId);</span><br><span class=\"line\">                <span class=\"comment\">//创建一换肤属性实力类来保存这些信息</span></span><br><span class=\"line\">                SkinAttr skinAttr = AttrFactory.get(<span class=\"string\">\"textColor\"</span>, textColorId, entryName, typeName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (skinAttr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    viewAttrs.add(skinAttr);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (backgroundId != -<span class=\"number\">1</span>) &#123;<span class=\"comment\">//如果有背景属性</span></span><br><span class=\"line\">                String entryName = context.getResources().getResourceEntryName(backgroundId);</span><br><span class=\"line\">                String typeName = context.getResources().getResourceTypeName(backgroundId);</span><br><span class=\"line\">                SkinAttr skinAttr = AttrFactory.get(<span class=\"string\">\"background\"</span>, backgroundId, entryName, typeName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (skinAttr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    viewAttrs.add(skinAttr);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a.recycle();</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是支持的属性，并且值是引用的，如：@color/red</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (AttrFactory.isSupportedAttr(attrName) &amp;&amp; attrValue.startsWith(<span class=\"string\">\"@\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//去掉属性值前面的“@”则为id</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> id = Integer.parseInt(attrValue.substring(<span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (id == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//资源名字，如:text_color_selector</span></span><br><span class=\"line\">                String entryName = context.getResources().getResourceEntryName(id);</span><br><span class=\"line\">                <span class=\"comment\">//资源类型，如:color、drawable</span></span><br><span class=\"line\">                String typeName = context.getResources().getResourceTypeName(id);</span><br><span class=\"line\">                SkinAttr mSkinAttr = AttrFactory.get(attrName, id, entryName, typeName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mSkinAttr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    viewAttrs.add(mSkinAttr);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (NumberFormatException e) &#123;</span><br><span class=\"line\">                SkinL.e(TAG, e.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//是否有需要换肤的属性？</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!SkinListUtils.isEmpty(viewAttrs)) &#123;</span><br><span class=\"line\">        SkinItem skinItem = <span class=\"keyword\">new</span> SkinItem();</span><br><span class=\"line\">        skinItem.view = view;</span><br><span class=\"line\">        skinItem.attrs = viewAttrs;</span><br><span class=\"line\">        mSkinItemMap.put(skinItem.view, skinItem);</span><br><span class=\"line\">        <span class=\"comment\">//是否换肤</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SkinManager.getInstance().isExternalSkin() ||</span><br><span class=\"line\">                SkinManager.getInstance().isNightMode()) &#123;<span class=\"comment\">//如果当前皮肤来自于外部或者是处于夜间模式</span></span><br><span class=\"line\">            skinItem.apply();<span class=\"comment\">//应用于这个view</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"采用方案的注意事项和疑问\"><a href=\"#采用方案的注意事项和疑问\" class=\"headerlink\" title=\"采用方案的注意事项和疑问\"></a>采用方案的注意事项和疑问</h2><ol>\n<li>可能系统会更改相关方法，但好处大于弊端</li>\n<li>插件化也是外置apk来加载，如何做到呢？<ul>\n<li>占时不去研究</li>\n</ul>\n</li>\n<li>皮肤从网络上下载到哪个目录？如何断定皮肤已经下载？<ul>\n<li>可以通过<code>SkinFileUtils</code>工具类调用<code>getSkinDir</code>方法获取皮肤的缓存目录</li>\n<li>下载的时候可以直接下载到这个目录</li>\n<li>有没有某个皮肤就判断该文件夹下有没有这个文件了</li>\n</ul>\n</li>\n<li>如何不打包之前可以直接预览？<ul>\n<li>想要能在打包前提前预览效果，而不每次想看一看效果就要打一个apk包</li>\n<li>首先，大家都应该知道分渠道的概念。通过分渠道打包，因为我们能把资源也分成不同渠道的，运行不同渠道，所得到的资源是不一样的。</li>\n<li>然后，我们在:<code>项目目录\\app\\src</code>，创建一个和渠道相同名字的目录。比如说有个<code>red</code>渠道。<img src=\"image/android-skin/qudao.png\" alt=\"渠道定义\"> <img src=\"image/android-skin/red.png\" alt=\"red渠道png\"></li>\n<li>最后，我们选编译的渠道为red，然后直接运行就可以看到效果了。如果可以直接把res拷贝到皮肤项目打包就行了。<img src=\"image/android-skin/choose_build.png\" alt=\"选择编译渠道\"></li>\n</ul>\n</li>\n<li>换肤对应的属性需要是View提供了set方法的的属性！<ul>\n<li>如果没有提供则不能在java代码中设置值</li>\n<li>如果是自定义View那么就添加对应方法</li>\n<li>如果是系统或类库View，额(⊙o⊙)…</li>\n</ul>\n</li>\n<li>换肤的属性值需要是@开头的数据引用，如：@color/red<ul>\n<li>原因是因为固定的值一般不可能是需要换肤的属性，在<code>SkinInfaterFactory</code>的方法<code>parseSkinAttr</code>中有这样一句来进行过滤没有带@的属性值：<img src=\"image/android-skin/guo_lv_@.png\" alt=\"过滤没带@的属性值\"></li>\n<li>但此时，正好有一个自定义View没有按照常路出牌，它的值就是图片名字没有类型没有引用，通过java代码<code>context.getResources().getIdentifier(name, &quot;mipmap&quot;, context.getPackageName())</code>来获取图片资源（<a href=\"https://github.com/xujiaji/FlycoTabLayout\" target=\"_blank\" rel=\"noopener\">参考这奇葩方式的库</a>）。但由于这个属性是需要换肤更换的属性，于是没办法，专门为这两个属性在<code>SkinInfaterFactory</code>的<code>parseSkinAttr</code>方法中写了个判断<img src=\"image/android-skin/dan_du_get_attr.png\" alt=\"单独判断这两属性\">。<a href=\"https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinInflaterFactory.java\" target=\"_blank\" rel=\"noopener\">参考这代码</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"其他参考\"><a href=\"#其他参考\" class=\"headerlink\" title=\"其他参考\"></a>其他参考</h2><ol>\n<li><a href=\"https://www.jianshu.com/p/af7c0585dd5b\" target=\"_blank\" rel=\"noopener\">Android主题换肤 无缝切换</a> <em>(主要参考对象，用的也是他修改<code>Android-Skin-Loader</code>后的框架<code>ThemeSkinning</code>）</em></li>\n<li><a href=\"http://blog.zhaiyifan.cn/2015/09/10/Android%E6%8D%A2%E8%82%A4%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/\" target=\"_blank\" rel=\"noopener\">Android换肤技术总结</a></li>\n<li><a href=\"https://blog.csdn.net/singwhatiwanna/article/details/22597587\" target=\"_blank\" rel=\"noopener\">Android apk动态加载机制的研究</a></li>\n</ol>\n<h2 id=\"涉及及其延生\"><a href=\"#涉及及其延生\" class=\"headerlink\" title=\"涉及及其延生\"></a>涉及及其延生</h2><ol>\n<li>插件化开发，既然能这样获取资源，也能获取class文件</li>\n<li>通过对view的拦截可以把某个控件整体替换掉。<br>比如AppCompatActivity将TextView偷偷替换成了AppCompatTextView等等。</li>\n</ol>\n","next":{"title":"Android开发笔记","slug":"android-notes"},"link":"http://yoursite.com/post/android-skin"}