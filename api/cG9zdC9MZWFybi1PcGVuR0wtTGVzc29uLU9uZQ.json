{"title":"OpenGL Android课程一：入门","date":"2019-01-21T08:10:46.000Z","author":"xujiaji","thumbnail":"https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/6093CCF8-F7C1-4F4E-A668-C9E76783063F.png","link":"post/Learn-OpenGL-Lesson-One","comments":true,"tags":["Android","OpenGL","学习","翻译"],"categories":["OpenGL"],"updated":"2019-04-08T06:56:07.337Z","content":"<blockquote>\n<p>翻译文</p>\n</blockquote>\n<p>原文标题：OpenGL Android Lesson One: Getting Started<br>原文链接：<a href=\"http://www.learnopengles.com/android-lesson-one-getting-started/\" target=\"_blank\" rel=\"noopener\">http://www.learnopengles.com/android-lesson-one-getting-started/</a><br><a id=\"more\"></a></p>\n<hr>\n<p>这是在Android中使用OpenGL ES2的第一个教程。这一课中，我们将一步一步跟随代码，学习如何创建一个OpenGL ES 2并绘制到屏幕上。<br>我们还将了解什么是着色器，它们如何工作，以及怎样使用矩阵将场景转换为您在屏幕上看到的图像。最后，您需要在清单文件中添加您正在使用OpenGL ES 2的说明，以告知Android应用市场支持的设备可见。</p>\n<h1 id=\"入门\">入门<a href=\"post/Learn-OpenGL-Lesson-One#入门\"></a></h1><p>我们将过一道下面所有的代码并且解释每一部分的作用。您可以跟着拷贝每一处的代码片段来创建您自己的项目，您也可以在文章末尾下载这个已完成的项目。<br>在开发工具（如：Android Studio）中创建您的Android项目，名字不重要，这里由于这个课程我将<code>MainActivity</code>更名为<code>LessonOneActivity</code>。</p>\n<blockquote>\n<p>我们来看这段代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 保留对GLSurfaceView的引用*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> GLSurfaceView mGLSurfaceView;</span><br></pre></td></tr></table></figure>\n<p>这个<a href=\"http://developer.android.com/reference/android/opengl/GLSurfaceView.html\" target=\"_blank\" rel=\"noopener\">GLSurfaceView</a>是一个特别的View，它为我们管理OpenGL界面并且将它绘制在Android View系统。它还添加了许多功能，使其更易于使用OpenGL，包括下面等等：</p>\n<ul>\n<li>它为OpenGL提供一个专用的着色线程，因此主线程不会停懈</li>\n<li>它支持连续或按需渲染</li>\n<li>它使用<a href=\"https://en.wikipedia.org/wiki/EGL_(API)\" target=\"_blank\" rel=\"noopener\">EGL</a> (OpenGL和底层系统窗口之间的接口)来处理屏幕设置</li>\n</ul>\n<blockquote>\n<p><code>GLSurfaceView</code>使得在Android中设置和使用OpenGL相对轻松</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    mGLSurfaceView = <span class=\"keyword\">new</span> GLSurfaceView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">//检测系统是否支持OpenGL ES 2.0</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ConfigurationInfo configurationInfo = activityManager.getDeviceConfigurationInfo();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> supportsEs2 = configurationInfo.reqGlEsVersion &gt;= <span class=\"number\">0x20000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsEs2) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 请求一个OpenGL ES 2.0兼容的上下文</span></span><br><span class=\"line\">        mGLSurfaceView.setEGLContextClientVersion(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置我们的Demo渲染器，定义在后面讲</span></span><br><span class=\"line\">        mGLSurfaceView.setRenderer(<span class=\"keyword\">new</span> LessonOneRenderer());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果您想同时支持ES 1.0和2.0的话，这里您可以创建兼容OpenGL ES 1.0的渲染器</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setContentView(mGLSurfaceView);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>onCreate()</code>方法中是我们创建OpenGL上下文以及一切开始发生的重要部分。<br>在我们的<code>onCreate()</code>方法中,在调用<code>super.onCreate()</code>后我们首先创建了<code>GLSurfaceView</code>实例。<br>然后我们需要弄清楚系统是否支持OpenGL ES 2.为此，我们获得一个<code>ActivityManager</code>实例，它允许我们与全局系统状态进行交互。<br>然后我们使用它获取设备配置信息，它将告诉我们设备是否支持OpenGL ES 2。<br>我们也可以通过传入不同的渲染器来支持OpenGL ES 1.x，尽管因为API不同，我们需要编写不同的代码。对于本课我们仅仅关注支持OpenGL ES 2。</p>\n<p>一旦我们知道设备是否支持OpenGL ES 2，我们告诉<code>GLSurfaceView</code>兼容OpenGL ES 2，然后传入我们的自定义渲染器。无论何时调整界面或绘制新帧，系统都会调用此渲染器。</p>\n<p>最后，我们调用<code>setContentView()</code>设置GLSurfaceView为显示内容，它告诉Android这个活动内容因该被我们的OpenGL界面填充。要入门OpenGL，就是这么简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    <span class=\"comment\">//Activity 必须在onResume中调用GLSurfaceView的onResume方法</span></span><br><span class=\"line\">    mGLSurfaceView.onResume();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    <span class=\"comment\">//Activity 必须在onPause中调用GLSurfaceView的onPause方法</span></span><br><span class=\"line\">    mGLSurfaceView.onPause();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>GLSurfaceView</code>要求我们在Activity<code>onResume()</code>和<code>onPause()</code>的父方法被调用后分别调用它的<code>onResume()</code>和<code>onPause()</code>方法。我们在此添加调用以完善我们的Activity。</p>\n<h2 id=\"可视化3D世界\">可视化3D世界<a href=\"post/Learn-OpenGL-Lesson-One#可视化3D世界\"></a></h2><p>在这部分，我们来看怎样让OpenGL ES 2工作，以及我们如何在屏幕上绘制东西。<br>在Activity中我们传入自定义的<a href=\"http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html\" target=\"_blank\" rel=\"noopener\">GLSurfaceView.Renderer</a>到<code>GLSurfaceView</code>，它将在这里定义。<br>这个渲染器有三个重要的方法，每当系统事件发生时，它们将会自动被调用：</p>\n<blockquote>\n<p><em>public void onSurfaceCreated(GL10 gl, EGLConfig config)</em></p>\n</blockquote>\n<p>当界面第一次被创建时调用，如果我们失去界面上下文并且之后由系统重建，也会被调用。</p>\n<blockquote>\n<p><em>public void onSurfaceChanged(GL10 gl, int width, int height)</em></p>\n</blockquote>\n<p>每当界面改变时被调用；例如，从纵屏切换到横屏，在创建界面后也会被调用。</p>\n<blockquote>\n<p><em>public void onDrawFrame(GL10 gl)</em></p>\n</blockquote>\n<p>每当绘制新帧时被调用。</p>\n<p>您可能注意到<code>GL10</code>的实例被传入名字是<code>gl</code>。当使用OpengGL ES 2绘制时，我们不能使用它；<br>我们使用<code>GLES20</code>类的静态方法来代替。这个<code>GL10</code>参数仅仅是在这里，因为相同的接口被使用在OpenGL ES 1.x。</p>\n<blockquote>\n<p>在我们的渲染器可以显示任何内容之前，我们需要有些东西去显示。在OpenGL ES 2，我们通过制定数字数组传递内容。这些数字可以表示位置、颜色或任何我们需要的。在这个Demo中，我们将显示三个三角形。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新类成员</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FloatBuffer mTriangle1Verticels;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FloatBuffer mTriangle2Verticels;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FloatBuffer mTriangle3Verticels;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 每个Float多少字节*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mBytePerFloat = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 初始Model数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LessonOneRenderer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个三角形是红色，蓝色和绿色组成</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] triangle1VerticesData = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// X, Y, Z,</span></span><br><span class=\"line\">        <span class=\"comment\">// R, G, B, A</span></span><br><span class=\"line\">        -<span class=\"number\">0.5F</span>, -<span class=\"number\">0.25F</span>, <span class=\"number\">0.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0.5F</span>, -<span class=\"number\">0.25F</span>, <span class=\"number\">0.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0.0F</span>, <span class=\"number\">0.559016994F</span>, <span class=\"number\">0.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 初始化缓冲区</span></span><br><span class=\"line\">    mTriangle1Verticels = ByteBuffer.allocateDirect(triangle1VerticesData.length * mBytePerFloat).order(ByteOrder.nativeOrder()).asFloatBuffer();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    mTriangle1Verticels.put(triangle1VerticesData).position(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么，这些是什么意思？如果您曾经使用过OpenGL 1， 您可能会习惯这样做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">glBegin(GL_TRIANGLES);</span><br><span class=\"line\">glVertex3f(-<span class=\"number\">0.5f</span>, -<span class=\"number\">0.25f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\">glColor3f(<span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">glEnd();</span><br></pre></td></tr></table></figure>\n<p>这种方法在OpenGL ES 2中不起作用。我们不是通过一堆方法调用来定义点，而是定义一个数组。让我们再来看看我们这个数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] triangle1VerticesData = &#123;</span><br><span class=\"line\">                <span class=\"comment\">// X, Y, Z,</span></span><br><span class=\"line\">                <span class=\"comment\">// R, G, B, A</span></span><br><span class=\"line\">                -<span class=\"number\">0.5f</span>, -<span class=\"number\">0.25f</span>, <span class=\"number\">0.0f</span>,</span><br><span class=\"line\">                <span class=\"number\">1.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">0.0f</span>, <span class=\"number\">1.0f</span>,</span><br><span class=\"line\">                ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面展示的代表三角形的一个点。我们已设置好前三个数字代表位置（X,Y,Z），随后的四个数字代表颜色（红，绿，蓝，透明度）。<br>您不必太担心如何定义这个数组；只要记住当我们想绘制东西在OpenGL ES 2时，我们需要以块的形式传递数据，而不是一次传递一个。</p>\n<h3 id=\"了解缓冲区\">了解缓冲区<a href=\"post/Learn-OpenGL-Lesson-One#了解缓冲区\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化缓冲区</span></span><br><span class=\"line\">mTriangle1Verticels = ByteBuffer.allocateDirect(triangle1VerticesData.length * mBytePerFloat).order(ByteOrder.nativeOrder()).asFloatBuffer();</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>我们在Android上使用Java进行编码，但OpengGL ES 2底层实现其实使用C语言编写的。<br>在我们将数据传递给OpenGL之前，我们需要将其转换成它能理解的形式。<br>Java和native系统可能不会以相同的顺序存储它们的字节，因此我们使用一个特殊的缓冲类并创建一个足够大的<code>ByteBuffer</code>来保存我们的数据，并告诉它使用native字节顺序存储数据。<br>然后我们将它转换成<code>FloatBuffer</code>，以便我们可以使用它来保存浮点数据。<br>最后，我们将数组复制到缓冲区。</p>\n<p>这个缓冲区的东西看起来可能很混乱，单请记住，在将数据传递给OpenGL之前，我们需要做一个额外的步骤。我们现在的缓冲区已准备好可以用于将数据传入OpenGL。</p>\n<p><strong>另外，<a href=\"https://issuetracker.google.com/issues/36921128\" target=\"_blank\" rel=\"noopener\">float缓冲区在Froyo上很慢</a>,在Gingerbread上缓慢，因此您可能不希望经常更换它们。</strong></p>\n<h3 id=\"理解矩阵\">理解矩阵<a href=\"post/Learn-OpenGL-Lesson-One#理解矩阵\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// new class 定义</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 存储view矩阵。可以认为这是一个相机，我们通过相机将世界空间转换为眼睛空间</span></span><br><span class=\"line\"><span class=\"comment\"> * 它定位相对于我们眼睛的东西</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mViewMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置背景清理颜色为灰色</span></span><br><span class=\"line\">    GLES20.glClearColor(<span class=\"number\">0.5F</span>, <span class=\"number\">0.5F</span>, <span class=\"number\">0.5F</span>, <span class=\"number\">0.5F</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将眼睛放到原点之后</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> eyeX = <span class=\"number\">0.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> eyeY = <span class=\"number\">0.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> eyeZ = <span class=\"number\">1.5F</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 我们的眼睛望向哪</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> lookX = <span class=\"number\">0.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> lookY = <span class=\"number\">0.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> lookZ = -<span class=\"number\">5.0F</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置我们的向量，这是我们拿着相机时头指向的方向</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> upX = <span class=\"number\">0.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> upY = <span class=\"number\">1.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> upZ = <span class=\"number\">0.0F</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 可以这样想象：我们在桥上拿着相机90°弯腰拍摄水平面下5米处的美人鱼</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置view矩阵，可以说这个矩阵代表相机的位置</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：在OpenGL 1中使用ModelView matrix，这是一个model和view矩阵的组合。</span></span><br><span class=\"line\">    <span class=\"comment\">//在OpenGL2中，我们选择分别跟踪这些矩阵</span></span><br><span class=\"line\">    Matrix.setLookAtM(mViewMatrix, <span class=\"number\">0</span>, eyeX, eyeY, eyeZ, lookX, lookY, lookZ, upX, upY, upZ);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一个有趣的话题是矩阵！无论您何时进行3D编程，这些都将成为您最好的朋友。因此，您需要很好的了解他们。</p>\n<p>当我们的界面被创建，我们第一件事情是设置清理颜色为灰色。alpha部分也设置为灰色，但在我们本课程中没有进行alpha混合，因此该值未使用。我们只需要设置一次清理颜色，之后我们不会更改它。</p>\n<p>我们第二件事情是设置view矩阵。我们使用了几个不同种类的矩阵，它们都做了些重要的事情：</p>\n<ol>\n<li>model（模型）矩阵，该矩阵用于在“世界”中的某处放置模型。例如，您有一个模型车，你想将它放置在东边一千米处，您将使用矩阵模型来做这件事。</li>\n<li>view （视图)矩阵，该矩阵代表相机。如果我们想查看位于东边一千米处的车，我们也需要向东移动一千米（另一种思考方式是我们保持静止，世界向西移动一千米）。我们使用视图矩阵来做到这点。</li>\n<li>projection（投影)矩阵。由于我们的屏幕是平面的，我们需要进行最后的转换，将我们的视图“投影”到我们的屏幕上并获得漂亮的3D视角。这就是投影矩阵的用途</li>\n</ol>\n<p>可以在<a href=\"http://www.songho.ca/opengl/gl_transform.html\" target=\"_blank\" rel=\"noopener\">SongHo的OpenGL教程</a>中找到很好的解释。我建议您阅读几次直到您把握好这个想法为止；别担心，我也阅读了它好几次！</p>\n<p>在OpenGL 1中，模型和视图矩阵被组合并且假设了摄像机处于(0,0,0)坐标并面向Z轴方向。</p>\n<p>我们不需要手动构建这些矩阵，Android有一个Matrix帮助类，它能为我们做繁重的工作。这里，我为摄像机创建了一个视图矩阵，它位于原点后，朝向远处。</p>\n<h3 id=\"定义vertex（顶点）和fragment（片段）着色器\">定义vertex（顶点）和fragment（片段）着色器<a href=\"post/Learn-OpenGL-Lesson-One#定义vertex（顶点）和fragment（片段）着色器\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String vertexShader =</span><br><span class=\"line\">        <span class=\"string\">\"uniform mat4 u_MVPMatrix;    \\n\"</span> + <span class=\"comment\">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class=\"line\">        <span class=\"string\">\"attribute vec4 a_Position;   \\n\"</span> + <span class=\"comment\">// 我们将要传入的每个顶点的位置信息</span></span><br><span class=\"line\">        <span class=\"string\">\"attribute vec4 a_Color;      \\n\"</span> + <span class=\"comment\">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"varying vec4 v_Color;        \\n\"</span> + <span class=\"comment\">// 他将被传入片段着色器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"void main()                  \\n\"</span> + <span class=\"comment\">// 顶点着色器入口</span></span><br><span class=\"line\">        <span class=\"string\">\"&#123;                            \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"   v_Color = a_Color;        \\n\"</span> + <span class=\"comment\">// 将颜色传递给片段着色器</span></span><br><span class=\"line\">                                            <span class=\"comment\">// 它将在三角形内插值</span></span><br><span class=\"line\">        <span class=\"string\">\"   gl_Position = u_MVPMatrix \\n\"</span> + <span class=\"comment\">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class=\"line\">        <span class=\"string\">\"               * a_Position  \\n\"</span> + <span class=\"comment\">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class=\"line\">        <span class=\"string\">\"&#125;                            \\n\"</span>;</span><br></pre></td></tr></table></figure>\n<p>在OpenGL ES 2中任何我们想展示在屏幕中的东西都必须先经过顶点和片段着色器，还好这些着色器并不像他们看起来的那么复杂。顶点着色器在每个顶点执行操作，并把这些操作的结果使用在片段着色器做额外的每像素计算。</p>\n<p>每个着色器基本由输入（input）、输出（output）和一个程序（program）组成。<br>首先我们定义一个统一（uniform），它是一个包含所有变换的组合矩阵。它是所有顶点的常量，用于将它们投影到屏幕上。<br>然后我们定义了位置和颜色属性（attribute），这些属性将从我们之前定义的缓存区中读入，并指定每个顶点的位置和颜色。<br>接着我们定义了一个变量（varying），它负责在三角形中插值并传递到片段着色器。当它运行到片段着色器，它将为每个像素持有一个插值。</p>\n<p>假设我们定义了一个三角形每个点都是红色、绿色和蓝色，我们调整它的大小让它占用10像素屏幕。当片段着色器运行时，它将为每像素包含一个不同的变量（varying）颜色。在某一点上，变量（varying）将是红色，但是在红色和蓝色之间它可能是更紫的颜色。</p>\n<p>除了设置颜色，我们还告诉OpenGL顶点在屏幕上的最终位置。然后我们定义片段着色器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String fragmentShader =</span><br><span class=\"line\">        <span class=\"string\">\"precision mediump float;       \\n\"</span> + <span class=\"comment\">// 我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class=\"line\">        <span class=\"string\">\"varying vec4 v_Color;          \\n\"</span> + <span class=\"comment\">// 这是从三角形每个片段内插的顶点着色器的颜色</span></span><br><span class=\"line\">        <span class=\"string\">\"void main()                    \\n\"</span> + <span class=\"comment\">// 片段着色器入口</span></span><br><span class=\"line\">        <span class=\"string\">\"&#123;                              \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"   gl_FragColor = v_Color;     \\n\"</span> + <span class=\"comment\">// 直接将颜色传递</span></span><br><span class=\"line\">        <span class=\"string\">\"&#125;                              \\n\"</span>;</span><br></pre></td></tr></table></figure>\n<p>这是个片段着色器，它会将东西放到屏幕上。在这个着色器中，我们得到的变量（varying）颜色来自顶点着色器，然后将它直接传递给OpenGL。该点已按像素插值，因为片段着色器将针对每个将要绘制的像素点运行。</p>\n<p>更多信息：<a href=\"http://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf\" target=\"_blank\" rel=\"noopener\">OpenGL ES 2 API快速参考卡</a></p>\n<h3 id=\"将着色器加载到OpenGL\">将着色器加载到OpenGL<a href=\"post/Learn-OpenGL-Lesson-One#将着色器加载到OpenGL\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载顶点着色器</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> vertexShaderHandle = GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (vertexShaderHandle != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 传入顶点着色器源代码</span></span><br><span class=\"line\">    GLES20.glShaderSource(vertexShaderHandle, vertexShader);</span><br><span class=\"line\">    <span class=\"comment\">// 编译顶点着色器</span></span><br><span class=\"line\">    GLES20.glCompileShader(vertexShaderHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取编译状态</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] compileStatus = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">    GLES20.glGetShaderiv(vertexShaderHandle, GLES20.GL_COMPILE_STATUS, compileStatus, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果编译失败则删除着色器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compileStatus[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        GLES20.glDeleteShader(vertexShaderHandle);</span><br><span class=\"line\">        vertexShaderHandle = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (vertexShaderHandle == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Error creating vertex shader.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先，我们创建一个着色器对象。如果成功，我们将得到这个对象的引用。<br>然后，我们使用这个引用传入着色器源码然后编译它。<br>我们可以从OpenGL获取编译是否成功的状态，如果失败我们可以使用<code>GLES20.glGetShaderInfoLog(shader)</code>找到原因。我们按照相同的步骤加载片段着色器。</p>\n<h3 id=\"将顶点和片段着色器链接到一个程序中\">将顶点和片段着色器链接到一个程序中<a href=\"post/Learn-OpenGL-Lesson-One#将顶点和片段着色器链接到一个程序中\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个程序对象并将引用放进去</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> programHandle = GLES20.glCreateProgram();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (programHandle != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 绑定顶点着色器到程序对象中</span></span><br><span class=\"line\">    GLES20.glAttachShader(programHandle, vertexShaderHandle);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定片段着色器到程序对象中</span></span><br><span class=\"line\">    GLES20.glAttachShader(programHandle, fragmentShaderHandle);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定属性</span></span><br><span class=\"line\">    GLES20.glBindAttribLocation(programHandle, <span class=\"number\">0</span>, <span class=\"string\">\"a_Position\"</span>);</span><br><span class=\"line\">    GLES20.glBindAttribLocation(programHandle, <span class=\"number\">1</span>, <span class=\"string\">\"a_Color\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将两个着色器连接到程序</span></span><br><span class=\"line\">    GLES20.glLinkProgram(programHandle);</span><br><span class=\"line\">    <span class=\"comment\">// 获取连接状态</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] linkStatus = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">    GLES20.glGetProgramiv(programHandle, GLES20.GL_LINK_STATUS, linkStatus, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果连接失败，删除这程序</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (linkStatus[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        GLES20.glDeleteProgram(programHandle);</span><br><span class=\"line\">        programHandle = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (programHandle == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Error creating program.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在我们使用顶点和片段着色器之前，我们需要将它们绑定到一个程序中，它连接了顶点着色器的输出和片段着色器的输入。这也是让我们从程序传递输入并使用着色器绘制形状的原因。</p>\n<p>我们创建一个程序对象，如果成功绑定着色器。我们想要将位置和颜色作为属性传递进去，因此我们需要绑定这些属性。然后我们将着色器连接到一起。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新类成员</span></span><br><span class=\"line\"><span class=\"comment\">/** 这将用于传递变换矩阵*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mMVPMatrixHandle;</span><br><span class=\"line\"><span class=\"comment\">/** 用于传递model位置信息*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mPositionHandle;</span><br><span class=\"line\"><span class=\"comment\">/** 用于传递模型颜色信息*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColorHandle;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// 设置程序引用，这将在之后传递值到程序时使用</span></span><br><span class=\"line\">    mMVPMatrixHandle = GLES20.glGetUniformLocation(programHandle, <span class=\"string\">\"u_MVPMatrix\"</span>);</span><br><span class=\"line\">    mPositionHandle = GLES20.glGetAttribLocation(programHandle, <span class=\"string\">\"a_Position\"</span>);</span><br><span class=\"line\">    mColorHandle = GLES20.glGetAttribLocation(programHandle, <span class=\"string\">\"a_Color\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 告诉OpenGL渲染的时候使用这个程序</span></span><br><span class=\"line\">    GLES20.glUseProgram(programHandle);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在我们成功连接程序后，我们还要完成几个任务，以便我们能实际使用它。<br>第一个任务是获取引用，因为我们要传递数据到程序中。<br>然后我们要告诉OpenGL在绘制时使用我们这个程序。<br>由于本课我们仅使用了一个程序，我们可以将它放到<code>onSurfaceCreated()</code>方法中而不是<code>onDrawFrame()</code></p>\n<h3 id=\"设置透视投影\">设置透视投影<a href=\"post/Learn-OpenGL-Lesson-One#设置透视投影\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新类成员</span></span><br><span class=\"line\"><span class=\"comment\">// 存放投影矩阵，用于将场景投影到2D视角</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mProjectionMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(GL10 gl, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置OpenGL界面和当前视图相同的尺寸</span></span><br><span class=\"line\">    GLES20.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的透视投影矩阵，高度保持不变，而高度根据纵横比而变换</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> ratio = (<span class=\"keyword\">float</span>) width / height;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> left = -ratio;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> right = ratio;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> bottom = -<span class=\"number\">1.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> top = <span class=\"number\">1.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> near = <span class=\"number\">1.0F</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> far = <span class=\"number\">10.0F</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Matrix.frustumM(mProjectionMatrix, <span class=\"number\">0</span>, left, right, bottom, top, near, far);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>onSurfaceChanged()</code>方法至少被调用一次，每当界面改变也会被调用。因为我们需要每当界面改变的时候重置投影矩阵，那么<code>onSurfaceChanged()</code>方法中是个理想的地方。</p>\n<h3 id=\"绘制东西到屏幕上！\">绘制东西到屏幕上！<a href=\"post/Learn-OpenGL-Lesson-One#绘制东西到屏幕上！\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新类成员</span></span><br><span class=\"line\"><span class=\"comment\">// 存放模型矩阵，该矩阵用于将模型从对象空间（可以认为每个模型开始都位于宇宙的中心）移动到世界空间</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mModelMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(GL10 gl)</span> </span>&#123;</span><br><span class=\"line\">    GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 每10s完成一次旋转</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> time = SystemClock.uptimeMillis() % <span class=\"number\">10000L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> angleDegrees = (<span class=\"number\">360.0F</span> / <span class=\"number\">10000.0F</span>) * ((<span class=\"keyword\">int</span>)time);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 画三角形</span></span><br><span class=\"line\">    Matrix.setIdentityM(mModelMatrix, <span class=\"number\">0</span>);</span><br><span class=\"line\">    Matrix.rotateM(mModelMatrix, <span class=\"number\">0</span>, angleDegrees, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>);</span><br><span class=\"line\">    drawTriangle(mTriangle1Verticels);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是实际显示在屏幕上的内容。我们清理屏幕，因此不会得到任何奇怪的<a href=\"https://en.wikipedia.org/wiki/Noclip_mode#.22Hall_of_mirrors.22_effect\" target=\"_blank\" rel=\"noopener\">镜像效应</a>影响，我们希望我们的三角形在屏幕上能有平滑的动画，通常使用时间而不是帧率更好。</p>\n<blockquote>\n<p>实际绘制在<code>drawTriangle()</code>方法中完成</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新的类成员</span></span><br><span class=\"line\"><span class=\"comment\">/** 为最终的组合矩阵分配存储空间，这将用来传入着色器程序*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] mMVPMatrix = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">16</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 每个顶点有多少字节组成，每次需要迈过这么一大步（每个顶点有7个元素，3个表示位置，4个表示颜色，7 * 4 = 28个字节）*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mStrideBytes = <span class=\"number\">7</span> * mBytePerFloat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 位置数据偏移量*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPositionOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 一个元素的位置数据大小*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mPositionDataSize = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 颜色数据偏移量*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mColorOffset = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 一个元素的颜色数据大小*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mColorDataSize = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 从给定的顶点数据中绘制一个三角形</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> aTriangleBuffer 包含顶点数据的缓冲区</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">drawTriangle</span><span class=\"params\">(FloatBuffer aTriangleBuffer)</span> </span>&#123;</span><br><span class=\"line\">    aTriangleBuffer.position(mPositionOffset);</span><br><span class=\"line\">    GLES20.glVertexAttribPointer(</span><br><span class=\"line\">            mPositionHandle, mPositionDataSize, GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</span><br><span class=\"line\">            mStrideBytes, aTriangleBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 传入颜色信息</span></span><br><span class=\"line\">    aTriangleBuffer.position(mColorOffset);</span><br><span class=\"line\">    GLES20.glVertexAttribPointer(mColorHandle, mColorDataSize, GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</span><br><span class=\"line\">            mStrideBytes, aTriangleBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    GLES20.glEnableVertexAttribArray(mColorHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将视图矩阵乘以模型矩阵，并将结果存放到MVP Matrix（model * view）</span></span><br><span class=\"line\">    Matrix.multiplyMM(mMVPMatrix, <span class=\"number\">0</span>, mViewMatrix, <span class=\"number\">0</span>, mModelMatrix, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将上面计算好的视图模型矩阵乘以投影矩阵，并将结果存放到MVP Matrix（model * view * projection）</span></span><br><span class=\"line\">    Matrix.multiplyMM(mMVPMatrix, <span class=\"number\">0</span>, mProjectionMatrix, <span class=\"number\">0</span>, mMVPMatrix, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class=\"number\">1</span>, <span class=\"keyword\">false</span>, mMVPMatrix, <span class=\"number\">0</span>);</span><br><span class=\"line\">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>您还记得我们最初创建渲染器时定义的那些缓冲区吗？我们终于可以使用它们了。<br>我们需要使用<code>GLES20.glVertexAttribPointer()</code>来告诉OpenGL怎样使用这些数据。</p>\n<blockquote>\n<p>我们来看第一个使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aTriangleBuffer.position(mPositionOffset);</span><br><span class=\"line\">GLES20.glVertexAttribPointer(</span><br><span class=\"line\">        mPositionHandle, mPositionDataSize, GLES20.GL_FLOAT, <span class=\"keyword\">false</span>,</span><br><span class=\"line\">        mStrideBytes, aTriangleBuffer);</span><br><span class=\"line\">GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br></pre></td></tr></table></figure>\n<p>我们设置缓冲区的位置偏移，它位于缓冲区的开头。然后我们告诉OpenGL使用这些数据并将其提供给顶点着色器并将其应用到位置属性（a_Position）。我们也需要告诉OpenGL每个顶点或迈幅之间有多少个元素。</p>\n<blockquote>\n<p>注意：迈幅（Stride）需要定义为字节（byte），尽管每个顶点之间我们有7个元素（3个是位置，4个是颜色），但我们事实上有28个字节，因为每个浮点数（float）就是4个字节（byte）。忘记此步骤您可能没有任何错误，但是你会想知道为什么您的屏幕上看不到任何内容。</p>\n</blockquote>\n<p>最终，我们使用了顶点属性，往下我们使用了下一个属性。再往后点我们构建一个组合矩阵，将点投影到屏幕上。我们也可以在顶点着色器中执行此操作，但是由于它只需要执行一次我们也可以只缓存结果。<br>我们使用<code>GLES20.glUniformMatrix4fv()</code>方法将最终的矩阵传入顶点着色器。<br><code>GLES20.glDrawArrays()</code>将我们的点转换为三角形并将其绘制在屏幕上。</p>\n<h2 id=\"总结\">总结<a href=\"post/Learn-OpenGL-Lesson-One#总结\"></a></h2><p>呼呼！这是重要的一课，如果您完成了本课，感谢您！<br>我们学习了怎样创建OpenGL上下文，传入形状数据，加载顶点和片段着色器，设置我们的转换矩阵，最终放在一起。<br>如果一切顺利，您因该看到了类似下面的截屏。<br><img src=\"https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190122233309.png\" alt=\"screenshot\"></p>\n<p>这一课有很多需要消化的内容，您可能需要多次阅读这些步骤才能理解它。<br>OpenGL ES 2需要更多的设置才能开始，但是一旦您完成了这个过程几次，您就会记住这个流程。</p>\n<h2 id=\"在Android市场上发布\">在Android市场上发布<a href=\"post/Learn-OpenGL-Lesson-One#在Android市场上发布\"></a></h2><p>当开发的应用我们不想在无法运行这些应用程序的人在市场上看到它们，否则当应用程序在其设备上崩溃时，我们可能会收到大量糟糕的评论和评分。<br>要防止OpenGL ES 2 应用程序出现在不支持它的设备上，你可以在清单文件中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:glEsVersion</span>=<span class=\"string\">\"0x00020000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这告诉市场您的app需要有OpenGL ES 2支持，不支持的设备将会隐藏您的app。</p>\n<h2 id=\"进一步探索\">进一步探索<a href=\"post/Learn-OpenGL-Lesson-One#进一步探索\"></a></h2><p>尝试更改动画速度，顶点或颜色，看看会发生什么！<br>可以在Github下载本课程源代码：<a href=\"https://github.com/learnopengles/Learn-OpenGLES-Tutorials\" target=\"_blank\" rel=\"noopener\">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href=\"https://market.android.com/details?id=com.learnopengles.android\" target=\"_blank\" rel=\"noopener\">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href=\"https://github.com/xujiaji/LearnOpenGL/releases\" target=\"_blank\" rel=\"noopener\">github download</a></p>\n<h2 id=\"教程目录\">教程目录<a href=\"post/Learn-OpenGL-Lesson-One#教程目录\"></a></h2><ul>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">OpenGL Android课程一：入门</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two\">OpenGL Android课程二：环境光和漫射光</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three\">OpenGL Android课程三：使用每片段照明</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four\">OpenGL Android课程四：介绍纹理基础</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five\">OpenGL Android课程五：介绍混合（Blending）</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six\">OpenGL Android课程六：介绍纹理过滤</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven\">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li>\n</ul>\n","prev":{"title":"OpenGL Android课程二：环境光和漫射光","link":"post/Learn-OpenGL-Lesson-Two"},"next":{"title":"C 学习笔记","link":"post/c-learn-note"},"plink":"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One/","toc":[{"title":"入门","id":"入门","index":"1","children":[{"title":"可视化3D世界","id":"可视化3D世界","index":"1.1","children":[{"title":"了解缓冲区","id":"了解缓冲区","index":"1.1.1"},{"title":"理解矩阵","id":"理解矩阵","index":"1.1.2"},{"title":"定义vertex（顶点）和fragment（片段）着色器","id":"定义vertex（顶点）和fragment（片段）着色器","index":"1.1.3"},{"title":"将着色器加载到OpenGL","id":"将着色器加载到OpenGL","index":"1.1.4"},{"title":"将顶点和片段着色器链接到一个程序中","id":"将顶点和片段着色器链接到一个程序中","index":"1.1.5"},{"title":"设置透视投影","id":"设置透视投影","index":"1.1.6"},{"title":"绘制东西到屏幕上！","id":"绘制东西到屏幕上！","index":"1.1.7"}]},{"title":"总结","id":"总结","index":"1.2"},{"title":"在Android市场上发布","id":"在Android市场上发布","index":"1.3"},{"title":"进一步探索","id":"进一步探索","index":"1.4"},{"title":"教程目录","id":"教程目录","index":"1.5"}]}],"reward":true,"copyright":{"author":"xujiaji","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One/\" title=\"OpenGL Android课程一：入门\">https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One/</a>"}}