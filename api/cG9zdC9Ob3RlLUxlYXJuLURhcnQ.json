{"title":"Dart学习笔记","date":"2019-03-29T08:45:28.000Z","link":"post/Note-Learn-Dart","comments":true,"tags":["Dart"],"updated":"2019-10-15T16:00:05.384Z","content":"<h1 id=\"Dart笔记\">Dart笔记<a href=\"post/Note-Learn-Dart#Dart笔记\"></a></h1><h2 id=\"变量\">变量<a href=\"post/Note-Learn-Dart#变量\"></a></h2><p>初始化一个变量</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">'Bob'</span>;</span><br></pre></td></tr></table></div></figure>\n<p><code>name</code>将自动判断为<code>String</code>类型，如果不想让其限制为了一个类型可以使用<code>Object</code>或<code>dynamic</code>类型。<code>Object</code>类型和java中差不多是一个道理。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dynamic</span> name = <span class=\"string\">'Bob'</span>;</span><br></pre></td></tr></table></div></figure>\n<p>如果想明确显示声明类型：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> name = <span class=\"string\">'Bob'</span>;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"默认值\">默认值<a href=\"post/Note-Learn-Dart#默认值\"></a></h2><p>dart中未初始化的值都是null，即使是数字也是一个对象。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> lineCount;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lineCount);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//: null</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"fianl-和-const\">fianl 和 const<a href=\"post/Note-Learn-Dart#fianl-和-const\"></a></h2><p>当你不想让变量可以再次改变的时候用<code>final</code>或<code>const</code>修饰，如下：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> name = <span class=\"string\">'Bob'</span>; <span class=\"comment\">// 或者： final String name = 'Bob'; const name = 'Bob';</span></span><br></pre></td></tr></table></div></figure>\n<p>此时name的值不可以在修改！</p>\n<p>二者的区别是，<code>const</code>是编译时期常量，意思是说在编译后就有确切的值。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如下表达式可以正常运行，但是将bar变量前面的修饰词const换掉，那么就会报错。去掉就代表了bar的值在编译时的不确定性。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bar = <span class=\"number\">1000000</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果atm前面的修饰const换成final后，即使bar是变量也是无所谓了</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">double</span> atm = <span class=\"number\">1.01325</span> * bar;</span><br></pre></td></tr></table></div></figure>\n<p><code>const</code>关键字还可以用来修饰值</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">const</span> [];</span><br><span class=\"line\"><span class=\"keyword\">final</span> bar = <span class=\"keyword\">const</span> [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = [];</span><br></pre></td></tr></table></div></figure>\n<p>此时<code>foo</code>是变量，值是常量。意思是<code>foo</code>还可以引用其他同类型的值，<code>foo = [1, 2, 3];</code>是莫得问题的。但是如果让值<code>const []</code>改变就不行了<del><code>foo.add(1);</code></del></p>\n<p><code>bar</code>变量虽然无法改变引用，但是值是可以改变的。<code>bar.add(1);</code>是OK的，但是 <del><code>bar = [1];</code></del> 是NO。</p>\n<p><code>baz</code>，上面两样都没得玩！</p>\n<p>如果<code>const</code>的变量是类一个级别的，这样声明：<code>static const</code></p>\n<h2 id=\"内置类型\">内置类型<a href=\"post/Note-Learn-Dart#内置类型\"></a></h2><p>以下类型是<code>Dart</code>中特殊支持的类型</p>\n<ul>\n<li><code>数字 numbers</code></li>\n<li><code>字符串 strings</code></li>\n<li><code>布尔 booleans</code></li>\n<li><code>列表 lists</code>(也称为数组)</li>\n<li><code>集合 sets</code></li>\n<li><code>映射 maps</code></li>\n<li><code>符文 runes</code>(用于在字符串中表示Unicode字符)</li>\n<li><code>符号 symbols</code></li>\n</ul>\n<p>您可以使用字面文字初始化一些特别的类型对象，例如<code>&#39;this is a string&#39;</code>是一个string对象，<code>true</code>是一个boolean对象。</p>\n<p>因为在Dart中每个变量都引用了一个对象（一个类的实例），您可以使用构造方法初始化变量，有些内置类型有它们自己的构造函数。例如，您可以使用<code>Map()</code>构造来创建一个map实例。</p>\n<h3 id=\"数字-Numbers\">数字 Numbers<a href=\"post/Note-Learn-Dart#数字-Numbers\"></a></h3><p>Dart有两种方式表示数字</p>\n<p><strong><a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/int-class.html\" target=\"_blank\" rel=\"noopener\">int</a></strong></p>\n<p>整型最大不超过64bit，并依赖于平台。在Dart虚拟机上，值取值范围<code>[-2^63,2^63 - 1]</code>。编译为JavaScript时使用<a href=\"https://stackoverflow.com/questions/2802957/number-of-bits-in-javascript-numbers/2803010#2803010\" target=\"_blank\" rel=\"noopener\">JavaScript数字</a>，区间范围为<code>[-2^53,2^53-1]</code>。</p>\n<p><strong><a href=\"https://stackoverflow.com/questions/2802957/number-of-bits-in-javascript-numbers/2803010#2803010\" target=\"_blank\" rel=\"noopener\">double</a></strong></p>\n<p>64bit（双精度）浮点数由IEEE 754标准规定</p>\n<p><code>int</code>和<code>double</code>都是<a href=\"https://api.dartlang.org/stable/dart-core/num-class.html\" target=\"_blank\" rel=\"noopener\">num</a>的子类型，在<code>num</code>类型中包含了<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>基本运算符，在其他方法中您也可以找到<code>abs()</code>,<code>ceil()</code>,<code>floor()</code>。（位运算符，如<code>&gt;&gt;</code>，定义在<code>int</code>类）如果<code>num</code>和其子类没有您想要的，<a href=\"https://api.dartlang.org/stable/dart-math\" target=\"_blank\" rel=\"noopener\">dart:math</a>类库中可能有。</p>\n<p>字符串和数字互转</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String -&gt; int</span></span><br><span class=\"line\"><span class=\"built_in\">int</span>.parse(<span class=\"string\">'1'</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String -&gt; double</span></span><br><span class=\"line\"><span class=\"built_in\">double</span>.parse(<span class=\"string\">'1.1'</span>); <span class=\"comment\">// 1.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// int -&gt; String</span></span><br><span class=\"line\"><span class=\"number\">1.</span>toString(); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// double -&gt; String 保留两位小数，四舍五入</span></span><br><span class=\"line\"><span class=\"number\">3.14159</span>.toStringAsFixed(<span class=\"number\">2</span>); <span class=\"comment\">// 1.14</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"字符串-Strings\">字符串 Strings<a href=\"post/Note-Learn-Dart#字符串-Strings\"></a></h3><p>Dart字符串是一系列UTF-16代码单元，您可以使用单引号或双引号创建一个字符串：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单引号可以表示</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">'single quotes string'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双引号也可以表示</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">\"double quotes strings\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 单引号表示时，里面有单引号需要转义</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">'i\\'m a cool boy'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双引号表示时，里面有单引号不需要转义</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s4 = <span class=\"string\">\"i'm a cool boy\"</span>;</span><br></pre></td></tr></table></div></figure>\n<p>可以将表达式放在字符串里面通过<code>${expression}</code>的形式，表达式只是变量时，您可以不要<code>{}</code>。如果是一个对象时Dart会通过调用<code>toString()</code>方法获取这对象的字符串。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"string\">'bc'</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'a<span class=\"subst\">$v<span class=\"string\">'); // abc</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">print('</span></span>A<span class=\"subst\">$&#123;v.toUpperCase()&#125;</span>'</span>); <span class=\"comment\">// ABC</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'<span class=\"subst\">$Set</span>()'</span>); <span class=\"comment\">// Set&lt;dynamic&gt;()</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'<span class=\"subst\">$&#123;Set().toString()&#125;</span>'</span>); <span class=\"comment\">// &#123;&#125;</span></span><br></pre></td></tr></table></div></figure>\n<p>相邻的字符串会自己拼接或通过<code>+</code>号拼接</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'1'</span></span><br><span class=\"line\">  <span class=\"string\">'2'</span></span><br><span class=\"line\">  <span class=\"string\">\"3\"</span></span><br><span class=\"line\">  <span class=\"string\">'4'</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a); <span class=\"comment\">// 1234</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"string\">'1'</span> + <span class=\"string\">'2'</span> + <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b); <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></div></figure>\n<p>可以使用三倍的单引号或双引号创建多行字符串：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 =</span><br><span class=\"line\">  <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">  1</span></span><br><span class=\"line\"><span class=\"string\">    2\\n3</span></span><br><span class=\"line\"><span class=\"string\">  '''</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(s1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面是输出，试了下双引号单引号效果一样</span></span><br><span class=\"line\"><span class=\"comment\">//    1</span></span><br><span class=\"line\"><span class=\"comment\">//      2</span></span><br><span class=\"line\"><span class=\"comment\">//3</span></span><br></pre></td></tr></table></div></figure>\n<p>您可以在引号前面加<code>r</code>表示字符串是原始(raw)类型：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">r'a\\nb'</span>); <span class=\"comment\">// a\\nb</span></span><br></pre></td></tr></table></div></figure>\n<p>是什么就输出什么，不需要转义，单引号双引号三倍引号都可以用。</p>\n<p>有关字符串中表达Unicode字符的详细信息，请参阅<a href=\"https://www.dartlang.org/guides/language/language-tour#runes\" target=\"_blank\" rel=\"noopener\">字符 Runes</a></p>\n<p>字符串文字是一个编译期常量</p>\n<p>更多字符串使用信息，请参阅<a href=\"https://www.dartlang.org/guides/libraries/library-tour#strings-and-regular-expressions\" target=\"_blank\" rel=\"noopener\">字符串和正则表达式</a></p>\n<h3 id=\"布尔-Booleans\">布尔 Booleans<a href=\"post/Note-Learn-Dart#布尔-Booleans\"></a></h3><p>Dart用类型<code>bool</code>表示布尔值。只有两个对象表示<code>bool</code>类型：<code>true</code>和<code>false</code>，它们的文字表达都是编译时期常量。</p>\n<p>Dart是类型安全的，意味着您不能使用像<code>if (非布尔值)</code>或<code>assert(非布尔值)</code>的代码。取而代之的是明确指出布尔值，如下：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查空字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fullName = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(fullName.isEmpty);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查0</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hitPoints = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(hitPoints &lt;= <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查null</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> unicorn;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(unicorn == <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查 NaN （Not a Number 不是一个数）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iMeantToDoThis = <span class=\"number\">0</span> / <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"列表-Lists\">列表 Lists<a href=\"post/Note-Learn-Dart#列表-Lists\"></a></h3><p>也许几乎所有编程语言中最常见的集合是数组，或有序的对象组。在Dart中数组就是<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/List-class.html\" target=\"_blank\" rel=\"noopener\">List</a>对象，因此大多数人叫他们列表。</p>\n<p>Dart的列表写法看起来就是其他语言数组的写法。下面是一个Dart列表的示例：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></div></figure>\n<p>上面的类型为<code>List&lt;int&gt;</code></p>\n<p>更多关于列表的信息，请参阅<a href=\"https://www.dartlang.org/guides/language/language-tour#generics\" target=\"_blank\" rel=\"noopener\">泛型</a>和<a href=\"https://www.dartlang.org/guides/libraries/library-tour#collections\" target=\"_blank\" rel=\"noopener\">集合</a></p>\n<h3 id=\"集合-Sets\">集合 Sets<a href=\"post/Note-Learn-Dart#集合-Sets\"></a></h3><p>set 在Dart中是一个无序集合，Dart支持通过文字表达和<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/Set-class.html\" target=\"_blank\" rel=\"noopener\">Set</a>来创建集合。</p>\n<p>简单的通过文字表达</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> halogens = &#123;<span class=\"string\">'fluorine'</span>, <span class=\"string\">'chlorine'</span>, <span class=\"string\">'bromine'</span>, <span class=\"string\">'iodine'</span>, <span class=\"string\">'astatine'</span>&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>上面类型为：<code>Set&lt;String&gt;</code></p>\n<p>创建一个空集合：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names1 = &lt;<span class=\"built_in\">String</span>&gt;&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">String</span>&gt; names2 = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var names3 = &#123;&#125;; //注意这样创建的不是一个Set，而是一个Map，具体来说是一个 Map&lt;dynamic, dynamic&gt;</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"映射-Maps\">映射 Maps<a href=\"post/Note-Learn-Dart#映射-Maps\"></a></h3><p>通常，一个map有key和value。key和value可以是任何对象，key只能出现一个，但值可以对应多个key。Dart创建映射也可以通过直接表达和<a href=\"https://api.dartlang.org/stable/dart-core/Map-class.html\" target=\"_blank\" rel=\"noopener\">Set</a>类型表达。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aa = &#123;</span><br><span class=\"line\">  <span class=\"string\">'a'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bb = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>上面，第一个<code>aa</code>是<code>Map&lt;String, String&gt;</code>类型，第二个<code>bb</code>是<code>Map&lt;int, String&gt;</code>类型。</p>\n<p>通过Map构造也可以创建同样的效果：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aa = <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">aa[<span class=\"string\">'a'</span>] = <span class=\"string\">'1'</span>;</span><br><span class=\"line\">aa[<span class=\"string\">'b'</span>] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bb = <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">bb[<span class=\"number\">1</span>] = <span class=\"string\">'a'</span>;</span><br><span class=\"line\">bb[<span class=\"number\">2</span>] = <span class=\"string\">'b'</span>;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"Runes\">Runes<a href=\"post/Note-Learn-Dart#Runes\"></a></h3><p>Dart中Runes是UTF-32字符集的字符串对象</p>\n<p>Unicode为世界上的所有文字系统都定义了一个唯一数字代表文字、数字和符号。因为一个Dart字符串是一个UTF-16字符集序列，在字符串中表示32位Unicode值需要特殊语法。</p>\n<p>常用来表达一个Unicode字符的方式是<code>\\uXXXX</code>，这儿的<code>XXXX</code>是一个4位16进制值。例如，心字符（♥）是<code>\\u2665</code>。如果是多余或少于4个16进制数字的，将值放进大括号里面。例如笑的emoji（😆）是<code>\\u{1f600}</code>。</p>\n<p><a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/String-class.html\" target=\"_blank\" rel=\"noopener\">String</a>类有几个属性使您可以将字符串转为符文runes。<code>codeUnitAt</code>和<code>codeUnits</code>返回16位字符集（数字编码）。使用<code>runes</code>返回一个字符串符文</p>\n<p>下面说明了符文，16位和32位字符集之间的关系</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> clapping = <span class=\"string\">'\\u&#123;1f44f&#125;ab'</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(clapping); <span class=\"comment\">// 👏ab</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(clapping.codeUnitAt(<span class=\"number\">0</span>)); <span class=\"comment\">// 55357</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(clapping.codeUnits); <span class=\"comment\">// [55357, 56399, 97, 98]</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(clapping.runes.toList()); <span class=\"comment\">// [128079, 97, 98]</span></span><br><span class=\"line\"></span><br><span class=\"line\">Runes input = <span class=\"keyword\">new</span> Runes(</span><br><span class=\"line\">    <span class=\"string\">'\\u2665  \\u&#123;1f605&#125;  \\u&#123;1f60e&#125;  \\u&#123;1f47b&#125;  \\u&#123;1f596&#125;  \\u&#123;1f44d&#125;'</span>);</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">String</span>.fromCharCodes(input)); <span class=\"comment\">// ♥  😅  😎  👻  🖖  👍</span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"符号-Symbols\">符号 Symbols<a href=\"post/Note-Learn-Dart#符号-Symbols\"></a></h3><p>在Dart程序中，<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/Symbol-class.html\" target=\"_blank\" rel=\"noopener\">Symbol</a>对象表示声明运算符或标识符。您可能从来不会使用到Symbol，但是它们在按名字引用标识符的API非常有用，因为缩小到改变标识符名称而不更改标识符。</p>\n<p>获取标识符的symbol，使用sybol表达式，只需<code>#</code>号后跟标识符：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map[#foo] = <span class=\"string\">\"foo's value\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(map[#foo]); <span class=\"comment\">// foo's value</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(#foo); <span class=\"comment\">// Symbol(\"foo\")</span></span><br></pre></td></tr></table></div></figure>\n<p>Symbol是编译器常量。</p>\n<h2 id=\"方法-Functions\">方法 Functions<a href=\"post/Note-Learn-Dart#方法-Functions\"></a></h2><p>Dart是一个真正的面向对象语言，因此甚至函数也是一个对象有一个类型，<a href=\"https://api.dartlang.org/stable/dart-core/Function-class.html\" target=\"_blank\" rel=\"noopener\">Function</a>。这意味着方法能分配给变量或传入其他方法，你也可以好像调用一个函数一样，调用Dart类的实例。详情，请参阅<a href=\"https://www.dartlang.org/guides/language/language-tour#callable-classes\" target=\"_blank\" rel=\"noopener\">可调用的类</a>。</p>\n<p>这儿有个实现方法的例子：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isNoble(<span class=\"built_in\">int</span> atomicNumber) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>尽管<a href=\"https://www.dartlang.org/guides/language/effective-dart/design#prefer-type-annotating-public-fields-and-top-level-variables-if-the-type-isnt-obvious\" target=\"_blank\" rel=\"noopener\">Effective Dart建议写上返回类型</a>，但是如果你不写也可以正常工作：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isNoble(atomicNumber) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>这个方法里面只有一个表达式，于是可以简写：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isNoble(<span class=\"built_in\">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></div></figure>\n<p><code>=&gt; 表达式</code>语法是<code>{ return 表达式;}</code>的简写。<code>=&gt;</code>符号有时也被称为箭头语法。</p>\n<p>一个方法可能有两个类型的参数：必须和可选。必要的参数在最前，随后是可选参数。</p>\n<h3 id=\"可选参数\">可选参数<a href=\"post/Note-Learn-Dart#可选参数\"></a></h3><p>可选参数可以是位置参数或命名参数，不能同时存在</p>\n<h4 id=\"可选命名参数\">可选命名参数<a href=\"post/Note-Learn-Dart#可选命名参数\"></a></h4><p>当调用一个方法，您可以指定命名参数<code>paramName: value.</code>，例如：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enableFlags(bold: <span class=\"keyword\">true</span>, hidden: <span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></div></figure>\n<p>当定义一个方法时，使用<code>{param1, param2, ...}</code>来指定命名参数：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 设置加粗和隐藏标记</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> enableFlags(&#123;<span class=\"built_in\">bool</span> bold, <span class=\"built_in\">bool</span> hidden&#125;) &#123;...&#125;</span><br></pre></td></tr></table></div></figure>\n<p><a href=\"https://flutter.dev/\" target=\"_blank\" rel=\"noopener\">Flutter</a>实例创建可能更复杂，因此widget构造器仅使用命名参数。这让实例的创建更加容易阅读。</p>\n<p>您可以在任何Dard代码中标记注解<a href=\"https://pub.dartlang.org/documentation/meta/latest/meta/required-constant.html\" target=\"_blank\" rel=\"noopener\">@required</a>，表面它是一个必传参数。例如：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Scrollbar(&#123;Key key, <span class=\"meta\">@required</span> Widget child&#125;)</span><br></pre></td></tr></table></div></figure>\n<p>当<code>Scrollbar</code>被创建时，如果没有传入child那么解析器就会报告问题。</p>\n<p><a href=\"https://pub.dartlang.org/documentation/meta/latest/meta/required-constant.html\" target=\"_blank\" rel=\"noopener\">Required</a>被定义在<a href=\"https://pub.dartlang.org/packages/meta\" target=\"_blank\" rel=\"noopener\">meta</a>包中，要么直接导入<code>package:meta/meta.dart</code>，要么导入的其他包中导入过<code>meta</code>，例如Flutter的<code>package:flutter/material.dart</code>。</p>\n<p>命名参数加了<code>@required</code>必传，其他可传可不传。</p>\n<h4 id=\"可选位置参数\">可选位置参数<a href=\"post/Note-Learn-Dart#可选位置参数\"></a></h4><p>在<code>[]</code>中设置函数类型使它们作为可选位置参数，该参数可传可不传。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> say(<span class=\"built_in\">String</span> from, <span class=\"built_in\">String</span> msg, [<span class=\"built_in\">String</span> device]) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"string\">'<span class=\"subst\">$from</span> says <span class=\"subst\">$msg<span class=\"string\">';</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  if (device != null) &#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    result = '</span></span><span class=\"subst\">$result</span> with a <span class=\"subst\">$device<span class=\"string\">';</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  &#125;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  return result;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p>没有传入可选位置参数时：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(say(<span class=\"string\">'Bob'</span>, <span class=\"string\">'Howdy'</span>)); <span class=\"comment\">// Bob says Howdy</span></span><br></pre></td></tr></table></div></figure>\n<p>当传入可选位置参数的时候：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(say(<span class=\"string\">'Bob'</span>, <span class=\"string\">'Howdy'</span>, <span class=\"string\">'smoke signal'</span>)); <span class=\"comment\">// Bob says Howdy with a smoke a signal</span></span><br></pre></td></tr></table></div></figure>\n<h4 id=\"参数默认值\">参数默认值<a href=\"post/Note-Learn-Dart#参数默认值\"></a></h4><p>命名参数和位置参数都可以使用<code>=</code>来定义默认值，默认值必须是编译器常量。如果没有提供默认值，默认值为<code>null</code></p>\n<p>设置命名参数的默认值：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> enableFlags(&#123;<span class=\"built_in\">bool</span> bold = <span class=\"keyword\">false</span>, <span class=\"built_in\">bool</span> hidden = <span class=\"keyword\">false</span>&#125;) &#123;...&#125;</span><br><span class=\"line\">enableFlags(bold: <span class=\"keyword\">true</span>); <span class=\"comment\">// bold = true, hidden = false</span></span><br></pre></td></tr></table></div></figure>\n<p>设置可选位置参数的默认值：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> say(<span class=\"built_in\">String</span> from, <span class=\"built_in\">String</span> msg,</span><br><span class=\"line\">    [<span class=\"built_in\">String</span> device = <span class=\"string\">'carrier pigeon'</span>, <span class=\"built_in\">String</span> mood]) &#123; ... &#125;</span><br></pre></td></tr></table></div></figure>\n<p>你也可以为列表或集合参数设置默认值，如下：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> doStuff(</span><br><span class=\"line\">    &#123;<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; list = <span class=\"keyword\">const</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt; gifts = <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">      <span class=\"string\">'first'</span>: <span class=\"string\">'paper'</span>,</span><br><span class=\"line\">      <span class=\"string\">'second'</span>: <span class=\"string\">'cotton'</span>,</span><br><span class=\"line\">      <span class=\"string\">'third'</span>: <span class=\"string\">'leather'</span></span><br><span class=\"line\">    &#125;&#125;) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">'list:  <span class=\"subst\">$list<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  print('</span></span>gifts: <span class=\"subst\">$gifts<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"main-方法\"><code>main()</code>方法<a href=\"post/Note-Learn-Dart#main-方法\"></a></h3><p>每个app必须有个顶级<code>main()</code>方法，它是app的入口点。<code>main()</code>方法返回<code>void</code>并且有一个可选参数<code>List&lt;String&gt;</code>。</p>\n<p>这是一个web app的main()方法例子：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">querySelector</span>(<span class=\"string\">'#sample_text_id'</span>)</span><br><span class=\"line\">  ..text = <span class=\"string\">'Click me!'</span></span><br><span class=\"line\">  ..onClick.listen(reverseText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>注意：这里的<code>..</code>语法被称为<a href=\"https://www.dartlang.org/guides/language/language-tour#cascade-notation-\" target=\"_blank\" rel=\"noopener\">级联</a>，通过级联您可以多次对一个对象进行操作。</p>\n</blockquote>\n<p>下面是创建了一个命令行运行的app，在<code>main()</code>方法的参数可获得命令行的值：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; arguments) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(arguments);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>首先需要配置好dart环境变量，然后在终端当前文件目录运行：<code>dart test.dart 1 test</code>，将会输出<code>[1, test]</code>。</p>\n<p>您可以使用<a href=\"https://www.dartlang.org/guides/language/language-tour#cascade-notation-\" target=\"_blank\" rel=\"noopener\">args</a>类库定义或解析命令行参数。</p>\n<h3 id=\"方法看做类对象\">方法看做类对象<a href=\"post/Note-Learn-Dart#方法看做类对象\"></a></h3><p>您可以将一个方法作为参数传入另一个方法，例如：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> printElement(<span class=\"built_in\">int</span> element) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 将方法作为参数传入</span></span><br><span class=\"line\">  list.forEach(printElement);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行输出：</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n<p>您也可以为变量分配一个方法，例如：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loudify = (msg) =&gt; <span class=\"string\">'!!!<span class=\"subst\">$&#123;msg.toUpperCase()&#125;</span>!!!'</span>;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(loudify(<span class=\"string\">'hello'</span>)); <span class=\"comment\">// !!!HELLO!!!</span></span><br></pre></td></tr></table></div></figure>\n<p>这个例子使用匿名方法，更多信息请接着看看下面哦！</p>\n<h3 id=\"匿名方法\">匿名方法<a href=\"post/Note-Learn-Dart#匿名方法\"></a></h3><p>很多方面都有名字，例如<code>main()</code>或<code>printElement()</code>。您也可以创建一个没有名字的方法，我们称之为匿名方法，或<code>lambda</code>，或<code>闭包(closure)</code>。您可以分配给变量一个匿名方法，例如，您可以在列表中添加或移除它。</p>\n<p>匿名方法和命名方法差不多，一个或多个参数放在括号里，之间用逗号分隔。</p>\n<p>代码样式看起来如下面的格式：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">([[类型] 参数<span class=\"number\">1</span>[, …]]) &#123;</span><br><span class=\"line\">  代码块;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<p>下面的例子中定义了一个无类型参数<code>item</code>的匿名方法，这个方法在列表轮询时被调用，打印对应的值和下标：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"string\">'apples'</span>, <span class=\"string\">'bananas'</span>, <span class=\"string\">'oranges'</span>];</span><br><span class=\"line\">list.forEach((item) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">'<span class=\"subst\">$&#123;list.indexOf(item)&#125;</span>:<span class=\"subst\">$item<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125;);</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\"></span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">// 输出：</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">// 0:apples</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">// 1:bananas</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">// 2:oranges</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p>由于这个方法只有一条指令，您可以用箭头表达：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.forEach((item) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">'<span class=\"subst\">$&#123;list.indexOf(item)&#125;</span>: <span class=\"subst\">$item<span class=\"string\">'));</span></span></span></span><br></pre></td></tr></table></div></figure>\n<h3 id=\"作用域语法\">作用域语法<a href=\"post/Note-Learn-Dart#作用域语法\"></a></h3><p>Dart也是一个作用域语法语言，这意味着变量的作用域是确定的，只需改变代码布局就可。您可以使用花括号外的变量来查看是否在作用域内。</p>\n<p>下面是一个方法内嵌的例子，并且每个等级的作用域中都有一个变量：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> topLevel = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> insideMain = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> myFunction() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insideFunction = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> nestedFunction() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> insideNestedFunction = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(topLevel);</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(insideMain);</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(insideFunction);</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(insideNestedFunction);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>注意<code>nestedFunction()</code>如何使用每个级别的变量，一直到顶级。</p>\n<h3 id=\"闭包语法\">闭包语法<a href=\"post/Note-Learn-Dart#闭包语法\"></a></h3><p>一个闭包是一个方法对象，它能访问在它作用域语法内的变量。即使当这个方法使用在原来的作用域之外。</p>\n<p>方法能关联作用域范围的变量，在下面的例子中，<code>makeAdder()</code>获取的变量是<code>addBy</code>，返回一个方法，无论它返回在哪都会记住<code>addBy</code>。</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 返回一个方法</span></span><br><span class=\"line\"><span class=\"comment\">/// addBy + 方法的参数i</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> makeAdder(<span class=\"built_in\">num</span> addBy) =&gt; (i) =&gt; addBy + i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个加2的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> add2 = makeAdder(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建一个加4的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> add4 = makeAdder(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">'<span class=\"subst\">$&#123;add2(<span class=\"number\">3</span>)&#125;</span>, <span class=\"subst\">$&#123;add4(<span class=\"number\">3</span>)&#125;</span>'</span>); <span class=\"comment\">// 5,  7</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"测试方法相等性\">测试方法相等性<a href=\"post/Note-Learn-Dart#测试方法相等性\"></a></h3><p>这儿有一个测试最外层方法，静态方法和实例方法的相等性的例子：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> foo() &#123;&#125; <span class=\"comment\">// 最外层方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> bar() &#123;&#125; <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> baz() &#123;&#125; <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 比较静态方法</span></span><br><span class=\"line\">  x = foo;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(foo == x); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 比较实例方法</span></span><br><span class=\"line\">  x = A.bar;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(A.bar == x); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> v = A(); <span class=\"comment\">// 第一个A实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> w = A(); <span class=\"comment\">// 第二个A实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> y = w;</span><br><span class=\"line\">  x = w.baz;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 由于这两个变量引用同一个实例，因此他们的闭包相等</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(y.baz == x); <span class=\"comment\">// true</span></span><br><span class=\"line\">  <span class=\"comment\">// 由于这是两个实例，因此他们的闭包不等</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(v.baz == w.baz); <span class=\"comment\">// false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"返回值\">返回值<a href=\"post/Note-Learn-Dart#返回值\"></a></h3><p>所有方法都有一个返回值，如果没有指定返回值，那么在方法体中会隐式声明<code>return null;</code></p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() &#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(foo()); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></div></figure>\n<h2 id=\"运算符\">运算符<a href=\"post/Note-Learn-Dart#运算符\"></a></h2><p>下面的表格中展示了Dart中定义的运算符，您可以覆盖下面大部分运算符，详情参照：<a href=\"https://www.dartlang.org/guides/language/language-tour#overridable-operators\" target=\"_blank\" rel=\"noopener\">可覆盖运算符</a></p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">运算符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">单目后置</td>\n<td style=\"text-align:left\"><code>expr++</code> <code>expr--</code> <code>()</code> <code>[]</code> <code>.</code> <code>?.</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">单目前置</td>\n<td style=\"text-align:left\"><code>-expr</code> <code>!expr</code> <code>~expr</code> <code>++expr</code> <code>--expr</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">乘法类</td>\n<td style=\"text-align:left\"><code>*</code> <code>/</code> <code>%</code> <code>~/</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">加减类</td>\n<td style=\"text-align:left\"><code>+</code> <code>-</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">位移</td>\n<td style=\"text-align:left\"><code>&gt;&gt;</code> <code>&lt;&lt;</code> <code>&gt;&gt;&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">按位与</td>\n<td style=\"text-align:left\"><code>&amp;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">按位异或</td>\n<td style=\"text-align:left\"><code>^</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">按位或</td>\n<td style=\"text-align:left\">`</td>\n<td>`</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">关系和类型校验</td>\n<td style=\"text-align:left\"><code>&gt;=</code> <code>&gt;</code> <code>&lt;=</code> <code>&lt;</code> <code>as</code> <code>is</code> ‘is!’</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">等性</td>\n<td style=\"text-align:left\"><code>==</code> <code>!=</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">逻辑与</td>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">逻辑或</td>\n<td style=\"text-align:left\">`</td>\n<td></td>\n<td>`</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">是否是null</td>\n<td style=\"text-align:left\">??</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">三目运算</td>\n<td style=\"text-align:left\"><code>expr1 ? expr2 : expr2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">级联</td>\n<td style=\"text-align:left\"><code>..</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">赋值</td>\n<td style=\"text-align:left\"><code>=</code> <code>*=</code> <code>/=</code> <code>+=</code> <code>-=</code> <code>&amp;=</code> <code>^=</code> 等</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"算数运算符\">算数运算符<a href=\"post/Note-Learn-Dart#算数运算符\"></a></h3><p>Dart支持常用算数运算符，如下表所示：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>+</code></td>\n<td style=\"text-align:left\">加</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-</code></td>\n<td style=\"text-align:left\">减</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>-expr</code></td>\n<td style=\"text-align:left\">一元减，也称为否定（反转表达式的符号）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>*</code></td>\n<td style=\"text-align:left\">乘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>/</code></td>\n<td style=\"text-align:left\">除</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>~/</code></td>\n<td style=\"text-align:left\">除以，并返回整数结果</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>%</code></td>\n<td style=\"text-align:left\">求余</td>\n</tr>\n</tbody>\n</table></div></div>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> / <span class=\"number\">2</span>); <span class=\"comment\">// 2.5</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">5</span> ~/ <span class=\"number\">2</span>); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n<p>Dart也支持单目递增和递减运算符</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>++var</code></td>\n<td style=\"text-align:left\"><code>var = var + 1</code>(表达式的值为<code>var + 1</code>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>var++</code></td>\n<td style=\"text-align:left\"><code>var = var + 1</code>(表达式的值为<code>var</code>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>--var</code></td>\n<td style=\"text-align:left\"><code>var = var - 1</code>(表达式的值为<code>var - 1</code>)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>var--</code></td>\n<td style=\"text-align:left\"><code>var = var - 1</code>(表达式的值为<code>var</code>)</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"等式和关系运算符\">等式和关系运算符<a href=\"post/Note-Learn-Dart#等式和关系运算符\"></a></h3><p>下面的表格列出了等式和关系运算符的含义</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>==</code></td>\n<td style=\"text-align:left\">恒等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>!=</code></td>\n<td style=\"text-align:left\">不等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;</code></td>\n<td style=\"text-align:left\">大于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;</code></td>\n<td style=\"text-align:left\">小于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;=</code></td>\n<td style=\"text-align:left\">大于或等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;=</code></td>\n<td style=\"text-align:left\">小于或等于</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>使用<code>==</code>判断两个对象是否是同一个东西（在少数情况下您需要判断两个引用是否指向同一个对象时，使用<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/identical.html\" target=\"_blank\" rel=\"noopener\">identical()</a>）</p>\n<h3 id=\"类型检测运算符\">类型检测运算符<a href=\"post/Note-Learn-Dart#类型检测运算符\"></a></h3><p><code>as</code>,<code>is</code>和<code>is!</code>运算符用来检测运行时类型</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">意思</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>as</code></td>\n<td style=\"text-align:left\">类型转换（也经常用来指定<a href=\"https://www.dartlang.org/guides/language/language-tour#specifying-a-library-prefix\" target=\"_blank\" rel=\"noopener\">类库前缀</a>）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is</code></td>\n<td style=\"text-align:left\">对象是否有指定的类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>is!</code></td>\n<td style=\"text-align:left\">和上面相反</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><code>as</code> 强转类型， <code>is</code> 类型判断</p>\n<h3 id=\"赋值运算符\">赋值运算符<a href=\"post/Note-Learn-Dart#赋值运算符\"></a></h3><p>您已知道，您可以通过<code>=</code>运算符为变量赋值。如果要仅仅变量为<code>null</code>时才赋值，使用<code>??=</code>运算符</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\">  a ??= <span class=\"number\">10</span>;</span><br><span class=\"line\">  b ??= <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">'a = <span class=\"subst\">$a</span>, b = <span class=\"subst\">$b<span class=\"string\">'); // a = 5, b = 10</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p>组合赋值运算符，如<code>+=</code>将运算符和赋值结合</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>=</code></td>\n<td style=\"text-align:left\"><code>-=</code></td>\n<td style=\"text-align:left\"><code>/=</code></td>\n<td style=\"text-align:left\"><code>%=</code></td>\n<td style=\"text-align:left\"><code>&gt;&gt;=</code></td>\n<td style=\"text-align:left\"><code>^=</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>+=</code></td>\n<td style=\"text-align:left\"><code>*=</code></td>\n<td style=\"text-align:left\"><code>~/=</code></td>\n<td style=\"text-align:left\"><code>&lt;&lt;=</code></td>\n<td style=\"text-align:left\"><code>&amp;=</code></td>\n<td style=\"text-align:left\"><code>&#124;=</code></td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"逻辑运算符\">逻辑运算符<a href=\"post/Note-Learn-Dart#逻辑运算符\"></a></h3><p>您可以通过逻辑运算符颠倒或组合布尔表达式</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">意思</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>!expr</code></td>\n<td style=\"text-align:left\">颠倒是非</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&#124;&#124;</code></td>\n<td style=\"text-align:left\">逻辑或</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&amp;&amp;</code></td>\n<td style=\"text-align:left\">逻辑与</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"按位运算和移位运算符\">按位运算和移位运算符<a href=\"post/Note-Learn-Dart#按位运算和移位运算符\"></a></h3><p>您可以在Dart中操作数字的位运算</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">意思</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>&amp;</code></td>\n<td style=\"text-align:left\">与</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&#124;</code></td>\n<td style=\"text-align:left\">或</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>^</code></td>\n<td style=\"text-align:left\">异或</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>~expr</code></td>\n<td style=\"text-align:left\">取反</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&lt;&lt;</code></td>\n<td style=\"text-align:left\">左移</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>&gt;&gt;</code></td>\n<td style=\"text-align:left\">右移</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"条件表达式\">条件表达式<a href=\"post/Note-Learn-Dart#条件表达式\"></a></h3><p>Dart有两种表达式让您简明的表达需要使用到<code>if-else</code>的情景：</p>\n<p>1.三目运算符</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">condition ? expr1 : expr2</span><br></pre></td></tr></table></div></figure>\n<p>2.是否为null，如果为null则用后面的表达式</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expr1 ?? expr2</span><br></pre></td></tr></table></div></figure>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"number\">1</span> &gt; <span class=\"number\">2</span> ? <span class=\"string\">\"是的1&gt;2\"</span> : <span class=\"string\">\"不不，1&lt;2\"</span>); <span class=\"comment\">// 不不，1&lt;2</span></span><br><span class=\"line\">  <span class=\"built_in\">int</span> value;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(value ?? <span class=\"number\">100</span>); <span class=\"comment\">// 100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"级联表示法\">级联表示法<a href=\"post/Note-Learn-Dart#级联表示法\"></a></h3><p><code>..</code>允许您对同一个对象进行一系列连续的操作。不仅可以调用方法，您也可以为这个对象字段赋值。这通常为您节省了创建临时变量的不步骤，并能让你写成更多流畅的代码。</p>\n<p>请参考下面代码：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">querySelector</span>(<span class=\"string\">'#confirm'</span>) <span class=\"comment\">// 获得一个对象</span></span><br><span class=\"line\">  ..text = <span class=\"string\">'Confirm'</span> <span class=\"comment\">// 使用它的成员变量</span></span><br><span class=\"line\">  ..classes.add(<span class=\"string\">'important'</span>)</span><br><span class=\"line\">  ..onClick.listen((e) =&gt; <span class=\"built_in\">window</span>.alert(<span class=\"string\">'Confirmed!'</span>));</span><br></pre></td></tr></table></div></figure>\n<p>还有内部联结：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> addressBook = (AddressBookBuilder()</span><br><span class=\"line\">      ..name = <span class=\"string\">'jenny'</span></span><br><span class=\"line\">      ..email = <span class=\"string\">'jenny@example.com'</span></span><br><span class=\"line\">      ..phone = (PhoneNumberBuilder()</span><br><span class=\"line\">            ..number = <span class=\"string\">'415-555-0100'</span></span><br><span class=\"line\">            ..label = <span class=\"string\">'home'</span>)</span><br><span class=\"line\">          .build())</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"其他操作符\">其他操作符<a href=\"post/Note-Learn-Dart#其他操作符\"></a></h3><p>您已在其他案例中看到了大多数的相关操作符</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">操作符</th>\n<th style=\"text-align:left\">名字</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>()</code></td>\n<td style=\"text-align:left\">方法</td>\n<td style=\"text-align:left\">表示方法调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>[]</code></td>\n<td style=\"text-align:left\">列表访问</td>\n<td style=\"text-align:left\">通过索引引用列表中的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>.</code></td>\n<td style=\"text-align:left\">成员访问</td>\n<td style=\"text-align:left\">引用一个属性；例如：<code>foo.bar</code>，引用foo对象中的bar属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>?.</code></td>\n<td style=\"text-align:left\">条件成员访问</td>\n<td style=\"text-align:left\">左边的变量可以是null</td>\n</tr>\n</tbody>\n</table></div></div>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  A a;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(a?.b); <span class=\"comment\">// null, 如果不加“？”就会报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>更多关于<code>.</code>，<code>?.</code>和<code>..</code>的操作，请参考<a href=\"https://www.dartlang.org/guides/language/language-tour#classes\" target=\"_blank\" rel=\"noopener\">类</a></p>\n<h2 id=\"控制流语句\">控制流语句<a href=\"post/Note-Learn-Dart#控制流语句\"></a></h2><p>您可以使用下面的任意Dart代码控制流程</p>\n<ul>\n<li><code>if</code> 和 <code>else</code></li>\n<li><code>for</code> 循环</li>\n<li><code>while</code> 和 <code>do-while</code>循环</li>\n<li><code>break</code> 和 <code>continue</code></li>\n<li><code>switch</code> 和 <code>case</code></li>\n<li><code>assert</code></li>\n</ul>\n<p>您也可以可以通过<code>try-catch</code>和<code>throw</code>影响流程，详细介绍在<a href=\"https://www.dartlang.org/guides/language/language-tour#exceptions\" target=\"_blank\" rel=\"noopener\">异常</a></p>\n<h3 id=\"for循环\">for循环<a href=\"post/Note-Learn-Dart#for循环\"></a></h3><figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    callback.add(() =&gt; <span class=\"built_in\">print</span>(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  callback.forEach((c) =&gt; c());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出：</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></div></figure>\n<p>列表中放入的是两个闭包，列表是一个迭代器，您可以使用<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/Iterable/forEach.html\" target=\"_blank\" rel=\"noopener\">forEach()</a>方法来遍历。如果你不需要知道当前的迭代数量，使用<code>forEach()</code>是一个不错的选择：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">candidates.forEach((candidate) =&gt; candidate.interview());</span><br></pre></td></tr></table></div></figure>\n<p>可迭代的类如List和Set也支持<code>for-in</code><a href=\"https://www.dartlang.org/guides/libraries/library-tour#iteration\" target=\"_blank\" rel=\"noopener\">iteration</a>：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> collection = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">in</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(x); <span class=\"comment\">// 0 1 2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"Switch和case\">Switch和case<a href=\"post/Note-Learn-Dart#Switch和case\"></a></h3><p>值得注意的是switch里面使用<code>==</code>作为判断整型，字符串或编译期常量。用法大致和java差不多，主要注意下面这样的写法有改进：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"string\">'OPEN'</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (command) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'OPEN'</span>:</span><br><span class=\"line\">    executeOpen();</span><br><span class=\"line\">    <span class=\"comment\">// 错误： 没有break （如果去掉executeOpen();也是没有问题的）</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'CLOSED'</span>:</span><br><span class=\"line\">    executeClosed();</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>改：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"string\">'CLOSED'</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (command) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'CLOSED'</span>:</span><br><span class=\"line\">    executeClosed();</span><br><span class=\"line\">    <span class=\"keyword\">continue</span> nowClosed;</span><br><span class=\"line\">  <span class=\"comment\">// 继续执行nowClosed标签</span></span><br><span class=\"line\"></span><br><span class=\"line\">  nowClosed:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'NOW_CLOSED'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// Runs for both CLOSED and NOW_CLOSED.</span></span><br><span class=\"line\">    executeNowClosed();</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"断言\">断言<a href=\"post/Note-Learn-Dart#断言\"></a></h2><p>断言不会影响到生产代码，只应用在开发调试模式下</p>\n<h2 id=\"异常\">异常<a href=\"post/Note-Learn-Dart#异常\"></a></h2><p>您的Dart代码可以抛出或捕获异常，异常是发生了一些不希望的。如果异常没有捕获处理，会导致程序终止。Dart提供<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/Exception-class.html\" target=\"_blank\" rel=\"noopener\">Exception</a>和<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/Error-class.html\" target=\"_blank\" rel=\"noopener\">Error</a>类型，以及许多预定义的子类型。当然，您也可以定义您自己的异常。然而对于异常，Dart程序能抛出任何非null对象，不仅仅是Exception和Error对象。</p>\n<h3 id=\"Throw\">Throw<a href=\"post/Note-Learn-Dart#Throw\"></a></h3><p>下面是一个抛出异常的列子：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> FormatException(<span class=\"string\">'Expected at least 1 section'</span>);</span><br></pre></td></tr></table></div></figure>\n<p>您也可以随意抛出一个对象：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"string\">'异常。。。'</span>;</span><br></pre></td></tr></table></div></figure>\n<p>由于抛出异常是一个表达式，可以通过<code>=&gt;</code>如下表达：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> distanceTo(Point other) =&gt; <span class=\"keyword\">throw</span> UnimplementedError();</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"Catch\">Catch<a href=\"post/Note-Learn-Dart#Catch\"></a></h3><p>捕获一个异常</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  breedMoreLlamas();</span><br><span class=\"line\">&#125; on OutOfLlamasException &#123;</span><br><span class=\"line\">  buyMoreLlamas();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>捕获多个异常，<code>catch</code>可以得到异常对象的引用，如果不明确类型直接用<code>catch</code>：</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  breedMoreLlamas();</span><br><span class=\"line\">&#125; on OutOfLlamasException &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个特定异常</span></span><br><span class=\"line\">  buyMoreLlamas();</span><br><span class=\"line\">&#125; on Exception <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 任何其他类型Exception异常</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">'Unknown exception: <span class=\"subst\">$e<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125; catch (e) &#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  // 不指定类型，处理所有</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  print('</span></span>Something really unknown: <span class=\"subst\">$e<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p><code>catch()</code>可指定两个参数，第一个是抛出的异常对象，第二个是堆栈（<a href=\"https://api.dartlang.org/stable/2.2.0/dart-core/StackTrace-class.html\" target=\"_blank\" rel=\"noopener\">StackTrace</a>）</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ···</span></span><br><span class=\"line\">&#125; on Exception <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">'Exception details:\\n <span class=\"subst\">$e<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125; catch (e, s) &#123;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  print('</span></span>Exception details:\\n <span class=\"subst\">$e<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  print('</span></span>Stack trace:\\n <span class=\"subst\">$s<span class=\"string\">');</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">&#125;</span></span></span></span><br></pre></td></tr></table></div></figure>\n<p>既要处理异常，又要让异常重新跑出去使用<code>rethrow</code>关键字</p>\n<figure class=\"highlight dart\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> misbehave() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">dynamic</span> foo = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(foo++); <span class=\"comment\">// 运行时错误</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'misbehave() partially handled <span class=\"subst\">$&#123;e.runtimeType&#125;</span>.'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">rethrow</span>; <span class=\"comment\">// 让调用者继续得到异常</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"Finally\">Finally<a href=\"post/Note-Learn-Dart#Finally\"></a></h3><p>和java一样</p>\n","prev":{"title":"安装Gitlab小记","link":"post/linux-gitlab"},"next":{"title":"OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VBO）","link":"post/Learn-OpenGL-Lesson-Seven"},"plink":"https://blog.xujiaji.com/post/Note-Learn-Dart/","toc":[{"title":"Dart笔记","id":"Dart笔记","index":"1","children":[{"title":"变量","id":"变量","index":"1.1"},{"title":"默认值","id":"默认值","index":"1.2"},{"title":"fianl 和 const","id":"fianl-和-const","index":"1.3"},{"title":"内置类型","id":"内置类型","index":"1.4","children":[{"title":"数字 Numbers","id":"数字-Numbers","index":"1.4.1"},{"title":"字符串 Strings","id":"字符串-Strings","index":"1.4.2"},{"title":"布尔 Booleans","id":"布尔-Booleans","index":"1.4.3"},{"title":"列表 Lists","id":"列表-Lists","index":"1.4.4"},{"title":"集合 Sets","id":"集合-Sets","index":"1.4.5"},{"title":"映射 Maps","id":"映射-Maps","index":"1.4.6"},{"title":"Runes","id":"Runes","index":"1.4.7"},{"title":"符号 Symbols","id":"符号-Symbols","index":"1.4.8"}]},{"title":"方法 Functions","id":"方法-Functions","index":"1.5","children":[{"title":"可选参数","id":"可选参数","index":"1.5.1"},{"title":"<code>main()</code>方法","id":"main-方法","index":"1.5.2"},{"title":"方法看做类对象","id":"方法看做类对象","index":"1.5.3"},{"title":"匿名方法","id":"匿名方法","index":"1.5.4"},{"title":"作用域语法","id":"作用域语法","index":"1.5.5"},{"title":"闭包语法","id":"闭包语法","index":"1.5.6"},{"title":"测试方法相等性","id":"测试方法相等性","index":"1.5.7"},{"title":"返回值","id":"返回值","index":"1.5.8"}]},{"title":"运算符","id":"运算符","index":"1.6","children":[{"title":"算数运算符","id":"算数运算符","index":"1.6.1"},{"title":"等式和关系运算符","id":"等式和关系运算符","index":"1.6.2"},{"title":"类型检测运算符","id":"类型检测运算符","index":"1.6.3"},{"title":"赋值运算符","id":"赋值运算符","index":"1.6.4"},{"title":"逻辑运算符","id":"逻辑运算符","index":"1.6.5"},{"title":"按位运算和移位运算符","id":"按位运算和移位运算符","index":"1.6.6"},{"title":"条件表达式","id":"条件表达式","index":"1.6.7"},{"title":"级联表示法","id":"级联表示法","index":"1.6.8"},{"title":"其他操作符","id":"其他操作符","index":"1.6.9"}]},{"title":"控制流语句","id":"控制流语句","index":"1.7","children":[{"title":"for循环","id":"for循环","index":"1.7.1"},{"title":"Switch和case","id":"Switch和case","index":"1.7.2"}]},{"title":"断言","id":"断言","index":"1.8"},{"title":"异常","id":"异常","index":"1.9","children":[{"title":"Throw","id":"Throw","index":"1.9.1"},{"title":"Catch","id":"Catch","index":"1.9.2"},{"title":"Finally","id":"Finally","index":"1.9.3"}]}]}],"reward":true,"copyright":{"author":"XuJiaji","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"https://blog.xujiaji.com/post/Note-Learn-Dart/\" title=\"Dart学习笔记\">https://blog.xujiaji.com/post/Note-Learn-Dart/</a>"}}