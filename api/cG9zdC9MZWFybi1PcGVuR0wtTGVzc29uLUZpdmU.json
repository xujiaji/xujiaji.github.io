{"title":"OpenGL Android课程五：介绍混合（Blending）","date":"2019-02-12T08:37:00.000Z","author":"xujiaji","thumbnail":"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190219114206.jpg","link":"post/Learn-OpenGL-Lesson-Five","comments":true,"tags":["Android","OpenGL","学习","翻译"],"categories":["OpenGL"],"updated":"2019-04-08T06:55:57.729Z","content":"<blockquote>\n<p>翻译文</p>\n</blockquote>\n<p>原文标题：Android Lesson Five: An Introduction to Blending<br>原文链接：<a href=\"http://www.learnopengles.com/android-lesson-five-an-introduction-to-blending/\" target=\"_blank\" rel=\"noopener\">http://www.learnopengles.com/android-lesson-five-an-introduction-to-blending/</a><br><a id=\"more\"></a></p>\n<hr>\n<h1 id=\"介绍混合（Blending）\">介绍混合（Blending）<a href=\"post/Learn-OpenGL-Lesson-Five#介绍混合（Blending）\"></a></h1><div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td>这节课，我们来学习混合(blending)在OpenGL中的<br>基本使用。我们来看看如何打开或关闭混合，怎样设置<br>不同的混合模式，以及不同的混合模式如何模仿显示生<br>活中的效果。在后面的课程中，我们还将介绍如何使用<br>alpha通道，如何使用深度缓冲区在同一个场景中渲染<br>半透明和不透明的物体，以及什么时候按深度排序对象，<br>以及为什么。<br><br>我们还将研究如何监听触摸事件，然后基于此更改渲染<br>状态。</td>\n<td style=\"text-align:center\"><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190212163914.png\" alt=\"display\"><br><em>基本混合</em></td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"前提条件\">前提条件<a href=\"post/Learn-OpenGL-Lesson-Five#前提条件\"></a></h2><p>本系列每个课程构建都是以前一个课程为基础。然而，对于这节课，如果您理解了<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">OpenGL Android课程一：入门</a>就足够了。尽管代码基本上是前一课的，照明和纹理部分已在本课中移除，因此我们仅关注混合。</p>\n<h2 id=\"混合（Blending）\">混合（Blending）<a href=\"post/Learn-OpenGL-Lesson-Five#混合（Blending）\"></a></h2><p>混合是将一种颜色与另一种颜色组合以获得第三种颜色的行为。我们在现实世界任何时候都能看到混合：当光穿过玻璃时，当它从表面反射时，当光源本身叠加在背景上时，例如我们在晚上看到一盏明亮的路灯周围的耀斑。</p>\n<p>OpenGL有不同的混合模式，我们能使用它模拟这种效果。在OpenGL中，混合发生在渲染过程的后期：一旦片段着色器计算出片段的最终输出颜色并且它即将被写入帧缓冲区，就会发生这种情况。通常情况下，这片段会覆盖之前所有内容，但如果启用了混合，那么该片段将与之前的片段混合。</p>\n<p>默认情况下，当<code>glBlendEquation()</code>设置为默认值<code>GL_FUNC_ADD</code>时OpenGL的默认混合方程式为：</p>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出 = （源因子 * 源片段） + （目标因子 * 目标片段）</span></span><br><span class=\"line\">output = (source factor * source fragment) + (destination factor * destination fragment)</span><br></pre></td></tr></table></div></figure>\n<p>OpenGL ES 2 中还有另外两种模式<code>GL_FUNC_SUBTRACT</code>和<code>GL_FUNC_REVERSE_SUBTRACT</code>。<br>这些可能在以后的教程中介绍，然而，当我尝试调用此函数时，我在Nexus S上遇到了<br><code>UnsupportedOperationException</code>，因此Android实现可能实际上不支持此功能。<br>这不是世界末日，因为你可以用<code>GL_FUNC_ADD</code>做很多事情。</p>\n<p>使用函数<code>glBlendFunc()</code>设置源因子和目标因子。下面将给出几个常见混合因子的概述；更多信息以及不同可能的因素的列举，请参阅<a href=\"http://www.khronos.org/opengles/sdk/docs/man/\" target=\"_blank\" rel=\"noopener\">Khronos在线手册</a>：</p>\n<ul>\n<li><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glBlendFunc.xml\" target=\"_blank\" rel=\"noopener\">glBlendFunc()</a></li>\n<li><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glBlendEquation.xml\" target=\"_blank\" rel=\"noopener\">glBlendEquation()</a></li>\n</ul>\n<h3 id=\"截取（Clamping）\">截取（Clamping）<a href=\"post/Learn-OpenGL-Lesson-Five#截取（Clamping）\"></a></h3><p>OpenGL预期的输入被限制在[0,1]的范围内，并且输入也被限制在[0,1]。这在实践中意味着当您进行混合时，颜色可以在色调中移动。<br>如果继续想帧缓冲区添加红色（RGB = 1，0，0），最终颜色会是红色。如果想添加一点儿绿色，您要添加（RGB = 1，0.1，0）到缓冲区，即使您开始带红色的色调，最后也会得到黄色！<br>打开混合时，您可以在本课程的Demo中看到此效果：不同颜色的重叠的颜色变得过饱和。</p>\n<h2 id=\"不同类型的混合以及它们有怎样不同的效果\">不同类型的混合以及它们有怎样不同的效果<a href=\"post/Learn-OpenGL-Lesson-Five#不同类型的混合以及它们有怎样不同的效果\"></a></h2><h3 id=\"相加混合（Additive-blending）\">相加混合（Additive blending）<a href=\"post/Learn-OpenGL-Lesson-Five#相加混合（Additive-blending）\"></a></h3><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190213200752.png\" alt=\"rgb\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>RGB颜色相加模型； 来源：Wikipedia</em></td>\n</tr>\n</tbody>\n</table></div></div>\n<p>相加混合是当我们添加不同颜色在一起的混合，这就是我们的视觉与光一起工作的模式，这就是我们如何在我们的显示器上感知数百万种不同的颜色——它们实际上只是将三种不同的原色混合在一起。</p>\n<p>这种混合在3D混合中很有用，例如在粒子效果中，它们似乎发出光线和覆盖物，例如灯光周围的光晕，或光剑周围的发光效果。</p>\n<p>相加混合能通过调用<code>glBlendFunc(GL_ONE, GL_ONE)</code>指定，<br>混合的结果等式<code>输出=（1 * 源片段） + （1 * 目标片段）</code>，运算后：<code>输出=源片段 + 目标片段</code></p>\n<h3 id=\"相乘混合（Multiplicative-blending）\">相乘混合（Multiplicative blending）<a href=\"post/Learn-OpenGL-Lesson-Five#相乘混合（Multiplicative-blending）\"></a></h3><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190213202603.png\" alt=\"rg\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>光照贴图的一个例子</em></td>\n</tr>\n</tbody>\n</table></div></div>\n<p>相乘混合（也称为调制）是另一种有用的混合模式，它表示光在通过过滤器时的行为方式，或从被点燃的物体反射并进入我们的眼睛。一个红色的物体看上去是红色是因为白光照射到这个物体上，蓝光和绿光被吸收，只有红光反射回我们的眼睛。在上面的例子中，我们能看到一些红色和绿色，但是很少会有一点蓝色。</p>\n<p>当多纹理不可用时，乘法混合用于在游戏中实现光照贴图。纹理与光照贴图相乘，以填充在明亮和阴影的区域。</p>\n<p>相乘混合能通过调用<code>glBlendFunc(GL_DST_COLOR, GL_ZERO)</code>指定，<br>其混合的结果等式<code>输出=（目标片段 * 源片段）+ （0 * 目标片段）</code>，写作：<code>输出=目标片段 * 源片段</code>。</p>\n<h3 id=\"插值混合（Interpolative-blending）\">插值混合（Interpolative blending）<a href=\"post/Learn-OpenGL-Lesson-Five#插值混合（Interpolative-blending）\"></a></h3><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190213205158.png\" alt=\"textures\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>一个两个纹理一起插值的案例</em></td>\n</tr>\n</tbody>\n</table></div></div>\n<p>插值混合结合了乘法和加法，以提供插值效果。与添加和调制本身不同，此混合模式也可是依赖绘制顺序的。因此在某些情况下，如果您先画出最远的半透明物体，然后绘制更近的物体，结果才会是正确。即使排序也不是完美，因为三角形可能重叠并相交，但产生的伪像可能是可接受的。</p>\n<p>插值通常是将相邻的表面混合在一起，以及做有色玻璃或淡入淡出的效果。上面这个图片显示了两个纹理（纹理来自<a href=\"http://pdtextures.blogspot.com/\" target=\"_blank\" rel=\"noopener\">公共领域纹理</a>）使用插值混合在一起。</p>\n<p>插值混合能通过调用<code>glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)</code>指定，<br>其混合结果等式<code>输出 = （源alpha * 源片段） + （（1 - 源alpha） * 目标片段）</code>。这是一个例子：</p>\n<p>想象一下，我们正在绘制一个只有25%不透明的绿色（0，1，0），当前屏幕上的物体时红色（1，0，0）。</p>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出 = （源因子 * 源片段） + （目标因子 * 目标片段）</span><br><span class=\"line\">输出 = （源alpha * 源片段） + （（<span class=\"number\">1</span> - 源alpha） * 目标片段）</span><br><span class=\"line\"></span><br><span class=\"line\">输出 = (<span class=\"number\">0.25</span> * (<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)) + (<span class=\"number\">0.72</span> * (<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">输出 = (<span class=\"number\">0</span>, <span class=\"number\">0.25</span>, <span class=\"number\">0</span>) + (<span class=\"number\">0.75</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">输出 = (<span class=\"number\">0.75</span>, <span class=\"number\">0.25</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></div></figure>\n<p>注意，我们不需要对目标alpha做任何涉及，因为这个帧缓冲区本身不需要alpha通道，这为我们提供了更多的颜色通道位。</p>\n<h2 id=\"使用混合\">使用混合<a href=\"post/Learn-OpenGL-Lesson-Five#使用混合\"></a></h2><p>在我们的课程中，我们的Demo将使用相加混合将立方体显示为光的发射器。发光的东西不需要其他光源照亮，因此这个Demo中没有灯光。我也删除了纹理，虽然它可以很好地使用。本课程的着色器程序很简单；我们只需要一个可传递颜色的着色器。</p>\n<h3 id=\"顶点着色器\">顶点着色器<a href=\"post/Learn-OpenGL-Lesson-Five#顶点着色器\"></a></h3><figure class=\"highlight glsl\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uniform</span> <span class=\"type\">mat4</span> u_MVPMatrix;</span><br><span class=\"line\"><span class=\"keyword\">attribute</span> <span class=\"type\">vec4</span> a_Position;</span><br><span class=\"line\"><span class=\"keyword\">attribute</span> <span class=\"type\">vec4</span> a_Color;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">varying</span> <span class=\"type\">vec4</span> v_Color;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    v_Color = a_Color;</span><br><span class=\"line\">    <span class=\"built_in\">gl_Position</span> = u_MVPMatrix * a_Position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"片段着色器\">片段着色器<a href=\"post/Learn-OpenGL-Lesson-Five#片段着色器\"></a></h3><figure class=\"highlight glsl\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">precision</span> <span class=\"keyword\">mediump</span> <span class=\"type\">float</span>;</span><br><span class=\"line\"><span class=\"keyword\">varying</span> <span class=\"type\">vec4</span> v_Color;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">gl_FragColor</span> = v_Color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"打开混合\">打开混合<a href=\"post/Learn-OpenGL-Lesson-Five#打开混合\"></a></h3><p>打开混合就像是做一些方法调用那么简单：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 关闭剔除去掉背面</span></span><br><span class=\"line\">GLES20.glDisable(GLES20.GL_CULL_FACE);</span><br><span class=\"line\"><span class=\"comment\">// 关闭深度测试</span></span><br><span class=\"line\">GLES20.glDisable(GLES20.GL_DEPTH_TEST);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启动混合</span></span><br><span class=\"line\">GLES20.glEnable(GLES20.GL_BLEND);</span><br><span class=\"line\">GLES20.glBlendFunc(GLES20.GL_ONE, GLES20.GL_ONE);</span><br></pre></td></tr></table></div></figure>\n<p>我们关闭背面剔除，是因为如果立方体是半透明的，那么现在我们能看到立方体的背面。我们需要绘制它们，否则可能看起来会很奇怪。出于同样的原因我们关闭了深度测试。</p>\n<h2 id=\"学习触摸事件并进行操作\">学习触摸事件并进行操作<a href=\"post/Learn-OpenGL-Lesson-Five#学习触摸事件并进行操作\"></a></h2><p>你将注意到，当您运行Demo时，可以通过点击屏幕来打开和关闭混合。</p>\n<p>现实触摸事件，您首先需要创建您的<code>GLSurfaceView</code>自定义view。在这个view中，创建一个默认构造用来调用父类，创建一个新的方法来接收特定的渲染器替换常用接口，并覆写<code>onTouchEvent()</code>。我们传入一个具体的渲染器类，因为我们将要在<code>onTouchEvent()</code>方法中调用这个类的特定方法。</p>\n<p>在Android中，OpenGL渲染器在独立的线程中完成，因此我们还将看看如何安全的从正在监听触摸事件的主线程调度到单独的渲染器线程。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LessonFiveGLSurfaceView</span> <span class=\"keyword\">extends</span> <span class=\"title\">GLSurfaceView</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LessonFiveRenderer mRenderer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LessonFiveGLSurfaceView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                event == <span class=\"keyword\">null</span></span><br><span class=\"line\">                || event.getAction() != MotionEvent.ACTION_DOWN</span><br><span class=\"line\">                || mRenderer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 确保我们在OpenGL线程上调用switchMode()</span></span><br><span class=\"line\">        <span class=\"comment\">// queueEvent() 是GLSurfaceView的一个方法，它将为我们做到这点</span></span><br><span class=\"line\">        queueEvent(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                mRenderer.switchMode();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRenderer</span><span class=\"params\">(LessonFiveRenderer renderer)</span> </span>&#123;</span><br><span class=\"line\">        mRenderer = renderer;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.setRenderer(renderer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在<code>LessonFiveRenderer</code>中实现<code>switchMode()</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">switchMode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mBlending = !mBlending;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mBlending) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 关闭剔除去掉背面</span></span><br><span class=\"line\">        GLES20.glDisable(GLES20.GL_CULL_FACE);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭深度测试</span></span><br><span class=\"line\">        GLES20.glDisable(GLES20.GL_DEPTH_TEST);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 启动混合</span></span><br><span class=\"line\">        GLES20.glEnable(GLES20.GL_BLEND);</span><br><span class=\"line\">        GLES20.glBlendFunc(GLES20.GL_ONE, GLES20.GL_ONE);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        GLES20.glEnable(GLES20.GL_CULL_FACE);</span><br><span class=\"line\">        GLES20.glEnable(GLES20.GL_DEPTH_TEST);</span><br><span class=\"line\">        GLES20.glDisable(GLES20.GL_BLEND);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>仔细看<code>LessonFiveGLSurfaceView::onTouchEvent()</code>，主要记住触摸事件都是在UI主线程中<br>，而<code>GLSurfaceView</code>在一个单独的线程中创建OpenGL ES上下文，这意味着我们的渲染器的回调也在一个单独的线程中运行。这是一个需要记住的重点，因为我们不能再其他线程调用OpenGL并希望其工作。</p>\n<p>辛运的是，编写<code>GLSurfaceView</code>的人也想到了这点，并提供了一个<code>queueEvent()</code>方法，这使得你可以调用OpenGL线程上的东西。因此，当我们想通过点击屏幕打开和关闭混合时，我们确保通过在UI线程中使用<code>queueEvent()</code>来正确调用OpenGL线程中的内容。</p>\n<h3 id=\"进一步练习\">进一步练习<a href=\"post/Learn-OpenGL-Lesson-Five#进一步练习\"></a></h3><p>这个Demo目前仅使用相加混合，尝试改变其为插值混合并重新添加灯光和纹理。如果您只在黑色背景上绘制两个半透明纹理，绘制顺序是否重要？什么时候重要？</p>\n<h2 id=\"教程目录\">教程目录<a href=\"post/Learn-OpenGL-Lesson-Five#教程目录\"></a></h2><ul>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">OpenGL Android课程一：入门</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two\">OpenGL Android课程二：环境光和漫射光</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three\">OpenGL Android课程三：使用每片段照明</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four\">OpenGL Android课程四：介绍纹理基础</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five\">OpenGL Android课程五：介绍混合（Blending）</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six\">OpenGL Android课程六：介绍纹理过滤</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven\">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li>\n</ul>\n<h2 id=\"打包教材\">打包教材<a href=\"post/Learn-OpenGL-Lesson-Five#打包教材\"></a></h2><p>可以在Github下载本课程源代码：<a href=\"https://github.com/learnopengles/Learn-OpenGLES-Tutorials\" target=\"_blank\" rel=\"noopener\">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href=\"https://market.android.com/details?id=com.learnopengles.android\" target=\"_blank\" rel=\"noopener\">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href=\"https://github.com/xujiaji/LearnOpenGL/releases\" target=\"_blank\" rel=\"noopener\">github download</a></p>\n","prev":{"title":"OpenGL Android课程六：介绍纹理过滤","link":"post/Learn-OpenGL-Lesson-Six"},"next":{"title":"OpenGL Android课程四：介绍纹理基础","link":"post/Learn-OpenGL-Lesson-Four"},"plink":"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five/","toc":[{"title":"介绍混合（Blending）","id":"介绍混合（Blending）","index":"1","children":[{"title":"前提条件","id":"前提条件","index":"1.1"},{"title":"混合（Blending）","id":"混合（Blending）","index":"1.2","children":[{"title":"截取（Clamping）","id":"截取（Clamping）","index":"1.2.1"}]},{"title":"不同类型的混合以及它们有怎样不同的效果","id":"不同类型的混合以及它们有怎样不同的效果","index":"1.3","children":[{"title":"相加混合（Additive blending）","id":"相加混合（Additive-blending）","index":"1.3.1"},{"title":"相乘混合（Multiplicative blending）","id":"相乘混合（Multiplicative-blending）","index":"1.3.2"},{"title":"插值混合（Interpolative blending）","id":"插值混合（Interpolative-blending）","index":"1.3.3"}]},{"title":"使用混合","id":"使用混合","index":"1.4","children":[{"title":"顶点着色器","id":"顶点着色器","index":"1.4.1"},{"title":"片段着色器","id":"片段着色器","index":"1.4.2"},{"title":"打开混合","id":"打开混合","index":"1.4.3"}]},{"title":"学习触摸事件并进行操作","id":"学习触摸事件并进行操作","index":"1.5","children":[{"title":"进一步练习","id":"进一步练习","index":"1.5.1"}]},{"title":"教程目录","id":"教程目录","index":"1.6"},{"title":"打包教材","id":"打包教材","index":"1.7"}]}],"reward":true,"copyright":{"author":"xujiaji","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five/\" title=\"OpenGL Android课程五：介绍混合（Blending）\">https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five/</a>"}}