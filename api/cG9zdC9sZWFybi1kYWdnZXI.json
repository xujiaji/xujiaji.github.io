{"title":"Dagger2 的深入分析与使用","date":"2018-06-26T16:00:00.000Z","author":"xujiaji","thumbnail":"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/home.jpg","link":"post/learn-dagger","comments":true,"tags":["Android","Dagger","分析框架"],"categories":["Android"],"updated":"2019-04-08T06:55:53.838Z","content":"<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/main-mind.png\" alt=\"脑图\" class=\"article-img\"></p>\n<h1 id=\"Dagger2-的深入分析与使用\">Dagger2 的深入分析与使用<a href=\"post/learn-dagger#Dagger2-的深入分析与使用\"></a></h1><p>听闻Dagger大名很久，但一直没有去学，直到不得不学 〒▽〒。<br>这个框架开始的时不是很好理解，看了一些文章还是没有理解到精髓，似懂非懂，于是自己做了些简单的测试代码观察Dagger注解的作用。将学习和理解的过程分享出来，希望能帮到一些学些Dagger的朋友，同时我也巩固总结一下。</p>\n<p>本篇文章不讲，Dagger哪里好哪里好！只讲怎么用的和一些原理！</p>\n<h2 id=\"Dagger是什么？\">Dagger是什么？<a href=\"post/learn-dagger#Dagger是什么？\"></a></h2><ul>\n<li><p>Dagger是一个依赖注入框架（Dependency injection），简称DI。假如有A和B两个对象（B相当于是DI），A中并没有对自己内部的成员进行初始化，它的成员初始化全部是B类注入进来。</p>\n</li>\n<li><p>大部分注入框架是基于反射实现的，Dagger旨在解决许多困扰基于反射的解决方案的开发和性能问题，Dagger的依赖注入是通过java代码来实现的。相当于你自己可以用java手写依赖注入代码，但这样的话就会更大的工作量，于是Dagger通过注解等帮我们自动生成相关的依赖注入逻辑代码。</p>\n</li>\n<li><p>额…，有点一头雾水的感觉吧！如果大家想知道详细概念的话，可以去搜索一下啦！</p>\n</li>\n<li><p>在下面所讲的都是以实际的代码操作为主，来去观察结果，代码本篇不会涉及Android 页面，只想通过简单的代码来理清楚Dagger生成DI的逻辑。</p>\n</li>\n</ul>\n<h2 id=\"需要添加的依赖\">需要添加的依赖<a href=\"post/learn-dagger#需要添加的依赖\"></a></h2><p>官方Dagger2项目地址：<a href=\"https://github.com/google/dagger\" target=\"_blank\" rel=\"noopener\">https://github.com/google/dagger</a></p>\n<figure class=\"highlight groovy\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">'com.google.dagger:dagger:2.15'</span></span><br><span class=\"line\">    annotationProcessor <span class=\"string\">'com.google.dagger:dagger-compiler:2.15'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"注解使用\">注解使用<a href=\"post/learn-dagger#注解使用\"></a></h2><p>欢迎来到本篇最精彩的地方！参考自<a href=\"https://google.github.io/dagger/users-guide\" target=\"_blank\" rel=\"noopener\">官方的使用指南</a></p>\n<blockquote>\n<p>符号含义参考表：</p>\n</blockquote>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>符号══▶</th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/v-private.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/v-m-private.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/v-protected.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/v-m-protected.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611140949.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141014.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141038.png\" alt=\"\"></th>\n<th><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141100.png\" alt=\"\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>含义</strong>══▶</td>\n<td>private变量</td>\n<td>private方法</td>\n<td>protected变量</td>\n<td>protected方法</td>\n<td>包私有 变量</td>\n<td>包私有方法</td>\n<td>public 变量</td>\n<td>public 方法</td>\n</tr>\n</tbody>\n</table></div></div>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>简单例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141212.png\" alt=\"\"></td>\n<td>继承</td>\n<td><code>class A{}</code><br><br><code>class B extend A{}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141236.png\" alt=\"\"></td>\n<td>实现接口</td>\n<td><code>interface I{}</code><br><br><code>class A implements I{}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141305.png\" alt=\"\"></td>\n<td>依赖</td>\n<td><code>class A{}</code><br><br><code>class B{</code><br>　　<code>void fun(A c) {}</code><br><br><code>}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141339.png\" alt=\"\"></td>\n<td>并联</td>\n<td><code>class A{}</code><br><br><code>class B{</code><br><br>　　<code>A a;</code><br><br><code>}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141403.png\" alt=\"\"></td>\n<td>class</td>\n<td><code>class A{}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141425.png\" alt=\"\"></td>\n<td>abstract</td>\n<td><code>abstract class A{}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141449.png\" alt=\"\"></td>\n<td>interface</td>\n<td><code>interface A{}</code></td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141508.png\" alt=\"\"></td>\n<td>enum</td>\n<td><code>enum A{}</code></td>\n</tr>\n<tr>\n<td><code>...</code></td>\n<td>省略代码</td>\n<td><code>class A {...}</code></td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"咖啡机\">咖啡机<a href=\"post/learn-dagger#咖啡机\"></a></h3><p>用咖啡机的例子来演示，首先我们来看一下主要的几个类，下面是简单咖啡机UML关系图！（查考自Dagger2项目example）</p>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611141527.png\" alt=\"咖啡机UML\" class=\"article-img\"></p>\n<blockquote>\n<p>正常情况下，我们大概会写成这样：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义泵接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pump</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义加热器接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Heater</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 电子加热器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricHeater</span> <span class=\"keyword\">implements</span> <span class=\"title\">Heater</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> heating;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"~~~~heating~~~~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heating = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heating = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heating;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 热虹吸</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thermosiphon</span> <span class=\"keyword\">implements</span> <span class=\"title\">Pump</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Heater heater;</span><br><span class=\"line\">    Thermosiphon(Heater heater) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heater = heater;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heater.isHot()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"=&gt;=&gt; 抽水 =&gt;=&gt;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 咖啡机</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeMaker</span> </span>&#123;</span><br><span class=\"line\">    Heater heater;</span><br><span class=\"line\">    Pump pump;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CoffeeMaker</span><span class=\"params\">(Heater heater, Pump pump)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heater = heater;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pump = pump;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        heater.on();</span><br><span class=\"line\">        pump.pump();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[_]P coffee! [_]P\"</span>);</span><br><span class=\"line\">        heater.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 出咖啡测试</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeApp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Heater heater = <span class=\"keyword\">new</span> ElectricHeater();<span class=\"comment\">//实例化加热器</span></span><br><span class=\"line\">        Pump pump = <span class=\"keyword\">new</span> Thermosiphon(heater);<span class=\"comment\">//实例化泵</span></span><br><span class=\"line\">        CoffeeMaker coffeeMaker = <span class=\"keyword\">new</span> CoffeeMaker(heater, pump);<span class=\"comment\">//实例化咖啡机</span></span><br><span class=\"line\">        coffeeMaker.brew();<span class=\"comment\">//出咖啡</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"Inject\">@Inject<a href=\"post/learn-dagger#Inject\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/tree/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee2_test_inject\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<ol>\n<li><p>其名：注入，@Inject的用法是标记成员变量、构造方法或成员方法。</p>\n</li>\n<li><p>标记了注解<code>@Inject</code>的成员变量或方法，Dagger会自动为其提供实例；标记了<code>@Inject</code>的构造方法表示Dagger将会自动实例化该类提供给其他需要注入的类。</p>\n</li>\n<li><p>像这这样一个需要注入的成员，一个提供该对象就这样对应起来了。但是还差一个将它们联系起来的东西，它叫<code>Componnet</code>。下面的例子将会提前用到<code>@Component</code>注解您可以先不去深入理解，占时理解为Dagger必要写的的且是注入的关系连接纽带。</p>\n</li>\n</ol>\n<blockquote>\n<p>这里在构造方法上加<code>@Inject</code>可以理解为：提供<code>new ElectricHeater()</code></p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 电子加热器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricHeater</span> <span class=\"keyword\">implements</span> <span class=\"title\">Heater</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ElectricHeater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><code>@Component</code>起纽带作用，用接口或抽象类来定义。<code>Thermosiphon getPump()</code>表示其他地方需要提供<code>new Thermosiphon()</code></p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PumpComponent</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Thermosiphon <span class=\"title\">getPump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><code>@Inject</code>标记在成员变量上，表示其他地方需要提供<code>ElectricHeater</code>对象，也就是上上面代码中<code>@Inject</code>标记在构造方法的作用。<code>@Inject</code>标记在构造方法上，可以看做<code>new Thermosiphon()</code>，也就是上面接口中需要的对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 热虹吸</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thermosiphon</span> <span class=\"keyword\">implements</span> <span class=\"title\">Pump</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    ElectricHeater heater;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thermosiphon</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heater.isHot()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"=&gt;=&gt; 抽水 =&gt;=&gt;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>我们直接创建一个CoffeeApp类中进行测试，<code>DaggerPumpComponent</code>是通过apt自动生成的类（需要在Android studio中点击：Build -&gt; Make Module）。</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//运行测试</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeApp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 全写：Thermosiphon pump = DaggerPumpComponent.builder().build().getPump();</span></span><br><span class=\"line\">        Thermosiphon pump = DaggerPumpComponent.create().getPump();</span><br><span class=\"line\">        pump.heater.on();</span><br><span class=\"line\">        pump.pump();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><code>CoffeeApp</code>运行结果</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~~~heating~~~~</span><br><span class=\"line\">=&gt;=&gt; 抽水 =&gt;=&gt;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>测试一下将<code>@Inject</code>标记在方法上，修改<code>Thermosiphon</code>类，如下所示：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 热虹吸</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thermosiphon</span> <span class=\"keyword\">implements</span> <span class=\"title\">Pump</span> </span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">funTest</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"funTest()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">funTest</span><span class=\"params\">(ElectricHeater heater)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"heater: \"</span> + <span class=\"keyword\">this</span>.heater.hashCode());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"funTest(): \"</span> + heater.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><code>CoffeeApp</code>运行结果</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funTest()</span><br><span class=\"line\">heater: <span class=\"number\">692404036</span></span><br><span class=\"line\">funTest(): <span class=\"number\">1554874502</span></span><br><span class=\"line\">~~~~heating~~~~</span><br><span class=\"line\">=&gt;=&gt; 抽水 =&gt;=&gt;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>一些结论</p>\n</blockquote>\n<ol>\n<li>通过<code>DaggerPumpComponent.create().getPump();</code>既可以得到<code>Thermosiphon</code>对象。</li>\n<li>我们看到在<code>Thermosiphon</code>中<code>heater</code>是以<code>ElectricHeater</code>来接收的，并没有向上转型为接口<code>Heater</code>引用，<code>@Inject</code>标记需要是确切的类型。等我们学习了下面<code>@Provides丶@Module</code>部分，我们就能间接的用<code>Heater</code>接口来接收。</li>\n<li>通过上面例子我们明显看到，我们并没有new 对象，然而却有<code>ElectricHeater</code>和<code>Thermosiphon</code>被实例化，这就是Dagger生成java代码中帮我们进行了实例化的操作。</li>\n<li>注意<code>@Inject</code>标记的成员变量、方法和构造方法不能以<code>private</code>修饰。因为如果我们用private，Dagger以java代码注入，自然不能帮我们注入对象，会报错!你可以试试看哦！(￣▽￣)~*</li>\n<li>也许你想问<code>DaggerPumpComponent</code>是哪来的？用<code>@Component</code>标记的接口会生成一个以<code>“Dagger + 接口名”</code>的类。</li>\n<li>经测试，如果将成员变量上的<code>@Inject</code>去掉，不会报错，只是没有引用的对象，变量为null。如果成员变量上标记了<code>@Inject</code>，而没有对应的注入实例，则会编译错误。</li>\n<li>Dagger生成代码的位置：<code>项目目录 -&gt; app -&gt; build -&gt; generated -&gt; source -&gt; apt</code></li>\n<li>如果我们将<code>@Inject</code>标记在方法上，如果有参，Dagger提供该实例，然后自动调用该方法；如果无参则直接调用；如果有参没有对应的实例提供，则报错。</li>\n</ol>\n<blockquote>\n<p><em>接下来将从Dagger生成的注入代码上进行分析（这部分跳过也可以滴！(｀・ω・´)）</em></p>\n<p>这是上面整体的UML关系图，“绿色”的是Dagger自动生成的代码。</p>\n</blockquote>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/inject-uml.png\" alt=\"inject uml\"><br><strong>1.</strong> 通过我们对Dagger的使用，它为我们生成了4个类。<img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/build-class.png\" alt=\"生成的类\"><br><strong>2.</strong> 他们这样对应：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td>PumpComponent</td>\n<td>—–&gt;</td>\n<td>DaggerPumpComponent</td>\n</tr>\n<tr>\n<td>@Inject public ElectricHeater() { }</td>\n<td>—–&gt;</td>\n<td>ElectricHeater_Factory</td>\n</tr>\n<tr>\n<td>@Inject public Thermosiphon() { }</td>\n<td>—–&gt;</td>\n<td>Thermosiphon_Factory</td>\n</tr>\n<tr>\n<td>@Inject ElectricHeater heater;</td>\n<td>—–&gt;</td>\n<td>Thermosiphon_MembersInjector</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>通过观察我们可以得出这些结论：</p>\n<ul>\n<li>①<code>PumpComponent</code>接口生成的类的名字以：<code>Dagger</code> + <code>接口名</code>。<em>（我们需要使用生成的这个类，进行Dagger初始化的操作）</em></li>\n<li>②<code>@Inject</code>标记了构造方法生成类名以：<code>构造名</code> + <code>_Factory</code>，的命名生一个工厂类。<em>（该工厂类将用来创建对应的实例）</em></li>\n<li>③类中有<code>@Inject</code>标记成员变量或方法的类，会生成一个以：<code>该类名</code> + <code>_MembersInjector</code>，的命名生成一个注入类。<em>（该类实现了将实例传递到用<code>@Inject</code>标记的成员变量或方法）</em></li>\n</ul>\n<p><strong>3.</strong> 来看看<code>ElectricHeater</code>的工厂类<code>ElectricHeater_Factory</code>（这是一个工厂设计模式中的一种实现方式），实现一个工厂接口<code>Factory&lt;T&gt;</code>(<code>Factory&lt;T&gt;</code>又继承<code>Provider&lt;T&gt;</code>接口)。通过<code>get()</code>获取一个ElectricHeater实例，通过<code>create()</code>获取<code>ElectricHeater_Factory</code>实例（这个类并未被使用，当你看到下面介绍<code>DaggerPumpComponent</code>就明白了）<img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/ElectricHeater_Factory.png\" alt=\"ElectricHeater_Factory\"><br><strong>4.</strong> 接下来看看<code>Thermosiphon_MembersInjector</code>，这个类实现了为<code>@Inject</code>泛型标记的成员变量或方法传递值的操作。大家看<code>injectHeater</code>方法，这里就是为<code>Thermosiphon</code>的成员变<code>heater</code>添加依赖的地方!<img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/Thermosiphon_MembersInjector.png\" alt=\"Thermosiphon_MembersInjector.java\"><br><strong>5.</strong> 再看看<code>Thermosiphon_Factory</code>，这个类比上一个<code>ElectricHeater_Factory</code>复杂一点。因为它在实例化<code>Thermosiphon</code>时，需要注入<code>ElectricHeater</code>对象。这比<code>ElectricHeater_Factory</code>多了个方法并且实例该工厂类时必须传入<code>ElectricHeater</code>的工厂类实例。</p>\n<ul>\n<li>构造参数是<code>ElectricHeater</code>的工厂，是为了通过工厂类获得<code>ElectricHeater</code>对象；</li>\n<li>工厂方法<code>get()</code>中创建实例的同时，通过<code>Thermosiphon_MembersInjector</code>的静态方法(<code>injectHeater</code>)向<code>Thermosiphon</code>注入<code>ElectricHeater</code>对象，然后得到最终的<code>Thermosiphon</code>实例；</li>\n<li>最后一个静态方法<code>newThermosiphon()</code>返回一个没有注入<code>ElectricHeater</code>实例的<code>Thermosiphon</code>对象。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142100.png\" alt=\"\"></li>\n</ul>\n<p><strong>6.</strong> 最后看<code>DaggerPumpComponent</code>这个类，主要看<code>getPump()</code>、<code>injectThermosiphon</code>和<code>Builder</code>类</p>\n<ul>\n<li><code>getPump()</code>是我们在接口中定义的方法，在这里实现接口方法，通过调用<code>injectThermosiphon</code>方法并传入一个没有注入<code>ElectricHeater</code>实例的<code>Thermosiphon</code>，得到最终的<code>Thermosiphon</code></li>\n<li><code>injectThermosiphon</code>方法中得到上面传进来的<code>Thermosiphon</code>，然后通过<code>Thermosiphon_MembersInjector</code>注入<code>ElectricHeater</code>实例。看到这里我们会发现第“3.”中介绍的<code>ElectricHeater_Factory</code>居然没有用到，这里直接就new了（这也是上面提到的并没有使用<code>ElectricHeater_Factory</code>）。</li>\n<li><code>Builder</code>就是用来创建<code>DaggerPumpComponent</code>的类，学到后面，这个类会根据需求变得复杂！<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142127.png\" alt=\"DaggerPumpComponent.java\"></li>\n</ul>\n<h3 id=\"Provides丶-Module丶-Binds\">@Provides丶@Module丶@Binds<a href=\"post/learn-dagger#Provides丶-Module丶-Binds\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee3_test_provides_module\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<blockquote>\n<p>由于<code>@Inject</code>注解无法做到以下几点：</p>\n</blockquote>\n<ul>\n<li>接口类型无法做为接收类型</li>\n<li>第三方类无法添加<code>@Inject</code>注解（因为这个类不是自己掌控的）</li>\n</ul>\n<p>这种情况下我们可以用<code>@Provides</code>注释去满足依赖，方法的返回类型确定了它提供给谁的依赖。</p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<ol>\n<li>创建一个类作用是存放提供实例的方法，约定该类以<code>Module</code>结尾（便于统一分辨，就像我们安卓Activity命名以Activity结尾）</li>\n<li>在类名上标记<code>@Module</code>注解</li>\n<li>使用静态或普通有返回的方法来提供实例<ul>\n<li>在这些方法前需要标记<code>@Provides</code>注解</li>\n<li>这些方法以<code>provide</code>开头，也是一种约定</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>看下方这个<code>DripCoffeeModule</code>类，它提供了两个实例，并且它们的返回类型指向的是接口。也就是说有某个地方可能需要<code>Heater</code>和<code>Pump</code>的实例。</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Heater <span class=\"title\">provideHeater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"provideHeater\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ElectricHeater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Pump <span class=\"title\">providePump</span><span class=\"params\">(Thermosiphon pump)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"providePump\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pump;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>在<code>@Component</code>注解中添加<code>DripCoffeeModule.class</code>，如果有多个可写为：<code>@Component(modules = {DripCoffeeModule.class, ....class,....class})</code></p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(modules = DripCoffeeModule.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoffeeShop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Pump <span class=\"title\">getPump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>其他类</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 电子加热器</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricHeater</span> <span class=\"keyword\">implements</span> <span class=\"title\">Heater</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ElectricHeater</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"ElectricHeater()\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 热虹吸</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thermosiphon</span> <span class=\"keyword\">implements</span> <span class=\"title\">Pump</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Heater heater;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Thermosiphon</span><span class=\"params\">(Heater heater)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Thermosiphon() heater = \"</span> + heater);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heater = heater;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>测试类：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeApp</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Pump pump = DaggerCoffeeShop.create().getPump();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"pump = \"</span> + pump);</span><br><span class=\"line\">        pump.pump();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>CoffeeApp的输出结果：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">provideHeater</span><br><span class=\"line\">ElectricHeater()</span><br><span class=\"line\">Thermosiphon() heater = com.example.jiaji.daggertest.coffee3.ElectricHeater@<span class=\"number\">29453f</span>44</span><br><span class=\"line\">providePump</span><br><span class=\"line\">pump = com.example.jiaji.daggertest.coffee3.Thermosiphon@<span class=\"number\">5</span>cad8086</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>首先，我们调用<code>DaggerCoffeeShop.create().getPump()</code>想要得到一个Pump对象，于是<code>DripCoffeeModule</code>中的<code>providePump</code>方法为我们提供一个Pump实例。</li>\n<li>然后，我们看到<code>providePump</code>方法有参数<code>Thermosiphon</code>那么这个这个实例从哪来呢？我们在<code>Thermosiphon</code>的构造方法上标记<code>@Inject</code>就表示提供该对象了。</li>\n<li>接下来，我们深入到<code>Thermosiphon</code>类又会发现，<code>Thermosiphon</code>类的构造方法要求提供<code>Heater</code>对象，那么问题来了Heater实例从哪来？您能想到！我们可以看到在<code>DripCoffeeModule</code>的<code>provideHeater</code>方法提供了该实例。</li>\n<li>最后，我们可以得出来个容易理解的大概流程：<img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143230.png\" alt=\"\"></li>\n</ul>\n<p><strong>我们需要注意，当<code>@Inject</code>提供了实例并且<code>Module</code>中也提供该实例的情况下，Dagger会优先<code>Module</code>中提供的实例。</strong></p>\n<p><em>通过上面的例子，我们可以注意到：<code>@Inject</code>可以为<code>Module</code>方法的参数提供实例</em></p>\n<blockquote>\n<p>我们可以将Module中的方法分到多个Module中，只需要在<code>@Component</code>注释中添加一下，如下所示：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Heater <span class=\"title\">provideHeater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"provideHeater\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ElectricHeater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Pump <span class=\"title\">providePump</span><span class=\"params\">(Thermosiphon pump)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"providePump\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pump;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;DripCoffeeModule.class, DripCoffeeModule2.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoffeeShop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Pump <span class=\"title\">getPump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>其实还有种写法，意思是表示某一个Module包含另一个Module。最终效果一样的。如下所示：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule2</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Pump <span class=\"title\">providePump</span><span class=\"params\">(Thermosiphon pump)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"providePump\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pump;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Module</span>(includes = DripCoffeeModule2.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Heater <span class=\"title\">provideHeater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"provideHeater\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ElectricHeater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(modules = DripCoffeeModule.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoffeeShop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Pump <span class=\"title\">getPump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>@Binds可以简化<code>DripCoffeeModule</code>中提供<code>Pump</code>实例的写法，效果是一样的。</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Binds</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Pump <span class=\"title\">bindPump</span><span class=\"params\">(Thermosiphon pump)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;DripCoffeeModule.class, BModule.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoffeeShop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><em>接下来是对Dagger生成的代码进行分析（这部分可以选择性跳过！(｀・ω・´)）</em></p>\n<p>这是整体的UML关系图，“绿色”是自动生成的代码。(由于生成的<code>Thermosiphon_Factory</code>并没有被使用，于是就不放进来了。)</p>\n</blockquote>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142208.png\" alt=\"\"><br><strong>1.</strong> 通过上面的三部分代码，Dagger也为我们生成了4个类。<img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142229.png\" alt=\"dagger生成的四个类\"><br><strong>2.</strong> 他们这样对应：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td>CoffeeShop</td>\n<td>—–&gt;</td>\n<td>DaggerCoffeeShop</td>\n</tr>\n<tr>\n<td>@Provides static Heater provideHeater()</td>\n<td>—–&gt;</td>\n<td>DripCoffeeModule_ProvideHeaterFactory</td>\n</tr>\n<tr>\n<td>@Provides static Pump providePump(Thermosiphon pump)</td>\n<td>—–&gt;</td>\n<td>DripCoffeeModule_ProvidePumpFactory</td>\n</tr>\n<tr>\n<td>@Inject public Thermosiphon() { }</td>\n<td>—–&gt;</td>\n<td>Thermosiphon_Factory</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>从名字上我们可以看出：<code>@Provides</code>标记的提供实例的方法对应生成了一个类名以：<code>所在类名</code> + <code>_</code> + <code>方法名(首字大写)</code> + <code>Factory</code>，命名生成一个对应的工厂类。</p>\n<p><strong>3.</strong> 我们先来看看<code>Thermosiphon_Factory</code>这个没有被使用的类，如果您是从上面挨着看下来的，就一定明白，其他地方是直接<code>new Thermosiphon</code>，接着往下看您就会看到！</p>\n<ul>\n<li>这个类和上面生成的<code>Thermosiphon_Factory</code>有些不一样，因为之前<code>Thermosiphon</code>是无参构造，现在添加了<code>Heater</code>作为构造的参数（该实例在DripCoffeeModule提供）。</li>\n<li>可以看到要实例化这个工厂类，必须要传入<code>Heater</code>的工厂类。然后在创建<code>Thermosiphon</code>实例时通过<code>Heater</code>工厂类创建一个<code>Heater</code>对象传入构造方法中。</li>\n<li>并且它还添加了<code>一个newThermosiphon</code>的静态方法，允许传入<code>heater</code>对象来创建<code>Thermosiphon</code>。</li>\n</ul>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142247.png\" alt=\"Thermosiphon_Factory\"><br><strong>4.</strong> 我们在来看<code>Heater</code>工厂类<code>DripCoffeeModule_ProvideHeaterFactory</code>，它相对比较简单点。</p>\n<ul>\n<li>可以看到在创建<code>Heater</code>实例时，直接通过<code>DripCoffeeModule.provideHeater()</code>调用我们定义的相对应的静态方法。</li>\n<li>通过<code>Preconditions.checkNotNull</code>又检测了是否提供得有实例，没有将会报第二参数传入的错误信息。</li>\n<li>工厂实例化是通过静态方法<code>create()</code>实例；静态方法<code>newThermosiphon</code>，可不创建工厂类的情况下，直接创建<code>Heater</code>实例。</li>\n</ul>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142310.png\" alt=\"DripCoffeeModule_ProvideHeaterFactory\" class=\"article-img\"></p>\n<ul>\n<li><p><code>DripCoffeeModule</code>中提供实例的方法不仅可以是静态方法！还可以是普通方法或抽象方法。那如果我们将<code>DripCoffeeModule</code>中的静态方法的static去掉改为普通方法生成的代码又是怎么样的呢？(<code>@Provides static Heater provideHeater()</code>改为<code>@Provides Heater provideHeater()</code>)看下图：</p>\n<ul>\n<li>可以看到<code>DripCoffeeModule_ProvideHeaterFactory</code>的创建须传入<code>DripCoffeeModule</code>实例，<code>get()</code>方法通过该实例获取<code>Heater</code>实例</li>\n<li><p>创建<code>Heater</code>的静态方法<code>proxyProvideHeater</code>须传入<code>DripCoffeeModule</code>实例。</p>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142330.png\" alt=\"DripCoffeeModule_ProvideHeaterFactory\" class=\"article-img\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>5.</strong> 我们来看看<code>Pump</code>对应生成的工厂类：<code>DripCoffeeModule_ProvidePumpFactory</code></p>\n<ul>\n<li>在Module中这样定义：<code>@Provides static Pump providePump(Thermosiphon pump) { return pump; }</code></li>\n<li>这个方法又必须提供<code>Thermosiphon</code>实例，因此<code>DripCoffeeModule_ProvidePumpFactory</code>的构造参数是<code>Thermosiphon</code>的工厂对象来提供该实例（<code>get()</code>方法中通过调用静态方法<code>providePump</code>得到Pump实例的时候需要该工厂类提供）</li>\n<li><p>我们看到<code>proxyProvidePump</code>方法，也是可在不创建工厂类实例的情况下调用。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142349.png\" alt=\"\"></p>\n</li>\n<li><p>如果我们也把Module中的static修饰去掉又会发生什么样的变化呢？我猜您也应该能想到了！看下图：</p>\n<ul>\n<li>比4中去掉static多了划线的地方</li>\n<li>也就是说当我们定义的方法是普通方法时，我们就必须要提供<code>Module</code>的实例<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142412.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p><strong>6.</strong> 最后，我们来看<code>DaggerCoffeeShop</code>是如何将这些东东组合在一起的。</p>\n<ul>\n<li>我们看到<code>getPump()</code>方法，它在接口<code>CoffeeShop</code>中定义，里面如何实现的呢？</li>\n<li>它直接调用了上面<code>5</code>所讲到的静态方法<code>proxyProvidePump</code>来创建<code>Pump</code>实例，但是需要提供<code>Thermosiphon</code>实例作为参数。（如果是用的@Binds方式，则getPump()的实现为：  <code>public Pump getPump() { return getThermosiphon(); }</code>）</li>\n<li><p>于是，它定义了方法<code>getThermosiphon()</code>来创建该实例。看到该方法了吗？里面是直接<code>new Thermosiphon</code>，这就是<code>Thermosiphon_Factory</code>没有用到的原因。创建<code>Thermosiphon</code>的构造参数<code>Heater</code>由<code>DripCoffeeModule_ProvideHeaterFactory</code>类名直接调用静态方法<code>proxyProvideHeater()</code>它又调用<code>DripCoffeeModule.provideHeater()</code>来提供。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142434.png\" alt=\"\"></p>\n</li>\n<li><p>接下来看到创建<code>DaggerCoffeeShop</code>的<code>Builder</code>静态内部类，这里面可要比我们上次生成的<code>DaggerPumpComponent</code>要多了一个方法，它出现的原因就是因为我们定义了Module类。</p>\n<ul>\n<li>这个方法的命名方式是将我们定义的Module类的类名开头小写来作为名字。</li>\n<li>它的作用是我们可以自己创建Module，如果不自己创建，将会自动创建。</li>\n<li>但为什么这里标记为弃用呢？那是因为我们Module中全是静态方法，完全不需要实例化，实例化也白搭！那我们来看看，如果将<code>DripCoffeeModule</code>中的方法改为普通方法是什么样的呢？<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142457.png\" alt=\"\"></li>\n<li>看到了吧！如果build()方法中判断了我们已经调用<code>dripCoffeeModule</code>方法传进来Module实例，那么就不去实例化了。</li>\n<li>还记得上面Module中我们去掉提供方法static后需要的Module实例吗？实例就是开始于这里的。</li>\n<li><code>dripCoffeeModule</code>的调用方式就是：<code>DaggerCoffeeShop.builder().dripCoffeeModule(new DripCoffeeModule()).build();</code>（如果我们的<code>@Component</code>连接了多个<code>Module</code>那么就可以这样传入这么多个<code>Module</code>实例）</li>\n<li><p>那么这个方法到底有什么神奇的作用呢？我们想想看，如果<code>Module</code>的构造方法需要传参，此时我们该怎么办呢？如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestModuleAttr</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestModuleAttr</span><span class=\"params\">(String str)</span> </span>&#123; <span class=\"keyword\">this</span>.str = str; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"string\">\"TestModuleAttr&#123;\"</span> + <span class=\"string\">\"str='\"</span> + str + <span class=\"string\">'\\''</span> +<span class=\"string\">'&#125;'</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DripCoffeeModule</span><span class=\"params\">(String str)</span> </span>&#123; <span class=\"keyword\">this</span>.str = str; &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span> <span class=\"function\">String <span class=\"title\">provideStr</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> str; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span> <span class=\"function\">TestModuleAttr <span class=\"title\">provideTestModuleAttr</span><span class=\"params\">(String s)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TestModuleAttr(s); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoffeeShop</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Pump <span class=\"title\">getPump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">TestModuleAttr <span class=\"title\">getTestModuleAttr</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeApp</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                DaggerCoffeeShop</span><br><span class=\"line\">                        .builder()</span><br><span class=\"line\">                        .dripCoffeeModule(<span class=\"keyword\">new</span> DripCoffeeModule(<span class=\"string\">\"Hello world\"</span>))</span><br><span class=\"line\">                        .build()</span><br><span class=\"line\">                        .getTestModuleAttr());</span><br><span class=\"line\"><span class=\"comment\">//        Pump pump = DaggerCoffeeShop.create().getPump();</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(\"pump = \" + pump);</span></span><br><span class=\"line\"><span class=\"comment\">//        pump.pump();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>输入结果：<code>TestModuleAttr{str=&#39;Hello world&#39;}</code></p>\n</li>\n<li>当我们想向提供的对象传递一些动态的东西时，就可以通过这种方式，当然你也不用向我这样绕了个圈子，这里只想说<code>Module</code>里面可以相互提供实例。这里可以直接<code>@Provides TestModuleAttr provideTestModuleAttr() { return new TestModuleAttr(str); }</code>搞定。</li>\n<li>需要注意的是，如果<code>Module</code>实例是有参构造创建，我们必须自己实例化<code>Module</code>。否则则会抛出异常。原因，如下：<img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142517.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Component\">@Component<a href=\"post/learn-dagger#Component\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee4_test_component\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>上面都涉及到了它，想必大家也有些熟悉了。ヾ(๑╹◡╹)ﾉ”</p>\n<p>官方把这个定义叫做建立图表，它起到的作用是连接依赖关系，通过上面的分析，我们可以直观的看到在<code>DaggerXXX</code>(<code>@Component</code>修饰的类所对应生成的文件)类中，主要就是将各个工厂类和Module连接起来。</p>\n<blockquote>\n<p>如果我们像下面这样定义一个Component，Dagger将会为我们生成一个类：<code>DaggerFoo_Bar_BazComponent</code></p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Component</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BazComponent</span> </span>&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><code>@Component</code>不仅可以装饰接口还可以是抽象类，比如上面的<code>CoffeeShop</code>接口可以改成这样：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeShop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Pump <span class=\"title\">getPump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> TestModuleAttr <span class=\"title\">getTestModuleAttr</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>在Component中定义的方法我们在对应生成的DaggerXXX实例调用得到对应实例，于是我们需要为其提供对应返回实例。</p>\n<blockquote>\n<p>接下来我们来通过模拟安卓中Activity的启动，该代码大概模拟了一下MVP。为了简单，MNActivity作为View层，我没有写MVP接口的M层。这里主要是想解释为什么在Compnent接口中需要定义一个<code>void inject(XXXActivity activity);</code>，看到别人这么写的！但我当时真心不知道这是啥意思！于是这里我想通过简单的代码去理解它。</p>\n</blockquote>\n<ol>\n<li><p>模拟一个Activity，一般我们在Activity的<code>onCreate()</code>方法中是这样写的。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MNActivity</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    MNPresenter presenter;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MNActivity hashCode = \"</span> + hashCode());</span><br><span class=\"line\">        DaggerTestComponent</span><br><span class=\"line\">                .builder()</span><br><span class=\"line\">                .mNModule(<span class=\"keyword\">new</span> MNModule(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">                .inject(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        System.out.println(presenter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>Presenter层，在presenter中一般我们是引用的view的接口，这里我们直接引用activity。</p>\n<ul>\n<li><code>@Inject</code>标记构造，表明这里提供MNPresenter实例</li>\n<li>我们看到有构造方法参数为<code>MNActivity</code>，表明需要实例化我们又需要为它提供<code>MNActivity</code>（我们通过Module提供）<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MNPresenter</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    MNActivity mnActivity;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    MNPresenter(MNActivity mnActivity)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mnActivity = mnActivity;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MNPresenter mnActivity = \"</span> + mnActivity.hashCode());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>实例提供部分类：Module</p>\n<ul>\n<li><code>MNModule</code>是有参构造，通过上面的学习，我们知道这种情况必须我们自己实例化Module</li>\n<li>通过<code>provedesActivity</code>我们可以将传递进来的<code>MNActivity</code>实例，提供出去（这里提供给<code>MNPresenter</code>）<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MNModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    MNActivity mnActivity;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MNModule</span><span class=\"params\">(MNActivity mnActivity)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mnActivity = mnActivity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\">MNActivity <span class=\"title\">provedesActivity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mnActivity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>组装纽带部分：Component</p>\n<ul>\n<li>inject方法返回值为void<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(modules = MNModule.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestComponent</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MNActivity me)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>启动Activity类</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        MNActivity injectMe = <span class=\"keyword\">new</span> MNActivity();</span><br><span class=\"line\">        injectMe.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>运行Main的结果</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MNActivity hashCode = <span class=\"number\">21685669</span></span><br><span class=\"line\">MNPresenter mnActivity = <span class=\"number\">21685669</span></span><br><span class=\"line\">com.example.jiaji.daggertest.coffee4.MNPresenter@<span class=\"number\">61</span>bbe9ba</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<blockquote>\n<p>为什么这么神奇呢？居然就这样就将<code>MNPresenter</code>的实例注入到<code>MNActivity</code>了！<code>DaggerTestComponent</code>实现我们定义的<code>void inject(MNActivity me);</code>，然后在方法里进行了如这样的操作（简化后）：<code>me.presenter = new Presenter(...);</code></p>\n</blockquote>\n<blockquote>\n<p>我们将<code>void inject(MNActivity me);</code>的实现代码和上面测试<code>@Inject</code>时定义的<code>Thermosiphon getPump();</code>的实现代码进行比较，来看看有何区别。</p>\n</blockquote>\n<ul>\n<li>我们先来看<code>Thermosiphon getPump();</code>是如何实现的呢？重温一下，看下图：<ul>\n<li>它首先通过<code>Thermosiphon_Factory.newThermosiphon()</code>直接<code>new Thermosiphon()</code>。</li>\n<li>然后调用<code>injectThermosiphon</code>方法将实例化的<code>Thermosiphon</code>通过<code>Thermosiphon_MembersInjector.injectHeater</code>将一个<code>ElectricHeater</code>赋值到对应的成员变量。</li>\n<li>最后将一个完成的<code>Thermosiphon</code>返回。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142542.png\" alt=\"getPump() 实现\"></li>\n</ul>\n</li>\n<li>我们再来看<code>void inject(MNActivity me);</code>是如何实现的呢？看下图：<ul>\n<li>这里<code>inject(MNActivity me)</code>的实现省略掉了创建<code>MNActivity</code>的过程，直接调用<code>injectMNActivity</code>进行注入。</li>\n<li>为什么呢？因为当前<code>MNActivity</code>对象已经存在，只需要注入标有<code>@Inject</code>的成员变量就行了。</li>\n<li>我们想想Android中打开一个Activity，他是通过系统去实例化的！我们既然在Activity实例之中，又何必去实例化它呢？对吧！<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142555.png\" alt=\"inject方法的实现\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"将上面所学运用到一开始的咖啡机实现\">将上面所学运用到一开始的咖啡机实现<a href=\"post/learn-dagger#将上面所学运用到一开始的咖啡机实现\"></a></h3><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Heater</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pump</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pump</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thermosiphon</span> <span class=\"keyword\">implements</span> <span class=\"title\">Pump</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Heater heater;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Thermosiphon(Heater heater) &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Thermosiphon(Heater heater) - heaterHash = \"</span> + heater.hashCode());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heater = heater;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pump</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (heater.isHot()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"=&gt;=&gt; 抽水 =&gt;=&gt;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ElectricHeater</span> <span class=\"keyword\">implements</span> <span class=\"title\">Heater</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ElectricHeater</span><span class=\"params\">()</span> </span>&#123; System.out.println(<span class=\"string\">\"ElectricHeater()\"</span>); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> heating;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">on</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"~~~~heating~~~~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.heating = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">off</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">this</span>.heating = <span class=\"keyword\">false</span>; &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHot</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> heating; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\">Heater <span class=\"title\">provideheater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"provideheater()\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ElectricHeater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\">Pump <span class=\"title\">providePump</span><span class=\"params\">(Thermosiphon pump)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"providePump\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pump;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 咖啡机</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeMaker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Heater heater;<span class=\"comment\">//当我们要使用它时才创建一个加热器</span></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Pump pump;<span class=\"comment\">//泵</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    CoffeeMaker() &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">brew</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"CoffeeMaker - heaterHash = \"</span> + heater.hashCode());</span><br><span class=\"line\">        heater.on();</span><br><span class=\"line\">        pump.pump();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"[_]P coffee! [_]P\"</span>);</span><br><span class=\"line\">        heater.off();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoffeeShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">CoffeeMaker <span class=\"title\">maker</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeApp</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        CoffeeShop coffeeShop = DaggerCoffeeShop.builder()</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        coffeeShop.maker().brew();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>我们来看一下输出结果</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">provideheater()</span><br><span class=\"line\">ElectricHeater()</span><br><span class=\"line\">provideheater()</span><br><span class=\"line\">ElectricHeater()</span><br><span class=\"line\">Thermosiphon(Heater heater) - heaterHash = <span class=\"number\">1625635731</span></span><br><span class=\"line\">providePump</span><br><span class=\"line\">CoffeeMaker - heaterHash = <span class=\"number\">1580066828</span></span><br><span class=\"line\">~~~~heating~~~~</span><br><span class=\"line\">[_]P coffee! [_]P</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>大家有木有发现，当调用<code>heater.on()</code>后调用<code>pump.pump()</code>居然没有出水(没有打印：<code>=&gt;=&gt; 抽水 =&gt;=&gt;</code>)</li>\n<li>通过输出结果我们看到<code>provideheater</code>被调用两次也就是两次new，我们还会会发现：<code>Thermosiphon</code>中的<code>Heater</code>对象和<code>CoffeeMaker</code>中的<code>Heater</code>对象打印的<code>hashCode</code>不一样，这根本就是两个实例。怪不得<code>CoffeeMaker</code>中<code>heater.on()</code>后<code>pump.pump()</code>不出水，原因就是<code>Pump</code>中又是另一个<code>Heater</code>实例。</li>\n</ul>\n<blockquote>\n<p>看来通过上面的学习，我们的咖啡机还有点缺陷。我们需要通过下面所讲的<code>@Singleton</code>来拯救一下这个多次实例化的问题。</p>\n</blockquote>\n<blockquote>\n<p>最后我将上面这些大致理解思路画了如下流程图，希望能帮助您理解：</p>\n</blockquote>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142614.png\" alt=\"dagger-liu-cheng\" class=\"article-img\"></p>\n<h3 id=\"Singleton丶-Scope\">@Singleton丶@Scope<a href=\"post/learn-dagger#Singleton丶-Scope\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee5_test_scope\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<blockquote>\n<p>Singleton：直接翻译过来是独生子的意思。我们可以这样去理解，标记了<code>@Singleton</code>提供的类，在同一个Component实例中(这是条件)只存在一个该实例，多次需要时，提供的实例也只是第一次创建的那个实例。</p>\n</blockquote>\n<ul>\n<li>我们只需要将上面咖啡机的实现代码加两个<code>@Singleton</code>就可以解决问题！如下代码：<ul>\n<li>在提供实例那里加个<code>@Singleton</code></li>\n<li>在<code>Component</code>那里加个<code>@Singleton</code></li>\n<li>也就是说<code>@Singleton</code>起效，得添加两处</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Singleton</span><br><span class=\"line\">@Component(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class=\"line\">public interface CoffeeShop &#123;</span><br><span class=\"line\">    CoffeeMaker maker();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">@Module</span><br><span class=\"line\">public class DripCoffeeModule &#123;</span><br><span class=\"line\">    @Singleton</span><br><span class=\"line\">    @Provides</span><br><span class=\"line\">    Heater provideheater() &#123;</span><br><span class=\"line\">        System.out.println(&quot;provideheater()&quot;);</span><br><span class=\"line\">        return new ElectricHeater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">输出日志：</span><br><span class=\"line\">provideheater()</span><br><span class=\"line\">ElectricHeater()</span><br><span class=\"line\">Thermosiphon(Heater heater) - heaterHash = 1872034366</span><br><span class=\"line\">providePump</span><br><span class=\"line\">CoffeeMaker - heaterHash = 1872034366</span><br><span class=\"line\">~~~~heating~~~~</span><br><span class=\"line\">=&gt;=&gt; 抽水 =&gt;=&gt;</span><br><span class=\"line\">[_]P coffee! [_]P</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>那么如果是<code>@Inject</code>标记的构造方法的方式来提供的对象，<code>@Singleton</code>该如何标记呢？如下代码：</p>\n</blockquote>\n<ul>\n<li>放到类名之上<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Singleton</span><br><span class=\"line\">public class SingletonTest&#123;</span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    public SingletonTest()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">public class CoffeeMaker &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    SingletonTest singletonTest1;</span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    SingletonTest singletonTest2;</span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    SingletonTest singletonTest3;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    public void brew() &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                &quot;singletonTest1 = &quot; + singletonTest1.hashCode() + &quot;\\n&quot;</span><br><span class=\"line\">                + &quot;singletonTest2 = &quot; + singletonTest2.hashCode() + &quot;\\n&quot;</span><br><span class=\"line\">                + &quot;singletonTest3 = &quot; + singletonTest3.hashCode() + &quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">--------------------------------------------------------</span><br><span class=\"line\">输出日志：</span><br><span class=\"line\">...</span><br><span class=\"line\">singletonTest1 = 1581781576</span><br><span class=\"line\">singletonTest2 = 1581781576</span><br><span class=\"line\">singletonTest3 = 1581781576</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n<blockquote>\n<p>为什么说上面条件是需要在一个Component实例中？原因是如果Component被多次实例化，那么不同的Component中@Singleton标记的实例也将不同！</p>\n</blockquote>\n<ul>\n<li>来看看下面我们如果有多个Component实例的情况</li>\n<li><p>我们修改一下<code>CoffeeApp</code>这个类，让他重复调用<code>brew()</code>方法和重新创建Component</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeApp</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        CoffeeShop coffeeShop = DaggerCoffeeShop.builder()</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        coffeeShop.maker().brew();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"*************************************\"</span>);</span><br><span class=\"line\">        coffeeShop.maker().brew();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"*************************************\"</span>);</span><br><span class=\"line\">        DaggerCoffeeShop.builder()</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">                .maker()</span><br><span class=\"line\">                .brew();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>输出结果(我们只看一些关键部分)：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">CoffeeMaker - heaterHash = 1872034366</span><br><span class=\"line\">...</span><br><span class=\"line\">singletonTest1 = 1581781576</span><br><span class=\"line\">...</span><br><span class=\"line\">*************************************</span><br><span class=\"line\">...</span><br><span class=\"line\">CoffeeMaker - heaterHash = 1872034366</span><br><span class=\"line\">...</span><br><span class=\"line\">singletonTest1 = 1581781576</span><br><span class=\"line\">...</span><br><span class=\"line\">*************************************</span><br><span class=\"line\">...</span><br><span class=\"line\">CoffeeMaker - heaterHash = 1725154839</span><br><span class=\"line\">...</span><br><span class=\"line\">singletonTest1 = 1670675563</span><br><span class=\"line\">...</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>从输出信息中我们可看出，第一次和第二次都是同一个heater实例，第三次却是不同的实例，因为我们重新实例化了一个Component。</p>\n</li>\n<li><p>如果我们想在多个地方调用的时候也得到同一个Component实例，我们可以将Component作为抽象类，并改为单例。如下：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CoffeeShop instance;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> CoffeeMaker <span class=\"title\">maker</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CoffeeShop <span class=\"title\">getInstance</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (CoffeeShop.class)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                instance = DaggerCoffeeShop.create();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们的使用的时候，直接这样：<code>CoffeeShop.getInstance().maker().brew()</code></p>\n</li>\n<li>我们在Android中，可以把这种全局的定义放到<code>Application</code>中也可以确保在该进程中的唯一。</li>\n</ul>\n<blockquote>\n<p>上面讲了<code>@Singleton</code>，那么<code>@Scope</code>又是什么呢？<code>@Scope</code>是用来标识注解的。我们看一下，<code>@Singleton</code>的源码你就明白了！</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Singleton &#123;&#125;</span><br></pre></td></tr></table></div></figure>\n<ul>\n<li>用<code>@Scope</code>标识的注解都有<code>@Singleton</code>的功能，于是我们可以定义我们自己想要的名字来实现相同功能。</li>\n<li>但需要注意一点就是用的时候相对应的注解必须是同一个（比方说我定义了一个<code>@MySingle</code>，就不能在Component那里用<code>@MySingle</code>的同时，对应的提供对象那里却用的是<code>@Singleton</code>）</li>\n</ul>\n<blockquote>\n<p>又到了我们分析生成代码的环节，大家可以选择性跳过哦！(〃’▽’〃)</p>\n</blockquote>\n<ol>\n<li>我们直接来看<code>DaggerCoffeeShop</code>这个类，其他都和上面讲解的一样，变化就在该类！<ul>\n<li>我们看到下图画红线的部分！他将<code>@Singleton</code>标记的对象直接放到了<code>DaggerCoffeeShop</code>作为成员变量（由于代码太多，我将<code>CoffeeMaker</code>中的<code>SingletonTest</code>都注释了）。</li>\n<li>等等！<code>Provider&lt;Heater&gt;</code>根据上面我们对工厂代码的研究！每次调用<code>get()</code>不都会重新实例化一个对象吗？为什么每次<code>get()</code>都是同一个实例？这就是第二根红线<code>DoubleCheck</code>的封装起的作用了！<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142629.png\" alt=\"DaggerCoffeeShop\"></li>\n</ul>\n</li>\n<li><p><code>DoubleCheck.provider</code>搞了什么名堂？大家跟着我点进去悄悄！</p>\n<ul>\n<li><p>我们看到这个静态方法！很明显，它是为了创建一个<code>DoubleCheck</code>对象，如果传进来的就是<code>DoubleCheck</code>对象，则直接返回实例。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;P extends Provider&lt;T&gt;, T&gt; <span class=\"function\">Provider&lt;T&gt; <span class=\"title\">provider</span><span class=\"params\">(P delegate)</span> </span>&#123;</span><br><span class=\"line\">    checkNotNull(delegate);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (delegate <span class=\"keyword\">instanceof</span> DoubleCheck) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> delegate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DoubleCheck&lt;T&gt;(delegate);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们看到<code>DoubleCheck</code>类也是实现了<code>Provider</code>接口的，所以在<code>DaggerCoffeeShop</code>中才能直接用<code>Provider</code>来引用。它既然也是一个<code>Provider</code>却又要传入一个<code>Provider</code>，它起了一个代理的作用。</p>\n</li>\n<li>为什么<code>get()</code>调用后是同一个实例？原因是<code>get()</code>中进行了处理，如果<code>get()</code>过一次实例，那么下次将返回上一次的实例。下面是这部分源码：<ul>\n<li>我们可以看到它不仅仅简单写了只返回一个实例的的代码，还写了一堆关于多线程同步相关代码。</li>\n<li>也就是说我们在多线程的情况下也可以放心的调用<code>get()</code>方法，而不用担心因为多线程而创建额外的实例。<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   Object result = instance;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (result == UNINITIALIZED) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">           result = instance;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (result == UNINITIALIZED) &#123;</span><br><span class=\"line\">                result = provider.get();</span><br><span class=\"line\">                Object currentInstance = instance;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentInstance != UNINITIALIZED &amp;&amp; currentInstance != result) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Scoped provider was invoked recursively returning \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"different results: \"</span> + currentInstance + <span class=\"string\">\" &amp; \"</span> + result + <span class=\"string\">\". This is likely \"</span></span><br><span class=\"line\">                            + <span class=\"string\">\"due to a circular dependency.\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                instance = result;</span><br><span class=\"line\">                provider = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Reusable\">@Reusable<a href=\"post/learn-dagger#Reusable\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee5_test_scope/CoffeeApp.java\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>它和<code>@Singleton</code>达到的效果差不多，而且逻辑也差不多，但是它却不保证是单实例！</p>\n<p>它的用法比<code>@Singleton</code>还简单点，只需要在提供实例的地方加个<code>@Reusable</code>就可以了，如下代码：</p>\n<blockquote>\n<p>就像下面这么简单就OK了，不用在Component中添加。</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DripCoffeeModule</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reusable</span></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\">Heater <span class=\"title\">provideheater</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"provideheater()\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ElectricHeater();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>我们再来看看，生成的代码和@Singleton的不同！</p>\n</blockquote>\n<ol>\n<li>我们改用<code>@Reusable</code>后，<code>DaggerCoffeeShop</code>有什么变化？<ul>\n<li>唯一发生变化了地方就是这个方法里面的实现由<code>DoubleCheck.provider</code>变成了<code>SingleCheck.provider</code><br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142648.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>那我们来到<code>SingleCheck</code>这个类，它和<code>DoubleCheck</code>不同点就在于<code>get()</code>方法的实现上，请看下面<code>SingleCheck</code>的<code>get()</code>源代码：<ul>\n<li>可以看到它省去了<code>DoubleCheck</code>中一堆关于线程同步的代码</li>\n<li>也就是说我们在单线程中是可以放心使用<code>@Reusable</code>而不用担心重复实例化。<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Provider&lt;T&gt; providerReference = provider;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance == UNINITIALIZED) &#123;</span><br><span class=\"line\">        instance = providerReference.get();</span><br><span class=\"line\">        provider = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Lazy-注入\">Lazy 注入<a href=\"post/learn-dagger#Lazy-注入\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee6_test_lazy_provider\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>通过它可以实现惰性实例化，也就是当我们第一次调用的时候才会创建实例。并且多次调用不会再次创建实例，只会返回第一次调用创建的实例。</p>\n<blockquote>\n<p>我们来看看它的用法！</p>\n</blockquote>\n<ol>\n<li><p>首先我们创建一个需要提供的对象</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LazyEntity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    public LazyEntity()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(&quot;LazyEntity()&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>然后我们创建一个Component，需要提供提供一个<code>Main</code>类</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public interface MyComponent</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Main getMain();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们来看看这个<code>Main</code>类。Lazy的使用方法就是将要使用的对象作为Lazy的泛型参数，如下所示</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    Lazy&lt;LazyEntity&gt; entityLazy;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Inject</span><br><span class=\"line\">    public Main() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Main main = DaggerMyComponent.builder()</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">                .getMain();</span><br><span class=\"line\">        System.out.println(&quot;此时LazyEntity还没有实例化&quot;);</span><br><span class=\"line\">        for (int i = 0; i &lt; 3; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(main.entityLazy.get().hashCode());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>输出结果，也就是说我们重复调用都是一个实例。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时LazyEntity还没有实例化</span><br><span class=\"line\">LazyEntity()</span><br><span class=\"line\">1625635731</span><br><span class=\"line\">1625635731</span><br><span class=\"line\">1625635731</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<blockquote>\n<p>来吧！进入生成代码分析阶段（当然可以选择跳过哈！）ヾ(◍°∇°◍)ﾉﾞ</p>\n</blockquote>\n<ol>\n<li>我们看到Dagger生成的<code>DaggerMyComponent</code>，需要值得注意的就是下面图片上划线的部分。<ul>\n<li>可以看到这里也使用了<code>DoubleCheck</code>类（大家通过上面的学习应该熟悉了），也就是说我们得到的<code>Lazy</code>对象其实就是一个<code>DoubleCheck</code>。</li>\n<li>所以说我们能多次调用也只能返回相同的实例，而且也能在多线程调用也不担心重复实例化。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142703.png\" alt=\"DaggerMyComponent\"></li>\n</ul>\n</li>\n<li>那么我们来看一下<code>DoubleCheck.lazy</code>这个静态方法，源代码如下：<ul>\n<li>可以看到和之前介绍的<code>DoubleCheck.provider</code>一个模子刻出来的，那这里大家就自行了解咯！！<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;P extends Provider&lt;T&gt;, T&gt; <span class=\"function\">Lazy&lt;T&gt; <span class=\"title\">lazy</span><span class=\"params\">(P provider)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (provider <span class=\"keyword\">instanceof</span> Lazy) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>) <span class=\"keyword\">final</span> Lazy&lt;T&gt; lazy = (Lazy&lt;T&gt;) provider;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DoubleCheck&lt;T&gt;(checkNotNull(provider));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Provider-注入\">Provider 注入<a href=\"post/learn-dagger#Provider-注入\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee6_test_lazy_provider\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>当您需要多个实例时，可以通过<code>Provider&lt;T&gt;</code>作为成员变量，您只需要每次调用它的<code>get()</code>方法就会返回不同的实例。</p>\n<blockquote>\n<p>我们直接将上面例子的<code>Lazy</code>改成Provider，其他都不变，如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Provider&lt;LazyEntity&gt; entityLazy;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>来看一下输出的结果：</p>\n</blockquote>\n<ul>\n<li>我们循环调用了三次<code>get()</code>方法，产生了三个不同的实例<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此时LazyEntity还没有实例化</span><br><span class=\"line\">LazyEntity()</span><br><span class=\"line\"><span class=\"number\">692404036</span></span><br><span class=\"line\">LazyEntity()</span><br><span class=\"line\"><span class=\"number\">1554874502</span></span><br><span class=\"line\">LazyEntity()</span><br><span class=\"line\"><span class=\"number\">1846274136</span></span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n<blockquote>\n<p>来吧！生成代码分析阶段(｡･ω･｡)</p>\n</blockquote>\n<ol>\n<li><p>我们看<code>DaggerMyComponent</code>中是怎么注入的！看到划线部分传入的参数是<code>LazyEntity</code>的工厂类，意思说我们定义的成员变量指向的就是一个工厂类<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142728.png\" alt=\"\"></p>\n</li>\n<li><p>我们来看看这个工厂类吧！相信大家也相当熟悉了！(于是就不做说明了！！！)<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142745.png\" alt=\"\"></p>\n</li>\n</ol>\n<h3 id=\"Named丶-Qualifier\">@Named丶@Qualifier<a href=\"post/learn-dagger#Named丶-Qualifier\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee7_test_named_qualifier\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>大家可以先思考一个问题：一个机器人对象有两只手的实例（假如有手实现类：<code>Hand</code>），那么Dagger在提供实例时，如何才能区分这是提供给左的实例还是提供给右手的实例呢？</p>\n<blockquote>\n<p>解决这个问题的办法可以用<code>@Named</code>分别在变量名和提供实例的地方都标记一下名字。该名字作为<code>@Named()</code>的参数，如：<code>@Named(&quot;who am i&quot;)</code>。请看下面的例子演示！</p>\n</blockquote>\n<ol>\n<li><p>我们定义手实现类</p>\n<ul>\n<li><code>toString()</code>输出描述信息。<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hand</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String desc;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Hand</span><span class=\"params\">(String desc)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>我们定义<code>Module</code>类提供手的实例</p>\n<ul>\n<li>使用<code>@Named</code>标记该实例是哪只手，参数为机器人左手还是右手<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RobotModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"left\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Hand <span class=\"title\">provideLeftHand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hand(<span class=\"string\">\"left hand\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"right\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Hand <span class=\"title\">provideRightHand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hand(<span class=\"string\">\"right hand\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>我们定义一个<code>Robot</code>（当然这里Robot只看这两只手(～￣▽￣)～ ），顺便我就直接在这个类中测试了。</p>\n<ul>\n<li>通过<code>@Named(&quot;left&quot;)</code>标记这里要引用左手的实例</li>\n<li>通过<code>@Named(&quot;right&quot;)</code>标记这里要引用右的实例<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Robot</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"left\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Hand leftHand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"right\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Hand rightHand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Robot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Robot robot = DaggerRobotComponent.create().getRobot();</span><br><span class=\"line\">        System.out.println(robot.leftHand);</span><br><span class=\"line\">        System.out.println(robot.rightHand);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>创建一个Component</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span>(modules = RobotModule.class)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RobotComponent</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Robot <span class=\"title\">getRobot</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们来看一看运行结果，可以看出跟我们标记的一样。</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left hand</span><br><span class=\"line\">right hand</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<blockquote>\n<p>那么<code>@Qualifier</code>又是什么呢？其实它和上面讲的<code>@Scope</code>一样，是标记在注解上的，就像<code>@Singleton</code>是官方为我们写好的一个用<code>@Scope</code>标记好的注解。<code>@Named</code>也是官方为我们准备好的用<code>@Qualifier</code>标注的注解。看@Named源码：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Named &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** The name. */</span></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p> 因此我们可以定义自己<code>@Qualifier</code>，我们可以定义不传参数的，像下面这样：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Left &#123; &#125;</span><br><span class=\"line\">---------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Right &#123; &#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>使用（结果是一样的效果）：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RobotModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Left</span></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Hand <span class=\"title\">provideLeftHand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hand(<span class=\"string\">\"left hand\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Right</span></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Hand <span class=\"title\">provideRightHand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hand(<span class=\"string\">\"right hand\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Robot</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Left</span></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Hand leftHand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Right</span></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Hand rightHand;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Robot</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>生成的代码分析：</p>\n</blockquote>\n<ul>\n<li>通过标记名字Dagger知道我们哪个变量对应哪个实例</li>\n</ul>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142803.png\" alt=\"DaggerRobotComponent\" class=\"article-img\"></p>\n<h3 id=\"BindsOptionalOf\">@BindsOptionalOf<a href=\"post/learn-dagger#BindsOptionalOf\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee8_test_optional_binding\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>可选绑定，我们知道如果某个变量标记了<code>@Inject</code>，那么必须要为它提供实例，否则无法编译通过。现在我们可以通过将变量类型放入<code>Optional&lt;T&gt;</code>泛型参数，则可以达到：即使没有提供它的实例，也能通过编译。</p>\n<p><code>Optional</code>这个类是什么呢？它的引入是为了解决Java中空指针的问题，您可以去这里了解一下：<a href=\"http://www.runoob.com/java/java8-optional-class.html\" target=\"_blank\" rel=\"noopener\">Java 8 Optional 类</a></p>\n<blockquote>\n<p>我们还是拿代码说话！这里有一个杯子，杯子里可以有咖啡，也可以没有咖啡！</p>\n</blockquote>\n<blockquote>\n<p>我们先来看有咖啡的时候的代码</p>\n</blockquote>\n<ol>\n<li><p>我们首先我们定义一个咖啡类</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coffee</span> </span>&#123; &#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们将<code>Coffee</code>类定义为可选的绑定</p>\n<ul>\n<li>创建一个<code>Module</code>抽象类来定义，返回类型就是咖啡</li>\n<li>用<code>@BindsOptionalOf</code>来标记<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@BindsOptionalOf</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Coffee <span class=\"title\">optionalCoffee</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>我们在定义一个有提供<code>Coffee</code>实例的<code>Module</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Coffee <span class=\"title\">provideCoffee</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Coffee();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>定义杯子类和Component</p>\n<ul>\n<li>我们直接在<code>Cup</code>添加<code>main</code>方法进行测试</li>\n<li>Component将两个Module添加进来<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cup</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    Optional&lt;Coffee&gt; coffee;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Cup cup = DaggerCComponent.create().getCup();</span><br><span class=\"line\">        System.out.println(cup.coffee);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cup.coffee.isPresent())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"有咖啡\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"无咖啡\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;CoffeeModule.class, CModule.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CComponent</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">Cup <span class=\"title\">getCup</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>输出结果：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[com.example.jiaji.daggertest.coffee8_optional_binding.Coffee@<span class=\"number\">4</span>b1210ee]</span><br><span class=\"line\">有咖啡</span><br></pre></td></tr></table></div></figure>\n<ol start=\"5\">\n<li>如果我们将<code>CoffeeModule</code>提供<code>Coffee</code>实例的方法注释掉<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoffeeModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//    @Provides</span></span><br><span class=\"line\"><span class=\"comment\">//    public Coffee provideCoffee()</span></span><br><span class=\"line\"><span class=\"comment\">//    &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        return new Coffee();</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<blockquote>\n<p>输出结果：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional.empty</span><br><span class=\"line\">无咖啡</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>这就是可选绑定的作用，<code>Optional</code>这个类在java 8中，并且最低Android Api 24。或者你可以选择导入<code>guava</code>这个类库，不过我去喵了一眼，它呀的太大了！！</p>\n</blockquote>\n<p><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142833.png\" alt=\"\" class=\"article-img\"></p>\n<blockquote>\n<p>Optional还可以这样用！</p>\n</blockquote>\n<ul>\n<li><code>Optional&lt;Coffee&gt;</code></li>\n<li><code>Optional&lt;Provider&lt;Coffee&gt;&gt;</code></li>\n<li><code>Optional&lt;Lazy&lt;Coffee&gt;&gt;</code></li>\n<li><code>Optional&lt;Provider&lt;Lazy&lt;Coffee&gt;&gt;&gt;</code></li>\n</ul>\n<blockquote>\n<p>下面我们来看一看生成的代码长什么样吧! ヾ(=･ω･=)o</p>\n</blockquote>\n<p>目前我们直接看<code>Component</code>就够了，于是我们看到<code>DaggerCComponent</code></p>\n<ul>\n<li>这是没有提供<code>Coffee</code>实例的情况下<ul>\n<li>我们可以看到注入的时候，直接通过<code>Optional.&lt;Coffee&gt;empty()</code>创建了了一个没有内容的<code>Optional</code><br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142852.png\" alt=\"DaggerCComponent\"></li>\n</ul>\n</li>\n<li>来看提供了<code>Coffee</code>实例的情况<ul>\n<li>我们需要知道<code>Optional.of()</code>是向<code>Optional</code>里面添加实例的意思，它将返回一个包含有该实例的<code>Optional</code>类<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142915.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BindsInstance\">@BindsInstance<a href=\"post/learn-dagger#BindsInstance\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee9_test_bindsinstance\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>绑定实例，大家可以想象一下：如果我们提供实例的时候，需要在运行时提供参数去创建，那么该如何做呢？</p>\n<blockquote>\n<p>我们可以使用Builder绑定实例来做！这里我们举例一个需要参数名字和爱好才能创建的<code>User</code>对象。</p>\n</blockquote>\n<ol>\n<li><p>名字和爱好都是String类型，定义了两个<code>@Scope</code>注解来标识</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Name &#123; &#125;</span><br><span class=\"line\">----------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Qualifier</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Love &#123; &#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>创建一个<code>User</code>类</p>\n<ul>\n<li>该类为需要提供的对象，在构造方法上用<code>@Inject</code>标识</li>\n<li>由于姓名和爱好都属于String类型，所以我们需要标记一下区分<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String love;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(@Name String name, @Love String love)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.love = love;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"User&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", love='\"</span> + love + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>创建Component，这里是关键部分了</p>\n<ul>\n<li>首先我们需要在该接口内部在定义Builder接口，该接口用<a href=\"mailto:`@Component.Builder\" target=\"_blank\" rel=\"noopener\">`@Component.Builder</a><code>标记，表示该接口会由Component的</code>Builder`静态内部类实现。</li>\n<li>然后我们需要为定义方法<code>name()</code>和<code>love()</code>，加上注解<code>@BindsInstance</code>，返回类型为Builder。传入的参数需要用注解标识，去对应<code>User</code>构造参数。需要注意一点的就是方法只有一个参数，如果多个参数就会报错：只能有一个参数。</li>\n<li>最后<code>UComponent build();</code>就是我们通常最后调用的那个<code>build()</code>方法，创建返回Component实例。<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UComponent</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">User <span class=\"title\">getUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Component</span>.Builder</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@BindsInstance</span> <span class=\"function\">Builder <span class=\"title\">name</span><span class=\"params\">(@Name String name)</span></span>;</span><br><span class=\"line\">        <span class=\"meta\">@BindsInstance</span> <span class=\"function\">Builder <span class=\"title\">love</span><span class=\"params\">(@Love String love)</span></span>;</span><br><span class=\"line\">        <span class=\"function\">UComponent <span class=\"title\">build</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n<li><p>使用测试：</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Main</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        UComponent uComponent = DaggerUComponent.builder()</span><br><span class=\"line\">                .name(&quot;奏响曲&quot;)</span><br><span class=\"line\">                .love(&quot;beautiful girl&quot;)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        System.out.println(uComponent.getUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<blockquote>\n<p>输出结果：</p>\n</blockquote>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User&#123;name=&apos;奏响曲&apos;, love=&apos;beautiful girl&apos;&#125;</span><br></pre></td></tr></table></div></figure>\n<p>可以看出BindsInstance就是就是改造了<code>Component</code>里面的<code>Builder</code>类，Builder类实现了用<a href=\"mailto:`@Component.Builder\" target=\"_blank\" rel=\"noopener\">`@Component.Builder</a>`标注的接口。</p>\n<blockquote>\n<p>接下来来看一下生成的相关代码！</p>\n</blockquote>\n<ul>\n<li>可以看到Component中的<code>Builder</code>实现了<code>UComponent.Builder</code>接口，并将传递进来的参数进行空检测与成员变量引用</li>\n<li>并且参数的实例也将会作为<code>Component</code>的成员变量，当创建<code>User</code>时作为其参数传入。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611142933.png\" alt=\"DaggerUComponent\"></li>\n</ul>\n<h3 id=\"Component-dependencies\">Component dependencies<a href=\"post/learn-dagger#Component-dependencies\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee10_test_subcomponent_dependencies\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p><code>dependencies</code>是注解<code>@Component</code>中的一个参数可以引用其他<code>Component</code>，我们看一下它的源码：</p>\n<ul>\n<li>可以看到它的定义和<code>modules</code>是一模一样</li>\n<li>也就是说我们可以依赖一个或多个<code>Component</code><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Component &#123;</span><br><span class=\"line\">  Class&lt;?&gt;[] modules() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">  Class&lt;?&gt;[] dependencies() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n<p>它的主要作用就是将需要依赖的Component，放到自己的Component中当做成员变量直接引用。被依赖的Component就可以为主Component提供它在接口中定义的需要返回的实例。</p>\n<ul>\n<li>如果有<code>AComponent dependencies BComponent</code></li>\n<li>那么则生成<code>public class DaggerAComponent implements AComponent { BComponent bComponent;...}</code></li>\n<li>并且这个<code>bComponent</code>实例是我们在<code>Builder</code>类里面传进去的。</li>\n</ul>\n<p><code>Component dependency</code>只允许您通过组件依赖关系访问接口中公开的类型，既：你只能访问到Component接口中定义的返回类型。</p>\n<blockquote>\n<p>我们来实际操作！例子：咖啡和水</p>\n</blockquote>\n<ol>\n<li><p>定义咖啡和水的实例，在Coffee中我们覆写<code>toString()</code>把Coffee和Water的hashCode打印出来。</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Water</span> </span>&#123; &#125;</span><br><span class=\"line\">---------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Coffee</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Water water;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Coffee</span><span class=\"params\">(Water water)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.water = water;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"coffee:\"</span> + hashCode() + <span class=\"string\">\"; water:\"</span> + water.hashCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>定义两个的Module分别提供实例</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Water <span class=\"title\">provideWater</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Water();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------</span><br><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Coffee <span class=\"title\">provideCoffee</span><span class=\"params\">(Water water)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Coffee(water);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们定义<code>WComponent</code>为Water的Component，定义<code>CComponent</code>为Coffee的Component。<code>CComponent</code>依赖于<code>WComponent</code></p>\n<ul>\n<li>如下代码我们只需要在注解<code>@Component</code>中添加<code>dependencies = WComponent.class</code>就可以产生依赖。</li>\n<li>在使用的时候，我们只需要在创建CComponent的<code>Builder</code>对象中传入<code>WComponent</code>就可以了。<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComponentDependency</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Component</span>(modules = WModule.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WComponent</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Water <span class=\"title\">water</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Component</span>(modules = CModule.class, dependencies = WComponent.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CComponent</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Coffee <span class=\"title\">coffee</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        WComponent wComponent = DaggerComponentDependency_WComponent</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"water:\"</span> + wComponent.water().hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">        CComponent cComponent = DaggerComponentDependency_CComponent</span><br><span class=\"line\">                .builder()</span><br><span class=\"line\">                .wComponent(wComponent)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(cComponent.coffee());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>输出结果：</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">water:<span class=\"number\">1846274136</span></span><br><span class=\"line\">coffee:<span class=\"number\">1639705018</span>; water:<span class=\"number\">1627674070</span></span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>通过结果我们可以看到，<code>Water</code>被重复实例化了，最简单的解决方法就是直接在<code>provideWater()</code>加上<code>@Reusable</code>注解。OK，达到效果</p>\n</blockquote>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Module</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WModule</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Reusable</span></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Water <span class=\"title\">provideWater</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Water();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">---------------------------------------------------</span><br><span class=\"line\">运行结果：</span><br><span class=\"line\">water:<span class=\"number\">491044090</span></span><br><span class=\"line\">coffee:<span class=\"number\">644117698</span>; water:<span class=\"number\">491044090</span></span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>但这也许不能保证您得到的一定是同一个实例，我们可以加上<code>@Singleton</code>注解，但是这里却是一个坑！因为这些Component的生命周期是不一样的，所以不能跨多个Component用同一个<code>@Singleton</code>来标记。如果这样做将会抛出一个错误信息：<code>This @Singleton component cannot depend on scoped components</code><a href=\"https://stackoverflow.com/questions/39709317/dagger-2-singleton-component-depend-on-singleton/39710308\" target=\"_blank\" rel=\"noopener\">stackoverflow</a></p>\n</blockquote>\n<ol>\n<li><p>我们可这样做，自定义一个<code>Scope</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Scope</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MySingle &#123; &#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们在Water这边用<code>@Singleton</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@Singleton</span></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Water <span class=\"title\">provideWater</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">---------------------------------------------------</span></span><br><span class=\"line\"><span class=\"function\">    @Singleton</span></span><br><span class=\"line\"><span class=\"function\">    @<span class=\"title\">Component</span><span class=\"params\">(modules = WModule.class)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">public</span> interface WComponent</span></span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>我们在Coffee这边用<code>@MySingle</code></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"meta\">@MySingle</span></span><br><span class=\"line\">    <span class=\"meta\">@Provides</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Coffee <span class=\"title\">provideCoffee</span><span class=\"params\">(Water water)</span></span></span><br><span class=\"line\"><span class=\"function\">---------------------------------------------------</span></span><br><span class=\"line\"><span class=\"function\">    @MySingle</span></span><br><span class=\"line\"><span class=\"function\">    @<span class=\"title\">Component</span><span class=\"params\">(modules = CModule.class, dependencies = WComponent.class)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">public</span> interface CComponent</span></span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>输出结果OK：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">water:<span class=\"number\">1625635731</span></span><br><span class=\"line\">coffee:<span class=\"number\">1580066828</span>; water:<span class=\"number\">1625635731</span></span><br></pre></td></tr></table></div></figure>\n</li>\n</ol>\n<blockquote>\n<p>我们来分析一下Dagger所生成的代码，主要我们看到<code>DaggerComponentDependency_CComponent</code>这个类，主要变化了在这里！</p>\n</blockquote>\n<ol>\n<li>我们看到<code>DaggerComponentDependency_CComponent</code>的内部Builder静态类<ul>\n<li>从下面划线的地方我们可以看出，必须要传入依赖的Component的实例，否则会抛异常。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143001.png\" alt=\"Builder\"></li>\n</ul>\n</li>\n<li>我们看<code>DaggerComponentDependency_CComponent</code>里面的实现<ul>\n<li>看到第一根划线处，它会把Builder中依赖的Component实例的引用传递给成员变量。</li>\n<li>看到第二根划线处，这里就跟我们平常调用接口中的方法一样能获得需要的实例，但是这里实例是通过依赖的Component来获取的实例。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143021.png\" alt=\"DaggerComponentDependency_CComponent\"></li>\n</ul>\n</li>\n<li>当我们用了Scope的时候，<code>DaggerComponentDependency_CComponent</code>还会生成一个静态类内部类<ul>\n<li>可以看出它实现了<code>Provider&lt;T&gt;</code>因该就是为了通过<code>Provider</code>的<code>get()</code>方法来提供<code>Water</code>实例。</li>\n<li>并且这里它将依赖的Component放这里面了<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143105.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>我们再来看此时的<code>DaggerComponentDependency_CComponent</code><ul>\n<li>它依赖的则是上面的静态内部类。</li>\n<li>并且通过我们熟悉的<code>DoubleCheck.provider</code>来对<code>get()</code>内逻辑进行的转变，使我们只获取一个实例。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143123.png\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Subcomponent\">@Subcomponent<a href=\"post/learn-dagger#Subcomponent\"></a></h3><p><strong><a href=\"https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee10_test_subcomponent_dependencies\" target=\"_blank\" rel=\"noopener\">测试文件位置</a></strong></p>\n<p>最后我们来研究一下<code>@Subcomponent</code>，就如它名字一样，可以看做是一个Component的子类。</p>\n<blockquote>\n<p>我们来看一下它的源码：</p>\n</blockquote>\n<ul>\n<li>除了没有<code>Class&lt;?&gt;[] dependencies() default {};</code>长得和<code>@Component</code>一样。</li>\n<li>也就是说<code>Subcomponent</code>就不能依赖其他Component了<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Target</span>(TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Subcomponent &#123;</span><br><span class=\"line\">  Class&lt;?&gt;[] modules() <span class=\"keyword\">default</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"meta\">@Target</span>(TYPE)</span><br><span class=\"line\">  <span class=\"meta\">@Documented</span></span><br><span class=\"line\">  <span class=\"meta\">@interface</span> Builder &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n</ul>\n<p><code>SubComponent</code>可以在声明它时从父级访问整个绑定图，即可以使用在其<code>Modules</code>中提供的实例。</p>\n<blockquote>\n<p>怎么使用，我们就直接用上个咖啡和水的代码！重新写一下他们的Component就行。</p>\n</blockquote>\n<ul>\n<li>这里我们将<code>CComponent</code>作为子Component用<code>Subcomponent</code>来标记</li>\n<li>然后我们还得在它的父Component中添加，如下面代码中的<code>CComponent cComponent(CModule cModule);</code>，如果<code>@Subcomponent</code>有多个Module，那么可以就要传递多个Module的参数。假如有：<code>@Subcomponent(modules = {CModule.class, CModule2.class})</code>，那么可以这样：<code>CComponent cComponent(CModule cModule, CModule2 cModule2);</code></li>\n<li>我们在使用的时候需要先创建父<code>Component</code>，然后才能去创建子<code>Component</code>，如下<code>main()</code>方法中</li>\n</ul>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubComponent</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Component</span>(modules = WModule.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">WComponent</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">CComponent <span class=\"title\">cComponent</span><span class=\"params\">(CModule cModule)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Subcomponent</span>(modules = CModule.class)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CComponent</span></span></span><br><span class=\"line\"><span class=\"class\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"function\">Coffee <span class=\"title\">coffee</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        WComponent wComponent = DaggerSubComponent_WComponent</span><br><span class=\"line\">                .create();</span><br><span class=\"line\"></span><br><span class=\"line\">        CComponent cComponent = wComponent</span><br><span class=\"line\">                .cComponent(<span class=\"keyword\">new</span> CModule());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(cComponent.coffee());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p><code>@Subcomponent</code> 和<code>Component dependencies</code>的一些对比</p>\n</blockquote>\n<ul>\n<li><code>@Subcomponent</code>实例是通过父Component创建。<code>Component dependencies</code>可以依赖多个Component，并且各个Component单独创建且分离。</li>\n<li><code>Component dependencies</code>只运行您访问接口中公开定义提供的实例，<code>@Subcomponent</code>可访问其<code>Modules</code>中声明的所有对象</li>\n<li><code>Component dependencies</code>存在生命周期的不同，<code>@Subcomponent</code>是比当前父<code>Component</code> “更小”的周期。</li>\n</ul>\n<blockquote>\n<p>来看一下生成的代码<code>DaggerSubComponent_WComponent</code>，我们将其分成三部分来看</p>\n</blockquote>\n<ol>\n<li>首先我们看到<code>DaggerSubComponent_WComponent</code>内部类：子Component的定义<ul>\n<li>它实现了我们定义的接口，并且和我们之前所生成的Component是类似的，只不过内部没有Builder静态类了。</li>\n<li>由于是内部类，所以它能访问所有父<code>Component</code>成员。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143142.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>我们来看Builder，Builder好说的，跳过！<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143155.png\" alt=\"\"></li>\n<li>我们来看<code>DaggerSubComponent_WComponent</code>的方法<ul>\n<li>可以看到，当我们调用<code>cComponent</code>时就会创建一个子Component现在类实例</li>\n<li>这是由于子Component是没有Builder去创建的也没有默认创建<code>Module</code>的功能。当然子Component也是需要他的<code>Module</code>的，于是要创建它需要的<code>Module</code>给它。<br><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-dagger/20180611143210.png\" alt=\"DaggerSubComponent_WComponent\"></li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://stackoverflow.com/questions/29587130/dagger-2-subcomponents-vs-component-dependencies\" target=\"_blank\" rel=\"noopener\">Subcomponent和Component dependencies的关系区别</a></p>\n<h3 id=\"安卓扩展的相关框架\">安卓扩展的相关框架<a href=\"post/learn-dagger#安卓扩展的相关框架\"></a></h3><p>如果有机会，如果希望看我这种啰嗦介绍的人多的话，在写一篇关于这个的吧！</p>\n<hr>\n<h3 id=\"结束\">结束<a href=\"post/learn-dagger#结束\"></a></h3><p>好了，神不知鬼不觉的一星期码了这么多字。能挨着看到这里的同学，能有多少咧Σ(っ°Д°;)っ</p>\n<p>想起来，我以前写了一个MVP框架<a href=\"https://github.com/xujiaji/XMVP\" target=\"_blank\" rel=\"noopener\">XMVP</a>就是通过获取配置的泛型参数类型然后再通过反射去实例化的自动完成它们之间的依赖关系。也可以说是这就是依赖注入了吧！哈哈！有兴趣的朋友可以去看一看用一用非常简洁哦！(｀・ω・´)</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>相关信息</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>文章中所有代码的地址</td>\n<td><a href=\"https://github.com/xujiaji/learn-android/tree/learn-dagger\" target=\"_blank\" rel=\"noopener\">https://github.com/xujiaji/learn-android/tree/learn-dagger</a></td>\n</tr>\n<tr>\n<td>本文作者（欢迎关注）</td>\n<td><a href=\"https://juejin.im/user/5829eafe2f301e0057799f1a\" target=\"_blank\" rel=\"noopener\">奏响曲</a></td>\n</tr>\n<tr>\n<td>Github</td>\n<td><a href=\"https://github.com/xujiaji/\" target=\"_blank\" rel=\"noopener\">https://github.com/xujiaji/</a></td>\n</tr>\n<tr>\n<td>个人博客</td>\n<td><a href=\"https://blog.xujiaji.com\">https://blog.xujiaji.com</a></td>\n</tr>\n<tr>\n<td>本文地址</td>\n<td><a href=\"https://blog.xujiaji.com/post/learn-dagger\">https://blog.xujiaji.com/post/learn-dagger</a></td>\n</tr>\n</tbody>\n</table></div></div>\n<p>如果文中内容有误或不合适欢迎您的指正！</p>\n<p>over</p>\n","prev":{"title":"Swift学习笔记","link":"post/swift-study-note"},"next":{"title":"python web 从Win部署到ubuntu小记","link":"post/python_server_deploy"},"plink":"https://blog.xujiaji.com/post/learn-dagger/","toc":[{"title":"Dagger2 的深入分析与使用","id":"Dagger2-的深入分析与使用","index":"1","children":[{"title":"Dagger是什么？","id":"Dagger是什么？","index":"1.1"},{"title":"需要添加的依赖","id":"需要添加的依赖","index":"1.2"},{"title":"注解使用","id":"注解使用","index":"1.3","children":[{"title":"咖啡机","id":"咖啡机","index":"1.3.1"},{"title":"@Inject","id":"Inject","index":"1.3.2"},{"title":"@Provides丶@Module丶@Binds","id":"Provides丶-Module丶-Binds","index":"1.3.3"},{"title":"@Component","id":"Component","index":"1.3.4"},{"title":"将上面所学运用到一开始的咖啡机实现","id":"将上面所学运用到一开始的咖啡机实现","index":"1.3.5"},{"title":"@Singleton丶@Scope","id":"Singleton丶-Scope","index":"1.3.6"},{"title":"@Reusable","id":"Reusable","index":"1.3.7"},{"title":"Lazy 注入","id":"Lazy-注入","index":"1.3.8"},{"title":"Provider 注入","id":"Provider-注入","index":"1.3.9"},{"title":"@Named丶@Qualifier","id":"Named丶-Qualifier","index":"1.3.10"},{"title":"@BindsOptionalOf","id":"BindsOptionalOf","index":"1.3.11"},{"title":"@BindsInstance","id":"BindsInstance","index":"1.3.12"},{"title":"Component dependencies","id":"Component-dependencies","index":"1.3.13"},{"title":"@Subcomponent","id":"Subcomponent","index":"1.3.14"},{"title":"安卓扩展的相关框架","id":"安卓扩展的相关框架","index":"1.3.15"},{"title":"结束","id":"结束","index":"1.3.16"}]}]}],"reward":true,"copyright":{"author":"xujiaji","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"https://blog.xujiaji.com/post/learn-dagger/\" title=\"Dagger2 的深入分析与使用\">https://blog.xujiaji.com/post/learn-dagger/</a>"}}