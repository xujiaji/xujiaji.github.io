{"title":"面向对象设计-里氏替换原则(LSP)","slug":"ood-lsp","date":"2016-04-23T03:02:00.000Z","updated":"2017-12-11T13:49:59.300Z","comments":true,"excerpt":"","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/1552955-214b1eec4a45c991.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"探索神秘未知\"></p>\n<blockquote>\n<p>主目录：<a href=\"http://www.jianshu.com/p/fab09d064846\" target=\"_blank\" rel=\"noopener\">一个面向对象设计(OOD)的学习思路设计</a></p>\n</blockquote>\n<p>引子：</p>\n<blockquote>\n<p>有一只小麻雀在大平原上，飞呀飞～。飞累了，看见前方一个大鸟…<br><code>小麻雀：</code>大鸟兄你好，本鸟叫麻雀！请问您怎么称呼？<br><code>大鸵鸟：</code>原来是麻雀小弟呀！本鸟叫鸵鸟！<br><code>小麻雀：</code>鸵鸟哥耶！小弟飞的累的不行！让兄弟在您雄伟的身躯上歇歇脚么？<br><code>大鸵鸟：</code>不行！本鸟还走累了呢！那我咋办？<br><code>小麻雀：</code>你飞呗！难道我还拖着你不成？<br><code>大鸵鸟：</code>前提是我要是能飞的起来呀！<br><code>小麻雀：</code>开什么玩笑！咱们都是鸟，你飞不起来？“飞”是咋们鸟类的特征，想到飞就想到咋们鸟～。</p>\n</blockquote>\n<hr>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1552955-d1c7423eabc9ec9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"LSP.png\"></p>\n<h2 id=\"1-何为LSP？\"><a href=\"#1-何为LSP？\" class=\"headerlink\" title=\"1. 何为LSP？\"></a>1. 何为LSP？</h2><ul>\n<li>全称：里氏替换原则（Liskov Substitution principle）</li>\n<li>定义：<code>派生类（子类）</code>对象能够替换其<code>基类（超类）</code>对象被使用[^foot1]<ul>\n<li>Barbara Liskov对LSP定义是这么说的：若对每个类型<code>S</code>的对象<code>q1</code>，都存在一个类型<code>T</code>的对象<code>q2</code>，使得在所有对<code>T</code>编写的程序<code>P</code>中，用<code>q1</code>替换<code>q2</code>后，程序<code>P</code>行为功能不变，则<code>S</code>是<code>T</code>的子类型。<br>听着有些绕，我将它画一个类图便于理解：<br><img src=\"http://upload-images.jianshu.io/upload_images/1552955-dce323ccc6ad7d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"LSP定义理解dsf\n在类P中将T的对象q2，换成S的对象q1行为功能不变\n则S继承T，得如图所示的关系\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-何为L？何为S？\"><a href=\"#2-何为L？何为S？\" class=\"headerlink\" title=\"2. 何为L？何为S？\"></a>2. 何为L？何为S？</h2><p><strong>L:</strong><code>芭芭拉·利斯科夫（Barbara Liskov）</code>因为提出这个原则的女士姓里<br><strong>S:</strong><code>替换（Substitution）</code>父类能被子类<strong>替换</strong></p>\n<ul>\n<li><code>替换</code>如上述定义所述，子类替换父类后不会影响其行为和功能。</li>\n</ul>\n<h2 id=\"3-为何要有LSP？\"><a href=\"#3-为何要有LSP？\" class=\"headerlink\" title=\"3. 为何要有LSP？\"></a>3. 为何要有LSP？</h2><blockquote>\n<p>①首先谈谈要是违反LSP</p>\n</blockquote>\n<ul>\n<li>来张违反LSP的类图</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1552955-2abece71be1dde9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"违反LSP.png\"></p>\n<ul>\n<li><p>分析</p>\n<ul>\n<li>现在我说天上飞着一只鸟。。。</li>\n<li>子类麻雀替换父类：天上飞着一只麻雀。</li>\n<li>子类鸵鸟替换父类：天上飞着一只鸵鸟。</li>\n</ul>\n</li>\n<li><p>由上因为违反了里氏替代原则，导致整个设计存在严重逻辑错误。</p>\n</li>\n<li>由于违反了里氏替代原则，间接的违反了OCP原则[^foot2]。因为明显可以看出飞翔对于鸵鸟因该是封闭的。</li>\n</ul>\n<blockquote>\n<p>②再来看一些代码（LSP的违反导致OCP的违反）</p>\n</blockquote>\n<ul>\n<li>代码如下</li>\n</ul>\n<p><code>有三个类：鸟、鸵鸟、麻雀。鸵鸟和麻雀都有要去北京的方法</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 鸟</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> IS_OSTRICH = <span class=\"number\">1</span>;<span class=\"comment\">//是鸵鸟</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> IS_SPARROW = <span class=\"number\">2</span>;<span class=\"comment\">//是麻雀 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> isType;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bird</span><span class=\"params\">(<span class=\"keyword\">int</span> isType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isType = isType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 鸵鸟</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ostrich</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ostrich</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Bird.IS_OSTRICH);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toBeiJing</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"跑着去北京！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 麻雀</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sparrow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sparrow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Bird.IS_SPARROW);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">toBeiJing</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"飞着去北京！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>现在有一个方法birdLetGo，统一处理去北京的行为</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">birdLetGo</span><span class=\"params\">(Bird bird)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bird.isType == Bird.IS_OSTRICH) &#123;</span><br><span class=\"line\">        Ostrich ostrich = (Ostrich) bird;</span><br><span class=\"line\">        ostrich.toBeiJing();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bird.isType == Bird.IS_SPARROW) &#123;</span><br><span class=\"line\">        Sparrow sparrow = (Sparrow) bird;</span><br><span class=\"line\">        sparrow.toBeiJing();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>分析<br>大家可以看出，birdLetGo方法明显的违反了开闭原则[^foot2]，它必须要知道所有Bird的子类。并且每次创建一个Bird子类就得修改它一次。</li>\n</ul>\n<blockquote>\n<p>③结论</p>\n</blockquote>\n<p>由上面的分析可以大致的了解了遵守LSP的重要性了吧！</p>\n<ul>\n<li>如果不遵守，导致逻辑设计缺陷</li>\n<li>如果不遵守，导致同时违反开闭原则</li>\n<li>单个模型，孤立时并不具有设计意义。当多个模型出现时，抽象提取共同特征作为父类（基类），使之任何子类能替代于父类</li>\n<li>如果试图预测所有假设，我们所得到的结果可能会充满很多不必要的复杂性。通常最好的办法是只预测那些最明显的LSP的违反状态，直到设计开始出现脆弱的状态，才去处理它们。[^foot3]</li>\n</ul>\n<h2 id=\"4-基于契约设计能支持LSP？\"><a href=\"#4-基于契约设计能支持LSP？\" class=\"headerlink\" title=\"4. 基于契约设计能支持LSP？\"></a>4. 基于契约设计能支持LSP？</h2><ul>\n<li>什么是契约设计？<ul>\n<li>通过为每个方法声明的前置条件和后置条件[^foot4]来指定的。要是使一个方法得以执行，前置条件必须要为真。执行完毕后，该方法要保证后置条件为真。</li>\n</ul>\n</li>\n<li>一个例子</li>\n</ul>\n<blockquote>\n<p>几个继承关系的类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动物</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String food;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Animal</span><span class=\"params\">(String food)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.food = food;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getFood</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> food;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//鸟</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bird</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Bird</span><span class=\"params\">(String food)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(food);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//鸵鸟</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ostrich</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ostrich</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"草\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//麻雀</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sparrow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Bird</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sparrow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"虫子\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在动物园对象中调用吃的方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 吃早餐</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">eatBreakfast</span><span class=\"params\">(Animal animal)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> animal.getFood();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>分析</p>\n</blockquote>\n<ul>\n<li>这里的满足前置条件就是调用方需满足能接受String这个食物类型</li>\n<li>满足后置条件可以看做是参数和返回类型</li>\n<li>前置条件不能更强，只能更弱，比如可以这样调用：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object food = <span class=\"keyword\">new</span> Zoo().eatBreakfast(<span class=\"keyword\">new</span> Animal(<span class=\"string\">\"肉\"</span>));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>后置条件可以更强，比如可以这样写：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String food = <span class=\"keyword\">new</span> Zoo().eatBreakfast(<span class=\"keyword\">new</span> Ostrich());</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这样我们就可以说是前置条件和后置条件就都得以满足</li>\n</ul>\n<h2 id=\"5-结论总结\"><a href=\"#5-结论总结\" class=\"headerlink\" title=\"5. 结论总结\"></a>5. 结论总结</h2><ul>\n<li><p>如果LSP有效运用，程序会具有更多的可维护性、可重用性和健壮性</p>\n</li>\n<li><p>LSP是使OCP成为可能的主要原则之一</p>\n</li>\n<li><p>正是因为子类的可替换性，才使得父类模块无须修改的情况就得以扩展</p>\n</li>\n</ul>\n<h2 id=\"6-参考文章\"><a href=\"#6-参考文章\" class=\"headerlink\" title=\"6. 参考文章\"></a>6. 参考文章</h2><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\" target=\"_blank\" rel=\"noopener\">里氏替换原则-维基百科</a></li>\n<li><a href=\"http://www.jianshu.com/p/0fe6ab955842\" target=\"_blank\" rel=\"noopener\">OCP</a></li>\n<li>敏捷软件开发  第10章  里氏替换原则(LSP)</li>\n<li><a href=\"http://blog.csdn.net/q345852047/article/details/7955792\" target=\"_blank\" rel=\"noopener\">前置条件和后置条件是什么？</a></li>\n</ul>\n","thumbnail":"http://upload-images.jianshu.io/upload_images/1552955-214b1eec4a45c991.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","tags":["Java","面向对象设计"],"next":{"title":"面向对象设计-开闭原则(OCP)","slug":"ood-ocp"}}