{"title":"OpenGL Android课程二：环境光和漫射光","date":"2019-01-23T07:50:51.000Z","author":"xujiaji","thumbnail":"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/5C1BB79E-9092-4559-B6A6-D3288D0FA000.png","link":"post/Learn-OpenGL-Lesson-Two","comments":true,"tags":["Android","OpenGL","学习","翻译"],"categories":["OpenGL"],"updated":"2019-04-08T06:56:23.990Z","content":"<blockquote>\n<p>翻译文</p>\n</blockquote>\n<p>原文标题：OpenGL Android Lesson One: Getting Started<br>原文链接：<a href=\"http://www.learnopengles.com/android-lesson-two-ambient-and-diffuse-lighting/\" target=\"_blank\" rel=\"noopener\">http://www.learnopengles.com/android-lesson-two-ambient-and-diffuse-lighting/</a><br><a id=\"more\"></a></p>\n<hr>\n<h1 id=\"环境光和漫射光\">环境光和漫射光<a href=\"post/Learn-OpenGL-Lesson-Two#环境光和漫射光\"></a></h1><div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td>欢迎来到第二课，我们将学习如何使用<br>着色器实现<a href=\"https://en.wikipedia.org/wiki/Lambertian_reflectance\" target=\"_blank\" rel=\"noopener\">朗伯反射（ Lambertian reflectance ）</a>，也称为标准漫射照明。<br><br>在OpengGLES2，我们需要实现我们自己的照明算法，<br>因此我们要学会数学如何工作以及如何应用到我们的场景中。</td>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190123163828.png\" alt=\"screenshot\"></td>\n</tr>\n</tbody>\n</table></div></div>\n<h2 id=\"阅读本文前提条件\">阅读本文前提条件<a href=\"post/Learn-OpenGL-Lesson-Two#阅读本文前提条件\"></a></h2><p>本系列的每节课都以前面的课程为基础。在开始前，<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">请看第一课</a>，因为本课程将以此为基础概念介绍。</p>\n<h2 id=\"什么是光\">什么是光<a href=\"post/Learn-OpenGL-Lesson-Two#什么是光\"></a></h2><p>没错！一个没有光的世界是昏暗的。没有[光]，我们甚至不能感知世界或我们周围的物体，除了声音和触摸等其他感官。<br>光向我们展示了物体是明亮还是昏暗，是远还是近，它的角度是什么。</p>\n<p>在现实世界，我们所感知的光实际是数万亿微小粒子的聚集，称为光子。它从光源飞出，反弹数千或数百万次，最终到达我们的眼镜我们称之为光。</p>\n<p>我们如何通过计算机图形模拟光的影响？<br>有两种流行的方法：<a href=\"http://en.wikipedia.org/wiki/Ray_tracing_(graphics)\" target=\"_blank\" rel=\"noopener\">光线追踪</a>和<a href=\"http://en.wikipedia.org/wiki/Rasterisation\" target=\"_blank\" rel=\"noopener\">光栅化</a><br>光线跟踪的工作原理是通过数学计算跟踪实际光线并查看它们的最终位置。该技术可以得到非常精准和逼真的结果，但缺点是模拟所有这些光线的计算成本非常高，并且通常对于实时渲染来说太慢了。<br>由于这个限制，大多数实时图形计算使用光栅化，它通过近似值模拟光照。鉴于当前游戏的真实性，光栅化看起来非常好，即使在手机上也可以快速实现实时图形。OpengGL ES主要是一个光栅化库，因此我们主要关注这个。</p>\n<h3 id=\"不同种类的光\">不同种类的光<a href=\"post/Learn-OpenGL-Lesson-Two#不同种类的光\"></a></h3><p>事实证明，我们可以抽象出光的工作方式，并提出三种基本的光照方式</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190123234400.png\" alt=\"Ambient\"><br>环境光</td>\n<td><strong>环境光</strong><br>这是基本的照明水平，似乎遍布整个场景。它似乎不是来自任何<br>光源的光，因为它在到达你之前已经反弹了很多次。这种类型的光<br>在户外的阴天可以体验，或者在户内作为许多不同光源的积累影响。<br>我们可以为物体或场景设置一个基本的亮度，而不是为所有的<br>光单独计算。</td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190124093759.png\" alt=\"diffuse\"><br>环境照明和漫射照明<br>的例子</td>\n<td><strong>漫射照明</strong><br>这是直接从一个物体上跳弹后到达您眼睛中的光，物体的亮度<br>随着它与照明的角度而变化，面向灯光的方向比其他角度更加明亮<br>此外，无论我们相对于物体的角度怎样，我们都觉得物体是相同的<br>亮度，这也被称为<a href=\"https://en.wikipedia.org/wiki/Lambert%27s_cosine_law\" target=\"_blank\" rel=\"noopener\">Lambert的余弦定律</a>。漫射照明或朗伯反射率在<br>日常生活中很常见，您可以在室内灯光照明的白墙上轻松看到。</td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190124105013.png\" alt=\"specular\"><br>镜面高光的一个例子</td>\n<td><strong>镜面照明</strong><br>与漫射照明不同，当我们相对于物体移动时，镜面光照也会<br>发生改变。这给物体带来“光泽”，并且可以在“更光滑”的表面<br>上看到，例如玻璃和其他有光泽的物体。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"模拟光\">模拟光<a href=\"post/Learn-OpenGL-Lesson-Two#模拟光\"></a></h3><p>正如3D场景中的3中主要类型的光照一样，还有三种主要类型的光源：定向光源，点光源，聚光灯，这些也可以在日常生活中轻松看到。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n\n<tbody>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190124112017.png\" alt=\"Directional lighting\"><br>一个明亮的风景</td>\n<td><strong>定向光源</strong><br>定向光照通常来自于一个很远的光源，它可以均匀的照亮整个<br>场景达到相同的亮度。这种光源是最简单的类型，无论您处在<br>场景哪里，光照都具有相同的强度和方向。</td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190124112915.png\" alt=\"Point lighting\"><br>一个点光源的例子</td>\n<td><strong>点光源</strong><br>点光源可以添加到场景中，以提供更多样化和逼真的照明。<br>点光的照射<a href=\"https://en.wikipedia.org/wiki/Inverse-square_law\" target=\"_blank\" rel=\"noopener\">随着距离而下降</a>，并且它的光线在所有方向上<br>向外传播，光源位于中心。</td>\n</tr>\n<tr>\n<td><img src=\"https://xujiaji.oss-accelerate.aliyuncs.com/blog/learn-opengl/20190124113930.png\" alt=\"Spot lighting\"><br>聚光灯</td>\n<td><strong>聚光灯</strong><br>除了具有点光源的特性外，聚光灯也有光哀减的方向，<br>通常呈锥形。</td>\n</tr>\n</tbody>\n</table></div></div>\n<h3 id=\"数学\">数学<a href=\"post/Learn-OpenGL-Lesson-Two#数学\"></a></h3><p>本节课，我们来看看来自一个点光源的环境照明和漫射照明。</p>\n<h3 id=\"环境照明\">环境照明<a href=\"post/Learn-OpenGL-Lesson-Two#环境照明\"></a></h3><p>环境照明其实是<a href=\"https://en.wikipedia.org/wiki/Radiosity_(computer_graphics)\" target=\"_blank\" rel=\"noopener\">间接漫射照明</a>，但它也可以被认为是遍布整个场景的低级光。如果我们这么想，那么它将非常好计算：</p>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 最终颜色 = 材质颜色 * 环境光颜色</span></span><br><span class=\"line\">final color = material color * ambient light color</span><br></pre></td></tr></table></div></figure>\n<p>例如，我们有个红色的物体和一个暗白色的环境照明。我们假设三个颜色（红，绿，蓝）的数组存储颜色，使用<a href=\"https://en.wikipedia.org/wiki/RGB_color_model\" target=\"_blank\" rel=\"noopener\">RGB颜色模型</a>：</p>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 最终颜色 = 红色 * 暗白色 = 暗红色</span></span><br><span class=\"line\">final color = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125; * &#123;<span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>&#125; = &#123;<span class=\"number\">0.1</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>&#125;</span><br></pre></td></tr></table></div></figure>\n<p>物体的最终颜色将是暗红色，如果您有一个被昏暗的白光照明的红色物体，那么这就是您的预期。基本的环境光真的没有比这更多的了，除非您想加入更先进的照明技术，如光能传递。</p>\n<h3 id=\"漫射照明-点光源\">漫射照明-点光源<a href=\"post/Learn-OpenGL-Lesson-Two#漫射照明-点光源\"></a></h3><p>对于漫射照明，我们需要添加哀减和光源位置。光源位置将用来计算光线和表面的角度，它将影响表面的整体光照水平。它还将用于计算光源到表面的距离，这决定了光在这个点上的强度。</p>\n<h4 id=\"第一步：计算朗伯因子（lambert-factor）\">第一步：计算朗伯因子（lambert factor）<a href=\"post/Learn-OpenGL-Lesson-Two#第一步：计算朗伯因子（lambert-factor）\"></a></h4><p>我们最重要的是需要弄清楚表面和光线之间的角度。面向光直射的表面因该全强度照射，而倾斜的表面因该得到较少的照射，比较合适的计算方式是使用<a href=\"https://en.wikipedia.org/wiki/Lambert%27s_cosine_law\" target=\"_blank\" rel=\"noopener\">Lambert的余弦定律</a>。<br>果我们有两个向量，一个是从光到表面上的一个点，第二个是<a href=\"https://en.wikipedia.org/wiki/Normal_(geometry)\" target=\"_blank\" rel=\"noopener\">表面的法线</a>（如果表面是平面，则表面法线是指向上或垂直于该表面的矢量），然后我们可以通过对每个向量进行归一化来计算余弦，使其长度为1，然后通过计算两个向量的<a href=\"https://en.wikipedia.org/wiki/Dot_product\" target=\"_blank\" rel=\"noopener\">点积（数量积）</a>。<br>这个操作可以由OpenGL ES 2轻松完成。</p>\n<p>我们称这位朗伯因子，它的取值范围在0~1之间</p>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 光线向量 = 光源位置 - 物体位置</span></span><br><span class=\"line\">light <span class=\"built_in\">vector</span> = light position - object position</span><br><span class=\"line\"><span class=\"comment\">// 余弦 = 物体法线和归一化后的光线向量的点积</span></span><br><span class=\"line\">cosine = dot product(object normal, normalize(light <span class=\"built_in\">vector</span>))</span><br><span class=\"line\"><span class=\"comment\">// 朗伯因子 = 取余弦和0中最大的</span></span><br><span class=\"line\">lambert factor = max(cosine, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></div></figure>\n<p>首先我们通过光源位置减去物体位置得到光线向量，然后我们通过物体法线和光向量的点积得到余弦。我们标准化光向量，这意味着改变它的长度，长度为1，这个物体的法线长度也是1，两个归一化向量的点积得到他们之间的余弦。因为点积的取值范围是-1~1，所以我们将其限制到0~1。</p>\n<p>这儿有个处在原点的平面，其表面法线指向天空的例子。</p>\n<blockquote>\n<p>光的位置在{0, 10, -10}，我们想要计算在原点的光。</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 光线向量</span></span><br><span class=\"line\">light <span class=\"built_in\">vector</span> = &#123;<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">-10</span>&#125; - &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125; = &#123;<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">-10</span>&#125;</span><br><span class=\"line\"><span class=\"comment\">// 物体法线</span></span><br><span class=\"line\">object normal = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>简洁的说，如果们沿着光线矢量走，我们到达光源的位置。为了归一化矢量，我们将每个分量除以矢量长度：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 光线向量长度 = 平方根(0*0 + 10*10 + (-10 * -10)) = 平方根(200) = 14.14</span></span><br><span class=\"line\">light <span class=\"built_in\">vector</span> length = square root(<span class=\"number\">0</span>*<span class=\"number\">0</span> + <span class=\"number\">10</span>*<span class=\"number\">10</span> + (<span class=\"number\">-10</span> * <span class=\"number\">-10</span>)) = square root(<span class=\"number\">200</span>) = <span class=\"number\">14.14</span></span><br><span class=\"line\"><span class=\"comment\">// 归一化光线向量</span></span><br><span class=\"line\">normalize light <span class=\"built_in\">vector</span> = &#123;<span class=\"number\">0</span>, <span class=\"number\">10</span>/<span class=\"number\">14.14</span>, <span class=\"number\">-10</span>/<span class=\"number\">14.14</span>&#125; = &#123;<span class=\"number\">0</span>, <span class=\"number\">0.707</span>, <span class=\"number\">-0.707</span>&#125;</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>然后我们计算点积：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点积</span></span><br><span class=\"line\"><span class=\"function\">dot <span class=\"title\">product</span><span class=\"params\">(&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, &#123;<span class=\"number\">0</span>, <span class=\"number\">0.707</span>, <span class=\"number\">-0.707</span>&#125;)</span> </span>= (<span class=\"number\">0</span> * <span class=\"number\">0</span>) + (<span class=\"number\">1</span> * <span class=\"number\">0.707</span>) + (<span class=\"number\">0</span> * <span class=\"number\">-0.707</span>) = <span class=\"number\">0.707</span></span><br></pre></td></tr></table></div></figure>\n<p><a href=\"http://programmedlessons.org/VectorLessons/vch07/vch07_5.html\" target=\"_blank\" rel=\"noopener\">这里有个一对点积计算很好的解释</a></p>\n<blockquote>\n<p>最后我们限制范围：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 朗伯因子</span></span><br><span class=\"line\">lambert factor = max(<span class=\"number\">0.707</span>, <span class=\"number\">0</span>) = <span class=\"number\">0.707</span></span><br></pre></td></tr></table></div></figure>\n<p>OpenGL ES 2的着色器语言内置了对其中一些函数的支持，因此我们不需要手动完成所有数学运算，但它仍然有助于理解正在发生的事情。</p>\n<h4 id=\"第二步：计算哀减系数\">第二步：计算哀减系数<a href=\"post/Learn-OpenGL-Lesson-Two#第二步：计算哀减系数\"></a></h4><p>接下来，我们需要计算哀减。来自光源的实际光哀减遵循<a href=\"https://en.wikipedia.org/wiki/Inverse-square_law\" target=\"_blank\" rel=\"noopener\">反平方定律</a></p>\n<blockquote>\n<p>也可以这样表示：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 亮度 = 1 / 距离的平方</span></span><br><span class=\"line\">luminosity = <span class=\"number\">1</span> / (distance * distance)</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>回到我们的列子，因为我们有光线长度为14.14，这儿我们最终的亮度：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">luminosity = <span class=\"number\">1</span> / (<span class=\"number\">14.14</span> * <span class=\"number\">14.14</span>) = <span class=\"number\">1</span> / <span class=\"number\">200</span> = <span class=\"number\">0.005</span></span><br></pre></td></tr></table></div></figure>\n<p>正如您所见，反平方定律会导致距离的强烈哀减。这就是点光源的光在现实世界中的作用，但是由于我们图形展示范围有限，控制这个哀减系数是非常有用的，因此我们仍然能获得逼真的照明而不会让其看起来很昏暗。</p>\n<h4 id=\"第三步：计算最终颜色\">第三步：计算最终颜色<a href=\"post/Learn-OpenGL-Lesson-Two#第三步：计算最终颜色\"></a></h4><blockquote>\n<p>现在我们知道了余弦和哀减度，我们可以计算我们最终的亮度：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 最终颜色 = 材质颜色 * （光的颜色 * 朗伯因子 * 亮度）</span></span><br><span class=\"line\">final color = material color * (light color * lambert factor * luminosity)</span><br></pre></td></tr></table></div></figure>\n<blockquote>\n<p>继续我们之前的红色物体和白光源的例子，这儿计算最终颜色：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final color = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125; * (&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125; * <span class=\"number\">0.707</span> * <span class=\"number\">0.005</span>) = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125; * &#123;<span class=\"number\">0.0035</span>, <span class=\"number\">0.0035</span>, <span class=\"number\">0.0035</span>&#125; = &#123;<span class=\"number\">0.0035</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</span><br></pre></td></tr></table></div></figure>\n<p>回顾一下，对于漫射照明，我们需要使用表面和光线之间的角度以及距离，用来计算最终的整体漫射亮度。</p>\n<blockquote>\n<p>以下是步骤：</p>\n</blockquote>\n<figure class=\"highlight c\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一步</span></span><br><span class=\"line\">light <span class=\"built_in\">vector</span> = light position - object position</span><br><span class=\"line\">cosine = dot product(object normal, normalize(light <span class=\"built_in\">vector</span>))</span><br><span class=\"line\">lambert factor = mac(cosine, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二步</span></span><br><span class=\"line\">luminosity = <span class=\"number\">1</span> / (distance * distance)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第三步</span></span><br><span class=\"line\">final color = material color * (light color * lambert factor * luminosity)</span><br></pre></td></tr></table></div></figure>\n<h3 id=\"将这一切放到OpenGL-ES-2着色器中\">将这一切放到OpenGL ES 2着色器中<a href=\"post/Learn-OpenGL-Lesson-Two#将这一切放到OpenGL-ES-2着色器中\"></a></h3><h4 id=\"顶点着色器\">顶点着色器<a href=\"post/Learn-OpenGL-Lesson-Two#顶点着色器\"></a></h4><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String vertexShader =</span><br><span class=\"line\">        <span class=\"string\">\"uniform mat4 u_MVPMatrix;      \\n\"</span> + <span class=\"comment\">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class=\"line\">        <span class=\"string\">\"uniform mat4 u_MVMatrix;       \\n\"</span> + <span class=\"comment\">// 一个表示组合model、view矩阵的常量</span></span><br><span class=\"line\">        <span class=\"string\">\"uniform vec3 u_LightPos;       \\n\"</span> + <span class=\"comment\">// 光源在眼睛空间（相对于相机视角）的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"attribute vec4 a_Position;     \\n\"</span> + <span class=\"comment\">// 我们将要传入的每个顶点的位置信息</span></span><br><span class=\"line\">        <span class=\"string\">\"attribute vec4 a_Color;        \\n\"</span> + <span class=\"comment\">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class=\"line\">        <span class=\"string\">\"attribute vec3 a_Normal;       \\n\"</span> + <span class=\"comment\">// 我们将要传入的每个顶点的法线信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"varying vec4 v_Color;          \\n\"</span> + <span class=\"comment\">// 这将被传入片段着色器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">\"void main()                    \\n\"</span> + <span class=\"comment\">// 顶点着色器入口</span></span><br><span class=\"line\">        <span class=\"string\">\"&#123;                              \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 将顶点转换成眼睛空间（相对于相机视角）</span></span><br><span class=\"line\">        <span class=\"string\">\"   vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);                \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 将法线的方向转换成眼睛空间（相对于相机视角）</span></span><br><span class=\"line\">        <span class=\"string\">\"   vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));       \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 将用于哀减</span></span><br><span class=\"line\">        <span class=\"string\">\"   float distance = length(u_LightPos - modelViewVertex);               \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 获取从光源到顶点方向的光线向量</span></span><br><span class=\"line\">        <span class=\"string\">\"   vec3 lightVector = normalize(u_LightPos - modelViewVertex);          \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class=\"line\">        <span class=\"string\">\"   float diffuse = max(dot(modelViewNormal, lightVector), 0.1);         \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 根据距离哀减光线</span></span><br><span class=\"line\">        <span class=\"string\">\"   diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));    \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// 将颜色乘以亮度，它将被插入三角形中</span></span><br><span class=\"line\">        <span class=\"string\">\"   v_Color = a_Color * diffuse;                                         \\n\"</span> +</span><br><span class=\"line\">        <span class=\"comment\">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class=\"line\">        <span class=\"string\">\"   gl_Position = u_MVPMatrix * a_Position;                              \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#125;                                                                       \\n\"</span>;</span><br></pre></td></tr></table></div></figure>\n<p>这里有相当多的事情要做。我们在<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">第一课</a>讲到过我们要有一个model/view/projection的组合矩阵，但是我们还要添加了一个model/view矩阵。为什么？因为我们将需要这个矩阵去计算光源位置到当前顶点位置之间的距离。对于漫射照明，无论您使用世界空间（model矩阵）或眼睛空间（model/view矩阵）只要你能计算出合适的距离和角度实际上都没有问题。</p>\n<p>我们传入顶点的颜色和位置信息，以及它的<a href=\"https://en.wikipedia.org/wiki/Normal_(geometry)\" target=\"_blank\" rel=\"noopener\">法线</a>。我们会将最终的颜色传入片段着色器，它将在顶点之间插值，这也被称为<a href=\"https://en.wikipedia.org/wiki/Gouraud_shading\" target=\"_blank\" rel=\"noopener\">Gouraud着色法</a>。</p>\n<p>让我们来看看着色器每一部分的意义：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将顶点转换成眼睛空间（相对于相机视角）</span></span><br><span class=\"line\"><span class=\"string\">\"   vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);                \\n\"</span></span><br></pre></td></tr></table></div></figure>\n<p>因为我们是在眼睛空间观察光源位置，我们转换当前的顶点位置到眼睛空间的坐标系中，因此我们能计算出对应的距离和角度。</p>\n<hr>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将法线的方向转换成眼睛空间（相对于相机视角）</span></span><br><span class=\"line\"><span class=\"string\">\"   vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));       \\n\"</span> +</span><br></pre></td></tr></table></div></figure>\n<p>我们也需要转换法线的方向。这里我们只是想上面位置一样做了个常规乘法，但是如果model或view矩阵做过旋转或倾斜，那么将不能工作：我们实际上需要通过将法线乘以原始矩阵的反转来消除倾斜或缩放的影响。<a href=\"https://web.archive.org/web/20150101061328/http://www.arcsynthesis.org/gltut/Illumination/Tut09%20Normal%20Transformation.html\" target=\"_blank\" rel=\"noopener\">这个网站很好的解释了为什么我们必须这么做</a></p>\n<hr>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将用于哀减</span></span><br><span class=\"line\"><span class=\"string\">\"   float distance = length(u_LightPos - modelViewVertex);               \\n\"</span></span><br></pre></td></tr></table></div></figure>\n<p>如前面数学部分所示，我们需要这个距离去计算哀减系数</p>\n<hr>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取从光源到顶点方向的光线向量</span></span><br><span class=\"line\"><span class=\"string\">\"   vec3 lightVector = normalize(u_LightPos - modelViewVertex);          \\n\"</span></span><br></pre></td></tr></table></div></figure>\n<p>我们也需要光线向量去计算朗伯反射因子</p>\n<hr>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class=\"line\"><span class=\"string\">\"   float diffuse = max(dot(modelViewNormal, lightVector), 0.1);         \\n\"</span></span><br></pre></td></tr></table></div></figure>\n<p>这与上面的数学部分相同，只是在OpenGL ES 2着色器中完成。后面的0.1是一种非常便宜的环境照明方式（最小值将被限制在0.1）。</p>\n<hr>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据距离哀减光线</span></span><br><span class=\"line\"><span class=\"string\">\"   diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));    \\n\"</span></span><br></pre></td></tr></table></div></figure>\n<p>这里和上面的数学部分略有不同。我们将距离的平方缩放0.25以抑制衰减的效应，并且我们还将修改的距离加1，这样当光源非常接近物体时我们就不会过饱和（否则，当距离小于1时，该等式实际上回照亮光源而不是哀减它）。</p>\n<hr>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将颜色乘以亮度，它将被插入三角形中</span></span><br><span class=\"line\"><span class=\"string\">\"   v_Color = a_Color * diffuse;                                         \\n\"</span> +</span><br><span class=\"line\"><span class=\"comment\">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class=\"line\"><span class=\"comment\">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class=\"line\"><span class=\"string\">\"   gl_Position = u_MVPMatrix * a_Position;                              \\n\"</span></span><br></pre></td></tr></table></div></figure>\n<p>当我们有了最终的光色，我们将它乘以顶点的颜色得到最终输出的颜色，然后我们将这个顶点的位置投影到屏幕上。</p>\n<h4 id=\"像素着色器\">像素着色器<a href=\"post/Learn-OpenGL-Lesson-Two#像素着色器\"></a></h4><figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> String fragmentShader =</span><br><span class=\"line\">        <span class=\"string\">\"precision mediump float;       \\n\"</span> + <span class=\"comment\">// 我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class=\"line\">                <span class=\"string\">\"varying vec4 v_Color;          \\n\"</span> + <span class=\"comment\">// 这是从三角形每个片段内插的顶点着色器的颜色</span></span><br><span class=\"line\">                <span class=\"string\">\"void main()                    \\n\"</span> + <span class=\"comment\">// 片段着色器入口</span></span><br><span class=\"line\">                <span class=\"string\">\"&#123;                              \\n\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"   gl_FragColor = v_Color;     \\n\"</span> + <span class=\"comment\">// 直接将颜色传递</span></span><br><span class=\"line\">                <span class=\"string\">\"&#125;                              \\n\"</span>;</span><br></pre></td></tr></table></div></figure>\n<p>因为我们是在每个顶点的基础上计算光，我们的片段着色器和<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">上节课</a>一样，我们所做的是将颜色直接传过去。在下节课中，我们将学习每像素照明。</p>\n<h2 id=\"每顶点照明和每像素照明\">每顶点照明和每像素照明<a href=\"post/Learn-OpenGL-Lesson-Two#每顶点照明和每像素照明\"></a></h2><p>这节课我们的关注点在实现每顶点照明。对于具有光滑表面的物体（如地形），或具有许多三角形的物体的漫反射，这通常是足够了。然而，当您的物体没有包含许多顶点时（例如我们的在这个案例中的正方体），或者有尖角，顶点光照可能会导致伪影，因为亮度在多边形上线性插值；当镜面高光添加到图像时，这些伪影也会变得更加明显。更多关于<a href=\"https://en.wikipedia.org/wiki/Gouraud_shading\" target=\"_blank\" rel=\"noopener\">Gouraud着色法</a>的Wiki文章</p>\n<h2 id=\"正方体的构造\">正方体的构造<a href=\"post/Learn-OpenGL-Lesson-Two#正方体的构造\"></a></h2><p>在第一课中，我们将位置和颜色属性打包到一个数组中，但是OpengGL ES 2也允许让我们将属性单独存放：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//X, Y, Z</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] cubePositionData = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在OpenGL，逆时针绕组（下面的点事逆时针顺序）是默认的。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这意味着当我们在观察一个三角形时，如果这些电视逆时针的，那么我们正在看\"前面\"，如果不是我们则正在看背面</span></span><br><span class=\"line\">        <span class=\"comment\">// OpenGL有一个优化，所有背面的三角形都会被剔除，因为它们通常代表一个物体的背面，无论如何都不可见</span></span><br><span class=\"line\">        <span class=\"comment\">// 正面</span></span><br><span class=\"line\">        -<span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        -<span class=\"number\">1.0F</span>, -<span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        -<span class=\"number\">1.0F</span>, -<span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, -<span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// R，G，B，A</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] cubeColorData = &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 正面红色</span></span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"新的OpenGL-flag\">新的OpenGL flag<a href=\"post/Learn-OpenGL-Lesson-Two#新的OpenGL-flag\"></a></h2><p>我们还使用了<code>glEnable()</code>调用启用了剔除和深度缓冲：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用剔除去掉背面</span></span><br><span class=\"line\">GLES20.glEnable(GLES20.GL_CULL_FACE);</span><br><span class=\"line\"><span class=\"comment\">// 启用深度测试</span></span><br><span class=\"line\">GLES20.glEnable(GLES20.GL_DEPTH_TEST);</span><br></pre></td></tr></table></div></figure>\n<p>作为优化，您可以告诉OpenGL剔除物体背面的三角形。当我们定义正方体时，我们还定义了每个三角形的三个点，以便当我们在查看正面的时候是逆时针的。当我们翻转三角形以便我们到背面时，这些点将会顺时针展示。<br>您只能同时看到一个正方体的三个面，所以这个优化告诉OpenGL不要浪费时间去绘制背面的三角形。</p>\n<p>之后当我们绘制透明的物体时，我们希望关闭剔除，然后物体背面将会变得可见。</p>\n<p>我们还开启了<a href=\"https://en.wikipedia.org/wiki/Z-buffering\" target=\"_blank\" rel=\"noopener\">深度测试</a>。如果你总是从后面向前面绘制物体，那么深度测试绝非必要，但是通过启用它您不仅不需要担心绘制顺序（尽管如果你先画最近的物体渲染会更快），一些显卡也将进行优化，通过花费更少的时间绘制像素来加速渲染。</p>\n<h2 id=\"加载着色器程序的修改\">加载着色器程序的修改<a href=\"post/Learn-OpenGL-Lesson-Two#加载着色器程序的修改\"></a></h2><p>因为在OpenGL中加载着色器程序的步骤大致相同，这些步骤可以很容易的重构为一个单独的方法。我们还添加了以下调用来检索调试信息，以防编译/链接失败：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLES20.glGetProgramInfoLog(programHandle);</span><br><span class=\"line\">GLES20.glGetShaderInfoLog(shaderHandle);</span><br></pre></td></tr></table></div></figure>\n<h2 id=\"光点的顶点和着色程序\">光点的顶点和着色程序<a href=\"post/Learn-OpenGL-Lesson-Two#光点的顶点和着色程序\"></a></h2><p>这个新的顶点和着色器程序绘制在屏幕上代表当前光源的位置：</p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个简单的着色程序</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> String pointVertexShader =</span><br><span class=\"line\">        <span class=\"string\">\"uniform mat4 u_MVPMatrix;                  \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"attribute vec4 a_Position;                 \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"void main()                                \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;                                          \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"   gl_Position = u_MVPMatrix * a_Position; \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"   gl_PointSize = 5.0;                     \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#125;                                          \\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> String pointFragmentShader =</span><br><span class=\"line\">        <span class=\"string\">\"precision mediump float;                   \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"void main()                                \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#123;                                          \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"   gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0) \\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#125;                                          \\n\"</span>;</span><br></pre></td></tr></table></div></figure>\n<p>这个着色器类似于第一课的简单着色器，这里有个新的成员<code>gl_PointSize</code>，直接固定它的值为5.0，这是点的像素尺寸。当我们使用<code>GLES20.GL_POINTS</code>模式绘制这个点的时候它会被使用。我们也直接设置了它的显示颜色为白色。</p>\n<h2 id=\"进一步练习\">进一步练习<a href=\"post/Learn-OpenGL-Lesson-Two#进一步练习\"></a></h2><ul>\n<li>尝试删除“过渡饱和”看会发生什么</li>\n<li>这里的照明方式存在缺陷，你能发现是什么吗？提示：我们做环境照明的方式的缺点是什么，以及alpha会放生什么？</li>\n<li>如果将<code>gl_PointSize</code>添加到正方体着色器并使用<code>GL_POINTS</code>绘制它会发生什么？</li>\n</ul>\n<h2 id=\"进一步阅读\">进一步阅读<a href=\"post/Learn-OpenGL-Lesson-Two#进一步阅读\"></a></h2><ul>\n<li><a href=\"https://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/lighting.php\" target=\"_blank\" rel=\"noopener\">Clockworkcoders教程：每片段照明</a></li>\n<li><a href=\"http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\" target=\"_blank\" rel=\"noopener\">Lighthouse3d.com：法线矩阵</a></li>\n<li><a href=\"https://web.archive.org/web/20150101061328/http://www.arcsynthesis.org/gltut/Illumination/Tut09%20Normal%20Transformation.html\" target=\"_blank\" rel=\"noopener\">arcsynthesis.org: OpenGL教程：法线转换</a></li>\n<li><a href=\"http://glprogramming.com/red/chapter05.html\" target=\"_blank\" rel=\"noopener\">OpenGL编程指南：5章 照明</a></li>\n</ul>\n<p>在编写本教程时，上面的进一步阅读部分对我来说是非常宝贵的资源，因此我强烈建议您阅读它们以获得更多的信息和解释。</p>\n<h2 id=\"教程目录\">教程目录<a href=\"post/Learn-OpenGL-Lesson-Two#教程目录\"></a></h2><ul>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One\">OpenGL Android课程一：入门</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two\">OpenGL Android课程二：环境光和漫射光</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three\">OpenGL Android课程三：使用每片段照明</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four\">OpenGL Android课程四：介绍纹理基础</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five\">OpenGL Android课程五：介绍混合（Blending）</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six\">OpenGL Android课程六：介绍纹理过滤</a></li>\n<li><a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven\">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li>\n</ul>\n<h2 id=\"打包教材\">打包教材<a href=\"post/Learn-OpenGL-Lesson-Two#打包教材\"></a></h2><p>可以在Github下载本课程源代码：<a href=\"https://github.com/learnopengles/Learn-OpenGLES-Tutorials\" target=\"_blank\" rel=\"noopener\">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href=\"https://market.android.com/details?id=com.learnopengles.android\" target=\"_blank\" rel=\"noopener\">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href=\"https://github.com/xujiaji/LearnOpenGL/releases\" target=\"_blank\" rel=\"noopener\">github download</a></p>\n","prev":{"title":"OpenGL Android课程三：使用每片段照明","link":"post/Learn-OpenGL-Lesson-Three"},"next":{"title":"OpenGL Android课程一：入门","link":"post/Learn-OpenGL-Lesson-One"},"plink":"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two/","toc":[{"title":"环境光和漫射光","id":"环境光和漫射光","index":"1","children":[{"title":"阅读本文前提条件","id":"阅读本文前提条件","index":"1.1"},{"title":"什么是光","id":"什么是光","index":"1.2","children":[{"title":"不同种类的光","id":"不同种类的光","index":"1.2.1"},{"title":"模拟光","id":"模拟光","index":"1.2.2"},{"title":"数学","id":"数学","index":"1.2.3"},{"title":"环境照明","id":"环境照明","index":"1.2.4"},{"title":"漫射照明-点光源","id":"漫射照明-点光源","index":"1.2.5"},{"title":"将这一切放到OpenGL ES 2着色器中","id":"将这一切放到OpenGL-ES-2着色器中","index":"1.2.6"}]},{"title":"每顶点照明和每像素照明","id":"每顶点照明和每像素照明","index":"1.3"},{"title":"正方体的构造","id":"正方体的构造","index":"1.4"},{"title":"新的OpenGL flag","id":"新的OpenGL-flag","index":"1.5"},{"title":"加载着色器程序的修改","id":"加载着色器程序的修改","index":"1.6"},{"title":"光点的顶点和着色程序","id":"光点的顶点和着色程序","index":"1.7"},{"title":"进一步练习","id":"进一步练习","index":"1.8"},{"title":"进一步阅读","id":"进一步阅读","index":"1.9"},{"title":"教程目录","id":"教程目录","index":"1.10"},{"title":"打包教材","id":"打包教材","index":"1.11"}]}],"reward":true,"copyright":{"author":"xujiaji","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow noopener\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","link":"<a href=\"https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two/\" title=\"OpenGL Android课程二：环境光和漫射光\">https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two/</a>"}}