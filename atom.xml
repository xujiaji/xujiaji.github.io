<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐佳吉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-16T07:39:44.992Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xujiaji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HappyBubble-气泡对话框（根据被点击View位置显示、可定制）</title>
    <link href="http://yoursite.com/2017/12/16/happy-bubble/"/>
    <id>http://yoursite.com/2017/12/16/happy-bubble/</id>
    <published>2017-12-16T06:08:50.000Z</published>
    <updated>2017-12-16T07:39:44.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image/happy-bubble/img5.png" alt="bubble"></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><a href="https://github.com/xujiaji/HappyBubble/releases" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Download-demo--apk-brightgreen.svg" alt="GitHub release"></a></td><td><a href="https://bintray.com/xujiaji/maven/happy-bubble/1.0.1" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/bintray-1.0.1-brightgreen.svg" alt="GitHub release"></a></td></tr></tbody></table><p><a href="https://github.com/xujiaji/HappyBubble" target="_blank" rel="noopener">Github</a></p><p>气泡布局的形状可以改变，如四角弧度、气泡颜色、箭头大小和阴影。</p><p>气泡Dialog可以根据被点击的view的位置来确定自己展示的位置。</p><h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始?"></a>如何开始?</h2><p>在你模块中的build.gradle添加上HappyBubble依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.github.xujiaji:happy-bubble:1.0.1&apos;</span><br></pre></td></tr></table></figure></p><h2 id="如何使用-HappyBubble-BubbleDialog"><a href="#如何使用-HappyBubble-BubbleDialog" class="headerlink" title="如何使用 HappyBubble-BubbleDialog?"></a>如何使用 HappyBubble-BubbleDialog?</h2><blockquote><p>方法参考表</p></blockquote><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">addContentView</td><td style="text-align:center">View</td><td style="text-align:left">添加填充在气泡中的视图</td></tr><tr><td style="text-align:left">setClickedView</td><td style="text-align:center">View</td><td style="text-align:left">被点击的View（触发Dialog出现的View）</td></tr><tr><td style="text-align:left">setPosition</td><td style="text-align:center">enum BubbleDialog.Position:LEFT, TOP, RIGHT, BOTTOM</td><td style="text-align:left">BubbleDialog相对于被点击的view的位置</td></tr><tr><td style="text-align:left">calBar</td><td style="text-align:center">boolean</td><td style="text-align:left">是否计算状态栏的高度（如果布局没有全屏，则需要计算）</td></tr><tr><td style="text-align:left">setOffsetX</td><td style="text-align:center">int</td><td style="text-align:left">如果您对dialog所展示的x轴位置不满，需要调整x轴方向偏移</td></tr><tr><td style="text-align:left">setOffsetY</td><td style="text-align:center">int</td><td style="text-align:left">如果您对dialog所展示的y轴位置不满，需要调整y轴方向偏移</td></tr><tr><td style="text-align:left">setBubbleLayout</td><td style="text-align:center">BubbleLayout</td><td style="text-align:left">自定义dialog的气泡布局</td></tr><tr><td style="text-align:left">setTransParentBackground</td><td style="text-align:center">-</td><td style="text-align:left">背景透明</td></tr><tr><td style="text-align:left">softShowUp</td><td style="text-align:center">-</td><td style="text-align:left">当气泡dialog中有EditText时，软键盘弹出会遮挡EditText时，dialog随软键盘上移。</td></tr><tr><td style="text-align:left">show</td><td style="text-align:center">-</td><td style="text-align:left">显示</td></tr></tbody></table><h3 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="image/happy-bubble/img_example1.png" alt="exampel1"></td><td><img src="image/happy-bubble/img_example2.png" alt="exampel2"></td></tr></tbody></table><blockquote><p>需要提供：Context、填充的View、被点击的View。<br><br>如果最外层布局没有全屏时，您需要计算状态栏的高度，否则会多向下偏移一个状态栏的高度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="向下偏移8dp"><a href="#向下偏移8dp" class="headerlink" title="向下偏移8dp"></a>向下偏移8dp</h3><p><img src="image/happy-bubble/img_example3.png" alt="exampel3"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton4)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setOffsetY(<span class="number">8</span>)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure></p><h3 id="当想要输入框随软键盘上移时"><a href="#当想要输入框随软键盘上移时" class="headerlink" title="当想要输入框随软键盘上移时"></a>当想要输入框随软键盘上移时</h3><p><img src="image/happy-bubble/gif_example4.gif" alt="exampel4"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton12)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .softShowUp()</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure></p><h3 id="自定义-BubbleLayout"><a href="#自定义-BubbleLayout" class="headerlink" title="自定义 BubbleLayout."></a>自定义 BubbleLayout.</h3><p><img src="image/happy-bubble/img_example5.png" alt="exampel5"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BubbleLayout bl = <span class="keyword">new</span> BubbleLayout(<span class="keyword">this</span>);</span><br><span class="line">bl.setBubbleColor(Color.BLUE);</span><br><span class="line">bl.setShadowColor(Color.RED);</span><br><span class="line">bl.setLookLength(Util.dpToPx(<span class="keyword">this</span>, <span class="number">54</span>));</span><br><span class="line">bl.setLookWidth(Util.dpToPx(<span class="keyword">this</span>, <span class="number">48</span>));</span><br><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view5, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton8)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .setBubbleLayout(bl)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="自定义-BubbleDialog，可交互的-BubbleDialog"><a href="#自定义-BubbleDialog，可交互的-BubbleDialog" class="headerlink" title="自定义 BubbleDialog，可交互的 BubbleDialog."></a>自定义 BubbleDialog，可交互的 BubbleDialog.</h3><p><img src="image/happy-bubble/gif_example6.gif" alt="exampel6"></p><blockquote><p>1、布局</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"160dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button13"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button14"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button15"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button3"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、自定义 BubbleDialog</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义可操作性dialog</span></span><br><span class="line"><span class="comment"> * Created by JiajiXu on 17-12-11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOperateDialog</span> <span class="keyword">extends</span> <span class="title">BubbleDialog</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewHolder mViewHolder;</span><br><span class="line">    <span class="keyword">private</span> OnClickCustomButtonListener mListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomOperateDialog</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        calBar(<span class="keyword">true</span>);</span><br><span class="line">        setTransParentBackground();</span><br><span class="line">        setPosition(Position.TOP);</span><br><span class="line">        View rootView = LayoutInflater.from(context).inflate(R.layout.dialog_view4, <span class="keyword">null</span>);</span><br><span class="line">        mViewHolder = <span class="keyword">new</span> ViewHolder(rootView);</span><br><span class="line">        addContentView(rootView);</span><br><span class="line">        mViewHolder.btn13.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mViewHolder.btn14.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mViewHolder.btn15.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mListener.onClick(((Button)v).getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        Button btn13, btn14, btn15;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View rootView)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            btn13 = rootView.findViewById(R.id.button13);</span><br><span class="line">            btn14 = rootView.findViewById(R.id.button14);</span><br><span class="line">            btn15 = rootView.findViewById(R.id.button15);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickListener</span><span class="params">(OnClickCustomButtonListener l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mListener = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickCustomButtonListener</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String str)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、显示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CustomOperateDialog codDialog = <span class="keyword">new</span> CustomOperateDialog(<span class="keyword">this</span>)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setClickedView(mButton10);</span><br><span class="line">codDialog.setClickListener(<span class="keyword">new</span> CustomOperateDialog.OnClickCustomButtonListener()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mButton10.setText(<span class="string">"点击了："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">codDialog.show();</span><br></pre></td></tr></table></figure><h3 id="查看关于BappyDialog的使用代码"><a href="#查看关于BappyDialog的使用代码" class="headerlink" title="查看关于BappyDialog的使用代码"></a>查看关于BappyDialog的使用代码</h3><p><a href="app/src/main/java/com/xujiaji/happybubbletest/TestDialogActivity.java">TestDialogActivity 代码</a></p><hr><h2 id="如何使用-HappyBubble-BubbleLayout"><a href="#如何使用-HappyBubble-BubbleLayout" class="headerlink" title="如何使用 HappyBubble-BubbleLayout?"></a>如何使用 HappyBubble-BubbleLayout?</h2><h3 id="在XML代码中设置属性值"><a href="#在XML代码中设置属性值" class="headerlink" title="在XML代码中设置属性值"></a>在XML代码中设置属性值</h3><blockquote><p>属性参照表</p></blockquote><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:center">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">lookAt</td><td style="text-align:center">left, top, right, bottom</td><td style="text-align:left">箭头指向</td></tr><tr><td style="text-align:left">lookLength</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头的长度</td></tr><tr><td style="text-align:left">lookPosition</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头相对于x或y轴的位置</td></tr><tr><td style="text-align:left">lookWidth</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头的宽度</td></tr><tr><td style="text-align:left">bubbleColor</td><td style="text-align:center">color</td><td style="text-align:left">气泡的颜色</td></tr><tr><td style="text-align:left">bubbleRadius</td><td style="text-align:center">dimension</td><td style="text-align:left">气泡四角的圆弧</td></tr><tr><td style="text-align:left">bubblePadding</td><td style="text-align:center">dimension</td><td style="text-align:left">气泡边缘到内容的距离</td></tr><tr><td style="text-align:left">shadowRadius</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影的扩散大小</td></tr><tr><td style="text-align:left">shadowX</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影在x轴方向的偏移</td></tr><tr><td style="text-align:left">shadowY</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影在y轴方向的偏移</td></tr><tr><td style="text-align:left">shadowColor</td><td style="text-align:center">color</td><td style="text-align:left">阴影的颜色</td></tr></tbody></table><blockquote><p>xml 例子</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.xujiaji.happybubble.BubbleLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/bubbleLayout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookAt</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookLength</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookPosition</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookWidth</span>=<span class="string">"16dp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在java代码中定义属性值。"><a href="#在java代码中定义属性值。" class="headerlink" title="在java代码中定义属性值。"></a>在java代码中定义属性值。</h3><blockquote><p>BubbleLayout 通过“set属性名”方法和invalidate方法来更新BubbleLayout。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mBubbleLayout.setLook(BubbleLayout.Look.LEFT);</span><br></pre></td></tr></table></figure><blockquote><p>查看更多</p></blockquote><p><a href="app/src/main/java/com/xujiaji/happybubbletest/MainActivity.java">MainActivity 代码</a></p><p><img src="image/happy-bubble/gif1.gif" alt="GIF"></p><h3 id="demo-下载"><a href="#demo-下载" class="headerlink" title="demo 下载"></a>demo 下载</h3><p><a href="https://github.com/xujiaji/HappyBubble/releases" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Download-demo--apk-brightgreen.svg" alt="GitHub release"></a></p><hr><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Copyright 2016 XuJiaji</span><br><span class="line"></span><br><span class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">you may not use this file except in compliance with the License.</span><br><span class="line">You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">Unless required by applicable law or agreed to in writing, software</span><br><span class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">See the License for the specific language governing permissions and</span><br><span class="line">limitations under the License.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image/happy-bubble/img5.png&quot; alt=&quot;bubble&quot;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="library" scheme="http://yoursite.com/tags/library/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中的bug清单</title>
    <link href="http://yoursite.com/2017/12/12/android-bug-list/"/>
    <id>http://yoursite.com/2017/12/12/android-bug-list/</id>
    <published>2017-12-12T07:34:41.000Z</published>
    <updated>2017-12-12T09:26:17.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-lang-RuntimeException-Unable-to-get-provider"><a href="#java-lang-RuntimeException-Unable-to-get-provider" class="headerlink" title="java.lang.RuntimeException: Unable to get provider"></a>java.lang.RuntimeException: Unable to get provider</h2><ul><li>解决地址：<a href="https://stackoverflow.com/questions/37312103/unable-to-get-provider-com-google-firebase-provider-firebaseinitprovider" target="_blank" rel="noopener">https://stackoverflow.com/questions/37312103/unable-to-get-provider-com-google-firebase-provider-firebaseinitprovider</a></li><li>原因：在SDK &lt;22的设备中遇到同样的问题，原因是MultiDex，MultiDex.install必须在attachBaseContext方法中</li><li>解决方法<br>自定义Application中添加如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(context);</span><br><span class="line">        MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>build.gradle中添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:multidex:1.0.1&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java-lang-RuntimeException-Unable-to-get-provider&quot;&gt;&lt;a href=&quot;#java-lang-RuntimeException-Unable-to-get-provider&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>linux笔记</title>
    <link href="http://yoursite.com/2017/12/12/linux-notes/"/>
    <id>http://yoursite.com/2017/12/12/linux-notes/</id>
    <published>2017-12-12T04:25:29.000Z</published>
    <updated>2017-12-12T04:41:30.606Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://yoursite.com/2017/12/12/git-notes/"/>
    <id>http://yoursite.com/2017/12/12/git-notes/</id>
    <published>2017-12-12T03:02:34.000Z</published>
    <updated>2017-12-12T09:40:01.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li><p>查看本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure></li><li><p>查看远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure></li><li><p>创建分支1.1.2并切换到1.1.2分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>拆分写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 1.1.2</span><br><span class="line">$ git checkout 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>删除本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>推送本地分支到远程分支，远程分支不存在则创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 1.1.2:1.1.2</span><br></pre></td></tr></table></figure></li><li><p>本地分支留空则是删除远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :1.1.2</span><br></pre></td></tr></table></figure></li><li><p>本地分支推送到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>合并work分支到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge work</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看本地分支&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-接口隔离(ISP)</title>
    <link href="http://yoursite.com/2016/05/07/ood-isp/"/>
    <id>http://yoursite.com/2016/05/07/ood-isp/</id>
    <published>2016-05-07T02:12:00.000Z</published>
    <updated>2017-12-13T10:56:57.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1552955-d848981d7298dcbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ISP"></p><blockquote><p>主目录：<a href="http://www.jianshu.com/p/fab09d064846" target="_blank" rel="noopener">一个面向对象设计(OOD)的学习思路设计</a></p></blockquote><p>引入：</p><blockquote><p><code>老手机：</code> 你们这些年轻手机光溜溜的，全身上下只有两个插孔几个按钮，为啥这么受欢迎？<br><code>新手机：</code>老前辈，您虽然占了一半都是按钮，可以快速的点到，但是多数情况下都没用呀！我虽然只有几个按钮，但都是经常用到滴。我也能达到和你一样的效果，而且更简洁。<br><code>老手机：</code>恩，人们只有打字的时候才用到那些按钮。<br><code>新手机：</code>所以在平常时候，我这几个按钮就可以满足大部分需要了。<br><code>老手机：</code>真是一代比一代强咯！</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1552955-35de7a2e696c454b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ISP.png"></p><h2 id="1-何为ISP？"><a href="#1-何为ISP？" class="headerlink" title="1.何为ISP？"></a>1.何为ISP？</h2><ul><li>全称：接口隔离原则（Interface Segregation Principle）</li><li>定义：客户程序不应该被迫依赖于它们不使用的方法</li></ul><h2 id="2-如何理解ISP？"><a href="#2-如何理解ISP？" class="headerlink" title="2.如何理解ISP？"></a>2.如何理解ISP？</h2><ul><li>比如<code>图2-1.违反了ISP</code>中的鸵鸟类不应该被迫依赖于不使用的飞翔方法<br><img src="http://upload-images.jianshu.io/upload_images/1552955-940cb2ab5b7872da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2-1.违反了ISP"></li></ul><ul><li>现在将<code>2-1.满足ISP</code>的例子中的<code>接口鸟</code>进行拆分，能飞的<code>鸟类麻雀</code>实现<code>接口飞鸟</code>，不能飞的<code>鸟类鸵鸟</code>实现<code>接口鸟</code>，如下<code>图2-2</code>所示。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1552955-cbecfee325c2175a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2-2.满足ISP.png"></p><ul><li>可能到这里大家有个疑惑：接口变多了！对！就是接口变多了。不是上面还举例了手机的例子吗？阐明了减少接口的好处。<ul><li>其实我们减少并不是接口，而是接口中的抽象方法。</li><li>通过分离来满足客户端的需求，使客户端程序中只存在需要的方法。</li><li>客户端的不同需求才是导致接口改变的原因。</li></ul></li></ul><h2 id="3-遵循ISP有什么好处？"><a href="#3-遵循ISP有什么好处？" class="headerlink" title="3.遵循ISP有什么好处？"></a>3.遵循ISP有什么好处？</h2><ul><li><p>不遵循ISP而导致的一些问题，在<code>图2-1</code>中，鸵鸟是不需要飞的，但保留了飞的方法。</p><ul><li>现在接口中的<code>飞()</code>方法需要进行改动，假如改成：<code>boolean fly()</code>—可以理解为调用一次向上飞，再调用一次向下飞，依次循环。</li><li>现在不仅会飞的鸟需要改动，连鸵鸟这些不会飞的鸟都要莫名奇妙的跟着去改动。</li><li>显然这导致了程序之间的耦合增强，影响到了不应该影响的客户程序</li></ul></li><li><p>现在正过来看遵循ISP接口，如<code>图2-2</code>所示的例子，分离了方法<code>飞</code>，使得更改时并不会影响到不相干的客户程序<code>（鸵鸟类）</code></p><ul><li>需要尽可能避免这种耦合，因此我们希望分离接口。</li><li>可以看出，分离接口有利于我们对需求变更时的快速高效的执行行动。</li><li>并且使之解构层次更加的分明</li></ul></li></ul><h2 id="4-循序渐进的例子（来自敏捷软件开发-foot1-）"><a href="#4-循序渐进的例子（来自敏捷软件开发-foot1-）" class="headerlink" title="4.循序渐进的例子（来自敏捷软件开发[^foot1]）"></a>4.循序渐进的例子（来自敏捷软件开发[^foot1]）</h2><blockquote><p>以ATM用户界面为例</p></blockquote><ol><li><p>ATM的用户界面有不同的交易模式，现将从ATM的基类<code>Transaction</code>（交易类）中派生子类：</p><ul><li><code>DepositTransaction</code>存款</li><li><code>WithdrawalTransaction</code>取款</li><li><code>TransferTransaction</code>转账</li></ul></li><li><p>每一个子类交易都有一个界面，因此要依赖于UI，调用的不同方法，如：DepositTransaction会调用UI类中的RequestDepositAmount()方法，当前ATM结果如下<code>图4-2-1.ATM操作解构</code>所示。<br><img src="http://upload-images.jianshu.io/upload_images/1552955-20c0565932dc5e43.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4-2-1.ATM操作解构"></p><ul><li>这样做是ISP告诉我们应当避免的情形</li><li>每个操作使用的UI方法，其他的操作都不会使用</li><li>当每次<code>Transaction</code>子类的改动都会迫使对UI进行改动，从而影响到了其他所有<code>Transaction</code>子类及其他所有依赖于UI接口的类。</li><li>当要增加一个支付煤气费的交易时，为了处理该操作想要显示的特定消息，就需要在UI中加入新的方法。糟糕的是，由于<code>Transaction</code>的子类全部依赖于UI接口，所以它们都需要重新编译。</li></ul></li><li><p>因此现在有一个办法，将UI接口分解成像<code>DepositUI</code>、<code>WithdrawalUI</code>以及<code>TransferUI</code>这样的单独接口，可以避免这种不合适的耦合，最终的UI接口可以去多重继承这些单独的接口。<code>图5-3-1.分离的ATM接口</code>和之后的代码展示了这个模型。<br><img src="http://upload-images.jianshu.io/upload_images/1552955-43c35e5ce6f818a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5-3-1.分离的ATM接口"></p><blockquote><p>定义交易接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 存款UI接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DepositUI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestDepositAmount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 取款UI接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WithdrawalUI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestWithdrawalAmount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 转账UI接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TransferUI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestTransferAmount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** UI接口继承所有的交易接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UI</span> <span class="keyword">extends</span> <span class="title">DepositUI</span>, <span class="title">WithdrawalUI</span>, <span class="title">TransferUI</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>交易抽象类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 交易类*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>交易派生类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 存款交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepositTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DepositUI mDepositUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepositTransaction</span><span class="params">(DepositUI mDepositUI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDepositUI = mDepositUI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mDepositUI.RequestDepositAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 取款交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithdrawalTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WithdrawalUI mWithdrawalUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithdrawalTransaction</span><span class="params">(WithdrawalUI mWithdrawalUI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mWithdrawalUI = mWithdrawalUI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mWithdrawalUI.RequestWithdrawalAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 转账交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransferTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TransferUI mTransferUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferTransaction</span><span class="params">(TransferUI mTransferUI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mTransferUI = mTransferUI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mTransferUI.RequestTransferAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建交易对象：由于每个操作都必须以特定的方式知晓UI版本，如<code>TransferTransaction</code>必须知道<code>TransferUI</code>。在程序中，使每个操作的构造时给它传入指向特定于它的UI的引用，从而解决这个问题。如下进行初始化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UI GUI;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DepositTransaction mDepositTransaction = <span class="keyword">new</span> DepositTransaction(GUI);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然这样很方便，但同样要求每个操作都有一个指向对应UI的引用成员。另外一种解决这个问题的方法是创建一组全局常量。全局变量并不总是意味着拙劣的设计，在这种情况下，它们有着明显的易于访问的有点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** UI全局变量*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UIGlobals</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DepositUI mDepositUI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WithdrawalUI mWithdrawalUI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TransferUI mTransferUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIGlobals</span><span class="params">(UI lui)</span> </span>&#123;</span><br><span class="line">        UIGlobals.mDepositUI = lui;</span><br><span class="line">        UIGlobals.mWithdrawalUI = lui;</span><br><span class="line">        UIGlobals.mTransferUI = lui;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 转账交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransferTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        UIGlobals.mTransferUI.RequestTransferAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UI的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UIEntity</span> <span class="keyword">implements</span> <span class="title">UI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequestDepositAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequestTransferAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequestWithdrawalAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化UI静态类</span></span><br><span class="line">    UIGlobals mUIGlobals = <span class="keyword">new</span> UIGlobals(<span class="keyword">new</span> UIEntity());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用姿势</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Transaction mTransaction = <span class="keyword">new</span> TransferTransaction();</span><br><span class="line">        mTransaction.Execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>由于敏捷软件开发举的例子是c++的，知识有限，表示很多看不懂，可能有些地方偏差较大，想了解更多建议亲自去看看( ¯▽¯；)</code></p></li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><ul><li><p>胖类（fat class）：就是上边讲解的不满足ISP的类型</p></li><li><p>可以看出胖类增强了类之间的耦合，使得对该胖类进行改动会影响到所有其他类。</p></li><li><p>通过将胖类接口分解成多个特定类（客户端程序）的接口，使得强耦合得以解决</p></li><li><p>然后该胖类继承所有特定类的接口，并实现它们。就解除了这个特定类和它没有调用方法间的依赖关系，并使得这些特定类之间互不依赖。</p></li></ul><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6.参考文献"></a>6.参考文献</h2><ul><li>敏捷软件开发  第12章   接口隔离原则（ISP）</li><li><a href="http://blog.jobbole.com/32122/" target="_blank" rel="noopener">如何向妻子解释OOD</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1552955-d848981d7298dcbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-里氏替换原则(LSP)</title>
    <link href="http://yoursite.com/2016/04/23/ood-lsp/"/>
    <id>http://yoursite.com/2016/04/23/ood-lsp/</id>
    <published>2016-04-23T03:02:00.000Z</published>
    <updated>2017-12-13T10:56:53.248Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1552955-214b1eec4a45c991.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="探索神秘未知"></p><blockquote><p>主目录：<a href="http://www.jianshu.com/p/fab09d064846" target="_blank" rel="noopener">一个面向对象设计(OOD)的学习思路设计</a></p></blockquote><p>引子：</p><blockquote><p>有一只小麻雀在大平原上，飞呀飞～。飞累了，看见前方一个大鸟…<br><code>小麻雀：</code>大鸟兄你好，本鸟叫麻雀！请问您怎么称呼？<br><code>大鸵鸟：</code>原来是麻雀小弟呀！本鸟叫鸵鸟！<br><code>小麻雀：</code>鸵鸟哥耶！小弟飞的累的不行！让兄弟在您雄伟的身躯上歇歇脚么？<br><code>大鸵鸟：</code>不行！本鸟还走累了呢！那我咋办？<br><code>小麻雀：</code>你飞呗！难道我还拖着你不成？<br><code>大鸵鸟：</code>前提是我要是能飞的起来呀！<br><code>小麻雀：</code>开什么玩笑！咱们都是鸟，你飞不起来？“飞”是咋们鸟类的特征，想到飞就想到咋们鸟～。</p></blockquote><hr><p><img src="http://upload-images.jianshu.io/upload_images/1552955-d1c7423eabc9ec9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LSP.png"></p><h2 id="1-何为LSP？"><a href="#1-何为LSP？" class="headerlink" title="1. 何为LSP？"></a>1. 何为LSP？</h2><ul><li>全称：里氏替换原则（Liskov Substitution principle）</li><li>定义：<code>派生类（子类）</code>对象能够替换其<code>基类（超类）</code>对象被使用[^foot1]<ul><li>Barbara Liskov对LSP定义是这么说的：若对每个类型<code>S</code>的对象<code>q1</code>，都存在一个类型<code>T</code>的对象<code>q2</code>，使得在所有对<code>T</code>编写的程序<code>P</code>中，用<code>q1</code>替换<code>q2</code>后，程序<code>P</code>行为功能不变，则<code>S</code>是<code>T</code>的子类型。<br>听着有些绕，我将它画一个类图便于理解：<br><img src="http://upload-images.jianshu.io/upload_images/1552955-dce323ccc6ad7d19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LSP定义理解dsf在类P中将T的对象q2，换成S的对象q1行为功能不变则S继承T，得如图所示的关系"></li></ul></li></ul><h2 id="2-何为L？何为S？"><a href="#2-何为L？何为S？" class="headerlink" title="2. 何为L？何为S？"></a>2. 何为L？何为S？</h2><p><strong>L:</strong><code>芭芭拉·利斯科夫（Barbara Liskov）</code>因为提出这个原则的女士姓里<br><strong>S:</strong><code>替换（Substitution）</code>父类能被子类<strong>替换</strong></p><ul><li><code>替换</code>如上述定义所述，子类替换父类后不会影响其行为和功能。</li></ul><h2 id="3-为何要有LSP？"><a href="#3-为何要有LSP？" class="headerlink" title="3. 为何要有LSP？"></a>3. 为何要有LSP？</h2><blockquote><p>①首先谈谈要是违反LSP</p></blockquote><ul><li>来张违反LSP的类图</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1552955-2abece71be1dde9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="违反LSP.png"></p><ul><li><p>分析</p><ul><li>现在我说天上飞着一只鸟。。。</li><li>子类麻雀替换父类：天上飞着一只麻雀。</li><li>子类鸵鸟替换父类：天上飞着一只鸵鸟。</li></ul></li><li><p>由上因为违反了里氏替代原则，导致整个设计存在严重逻辑错误。</p></li><li>由于违反了里氏替代原则，间接的违反了OCP原则[^foot2]。因为明显可以看出飞翔对于鸵鸟因该是封闭的。</li></ul><blockquote><p>②再来看一些代码（LSP的违反导致OCP的违反）</p></blockquote><ul><li>代码如下</li></ul><p><code>有三个类：鸟、鸵鸟、麻雀。鸵鸟和麻雀都有要去北京的方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IS_OSTRICH = <span class="number">1</span>;<span class="comment">//是鸵鸟</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IS_SPARROW = <span class="number">2</span>;<span class="comment">//是麻雀 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(<span class="keyword">int</span> isType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isType = isType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸵鸟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ostrich</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Bird.IS_OSTRICH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toBeiJing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"跑着去北京！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 麻雀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sparrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Bird.IS_SPARROW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toBeiJing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"飞着去北京！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>现在有一个方法birdLetGo，统一处理去北京的行为</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">birdLetGo</span><span class="params">(Bird bird)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bird.isType == Bird.IS_OSTRICH) &#123;</span><br><span class="line">        Ostrich ostrich = (Ostrich) bird;</span><br><span class="line">        ostrich.toBeiJing();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bird.isType == Bird.IS_SPARROW) &#123;</span><br><span class="line">        Sparrow sparrow = (Sparrow) bird;</span><br><span class="line">        sparrow.toBeiJing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分析<br>大家可以看出，birdLetGo方法明显的违反了开闭原则[^foot2]，它必须要知道所有Bird的子类。并且每次创建一个Bird子类就得修改它一次。</li></ul><blockquote><p>③结论</p></blockquote><p>由上面的分析可以大致的了解了遵守LSP的重要性了吧！</p><ul><li>如果不遵守，导致逻辑设计缺陷</li><li>如果不遵守，导致同时违反开闭原则</li><li>单个模型，孤立时并不具有设计意义。当多个模型出现时，抽象提取共同特征作为父类（基类），使之任何子类能替代于父类</li><li>如果试图预测所有假设，我们所得到的结果可能会充满很多不必要的复杂性。通常最好的办法是只预测那些最明显的LSP的违反状态，直到设计开始出现脆弱的状态，才去处理它们。[^foot3]</li></ul><h2 id="4-基于契约设计能支持LSP？"><a href="#4-基于契约设计能支持LSP？" class="headerlink" title="4. 基于契约设计能支持LSP？"></a>4. 基于契约设计能支持LSP？</h2><ul><li>什么是契约设计？<ul><li>通过为每个方法声明的前置条件和后置条件[^foot4]来指定的。要是使一个方法得以执行，前置条件必须要为真。执行完毕后，该方法要保证后置条件为真。</li></ul></li><li>一个例子</li></ul><blockquote><p>几个继承关系的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String food;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.food = food;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸟</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸵鸟</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ostrich</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"草"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//麻雀</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sparrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"虫子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在动物园对象中调用吃的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃早餐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">eatBreakfast</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animal.getFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><ul><li>这里的满足前置条件就是调用方需满足能接受String这个食物类型</li><li>满足后置条件可以看做是参数和返回类型</li><li>前置条件不能更强，只能更弱，比如可以这样调用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object food = <span class="keyword">new</span> Zoo().eatBreakfast(<span class="keyword">new</span> Animal(<span class="string">"肉"</span>));</span><br></pre></td></tr></table></figure><ul><li>后置条件可以更强，比如可以这样写：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String food = <span class="keyword">new</span> Zoo().eatBreakfast(<span class="keyword">new</span> Ostrich());</span><br></pre></td></tr></table></figure><ul><li>这样我们就可以说是前置条件和后置条件就都得以满足</li></ul><h2 id="5-结论总结"><a href="#5-结论总结" class="headerlink" title="5. 结论总结"></a>5. 结论总结</h2><ul><li><p>如果LSP有效运用，程序会具有更多的可维护性、可重用性和健壮性</p></li><li><p>LSP是使OCP成为可能的主要原则之一</p></li><li><p>正是因为子类的可替换性，才使得父类模块无须修改的情况就得以扩展</p></li></ul><h2 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6. 参考文章"></a>6. 参考文章</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">里氏替换原则-维基百科</a></li><li><a href="http://www.jianshu.com/p/0fe6ab955842" target="_blank" rel="noopener">OCP</a></li><li>敏捷软件开发  第10章  里氏替换原则(LSP)</li><li><a href="http://blog.csdn.net/q345852047/article/details/7955792" target="_blank" rel="noopener">前置条件和后置条件是什么？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1552955-214b1eec4a45c991.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-开闭原则(OCP)</title>
    <link href="http://yoursite.com/2016/04/12/ood-ocp/"/>
    <id>http://yoursite.com/2016/04/12/ood-ocp/</id>
    <published>2016-04-12T00:43:00.000Z</published>
    <updated>2017-12-11T13:18:31.398Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1552955-75dbeefc5b02750c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="楼层建的更高！走的更远！"><br>主目录：<a href="http://www.jianshu.com/p/fab09d064846" target="_blank" rel="noopener">一个面向对象设计(OOD)的学习思路设计</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1552955-0cb6f8191b2737c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OCP.png"></p><h2 id="啥是OCP？"><a href="#啥是OCP？" class="headerlink" title="啥是OCP？"></a>啥是OCP？</h2><ul><li>全称：开闭原则(Open-Closed Principle)[^foot2]</li><li>定义：软件实体（类、模块、函数等等）应该是可以扩展的</li></ul><h2 id="开-O-什么？关-C-什么？"><a href="#开-O-什么？关-C-什么？" class="headerlink" title="开(O)什么？关(C)什么？"></a>开(O)什么？关(C)什么？</h2><blockquote><p>开(O)：对于扩展是开放的</p></blockquote><p>对于某个模块的功能是可以进行扩展的。当需求改变，我们只需对其进行扩展即可满足于新的需求。</p><p>比如说：“砖”，我们不需要改变它的形态与结构，就可以根据需求来建高楼、建围墙、建厕所、建这样建那样(๑乛乛๑)。 - - 所以可以认为“砖”对于扩展的需求是开放的。又比如说电脑主板对于cpu、内存等是可扩展的。 </p><blockquote><p>关(C)：对于更改是封闭的</p></blockquote><p>对模块进行扩展时，不必改动模块的源代码或者二进制代码。如果说这个模块已经明确的定义、稳定、有效的被多个其他模块使用，那么关闭这个模块，提供接口供其它模块使用。</p><p>比如我们的电脑由“CPU”、“主板”、“内存”等构成，它们并不是紧紧耦合做成一块的。想想，要是紧紧的长一块，什么CUP、什么内存密密麻麻的小线、触角、身体的一部分和主板一体化。那么现在我的一个内存坏了，我表示我是渣渣得重新买一台电脑了，能内存修好的高手因该不多吧！就算内存能修好CPU又多少人能修好啊！但还好它们都是分离的，接口都是规定好了的，我需要买一个内存插上就好了。我们不需要知道知道内存里面、CPU里面是啥构造。要是坏了时，要是升级时，只需要更换这个模块而不需要更换整个硬件系统或修理这个硬件系统里的某个小模块。- - 原谅我废话了一大圈，就是想表达个封闭内部，能减少bug，方便扩展，能更好的分工合作（做主板的就做主板）</p><h2 id="为何要提倡OCP？"><a href="#为何要提倡OCP？" class="headerlink" title="为何要提倡OCP？"></a>为何要提倡OCP？</h2><p>其实在上面大家因该已经明白一些了，“开放”是为了更好的扩展，适应更多的相应需求。“关闭”是为了降低耦合，降低了维护难度和制作成本。两者可以说本是互为一体，而又被分开说成两样。因为关闭时得留出口开放本就是处理的一个模块同时进行。</p><blockquote><p>在许多方面，OCP的面向对象的核心所在<br>注意： </p><ul><li>我们因该对频繁出现的变化进行封闭开放处理也就是进行抽象</li><li>拒绝不成熟的抽象和抽象本身一样重要</li></ul></blockquote><h2 id="比如说？-实际例子"><a href="#比如说？-实际例子" class="headerlink" title="比如说？(实际例子)"></a>比如说？(实际例子)</h2><ul><li><p>违反OCP<br><img src="http://upload-images.jianshu.io/upload_images/1552955-d7cbc0df8b002c01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="既不开放又不封闭.png"></p><p>上图展示了一个没有遵循OCP的设计例子，电灯类和电源类是两个具体的类。要让电灯发光，需要电源这个属性。如果此时要将电灯接在另一个电源上面，就必须更换成另一个电源的属性（将电灯连线与另一个电源）。</p></li><li><p>遵循OCP<br><img src="http://upload-images.jianshu.io/upload_images/1552955-075510555b25af7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="既开放又封闭.png"></p><p>上图展示了一个解决上面问题的OCP设计，灯座是一个拥有抽象成员的接口（比如说与电源的连线）。电灯类使用这个抽象类（有插座的成员属性），而电灯的对象使用的是灯座接口的实现类电源。如果我们需要将电灯接到另一个电源，只需要接到另一插座。如果要更换电源，那么将插座接到另一个电源。这样双方的改变，被插座接口隔离而不会影响到具体的类。（我理解为隔离了变化的扩散）</p></li></ul><table><thead><tr><th>注意</th></tr></thead><tbody><tr><td>只有当我们预测到这种变化，那么就可以设计一个抽象来进行隔离</td></tr><tr><td>无论模块是多么的封闭都会存在一些无法对之封闭的变化（比如说我现在要让灯泡闪红光），没有对所有的情况都贴切的模型</td></tr><tr><td>设计人员必须对设计的模块应该对哪种变化封闭做出选择</td></tr></tbody></table><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><ul><li><p>总的来说开闭原则也如锦上添花，在原有锦织物上增添鲜花，让美的东西更美。</p></li><li><p>在许多方面，OCP都是面向对象的核心所在。遵循这个原则可给面向对象技术带来巨大的好处（灵活性、可重用性以及可维护性）。然而，并不是说只要使用一种面向对象语言就是遵循了这个原则。</p></li><li><p>对于应用程序中的每个部分都肆意地进行抽象同样不是一个好主意。正确地做法是开发人员应当仅仅对程序中频繁变化的那些部分做出抽象，拒绝不成熟的抽象和抽象本身一样重要。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2></li><li>《敏捷软件开发：原则、模式与实践》第9章  开放-封闭原则</li><li><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">维基百科-开闭原则</a></li><li>《面向对象软件构造》第二版 中英对照 第3章 3.3五项原则</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1552955-75dbeefc5b02750c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-单一职责原则(SRP)</title>
    <link href="http://yoursite.com/2016/04/07/ood-srp/"/>
    <id>http://yoursite.com/2016/04/07/ood-srp/</id>
    <published>2016-04-07T15:55:00.000Z</published>
    <updated>2017-12-10T14:06:15.768Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1552955-f8fcbe790d7f8cd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="只有佛自己才应该担负起公布玄妙秘密的职责"><br>主目录：<a href="http://www.jianshu.com/p/fab09d064846" target="_blank" rel="noopener">一个面向对象设计(OOD)的学习思路设计</a></p><p><img src="http://upload-images.jianshu.io/upload_images/1552955-0fc1b3477d1f956e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SRP.png"></p><h2 id="何为SRP？"><a href="#何为SRP？" class="headerlink" title="何为SRP？"></a>何为SRP？</h2><ul><li>全称：单一职责原则(Single Responsibility Principle)</li><li>定义:该原则规定每个类都应该只有一个单一的功能，并且该功能应该由这个类完全封装起来</li></ul><h2 id="何为职责-R"><a href="#何为职责-R" class="headerlink" title="何为职责(R)?"></a>何为职责(R)?</h2><blockquote><p>既然是单一“职责”，那么职责即为被规定的因素。</p></blockquote><ul><li><p>概括：”功能(职责)”为改变的原因，一个类或者模块应该有且只有一个改变的原因。</p></li><li><p>如下图农活责任所示，耕菜地和耕水田即为牛和耕地机的职责，即为这个对象存在的原因（下面将来讨论这个关系图）。</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/1552955-aae094029d977f3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="农活责任"></p><h2 id="为何要提倡SRP？"><a href="#为何要提倡SRP？" class="headerlink" title="为何要提倡SRP？"></a>为何要提倡SRP？</h2><blockquote><p>其思想简单，但却难以掌握。就是一个模块，一个类只能干一件事情。</p></blockquote><p>看上图农活责任，晃眼一看我们会决定这是对的！但仔细一分析农活接口其中包含的耕菜地和耕水田两个责任。</p><ul><li><p>牛耕水田，但它耕不动菜地，只能调用耕水田的接口，因此耕菜地的接口对于牛来说就是多余的。但耕地机即能耕菜地，也能耕水田。这就像是牛本来是耕田的，我们却说它还能去耕菜地，耕地机能做的事情，老牛表示无能为力！</p></li><li><p>这样违反了SRP，导致了严重的问题。因为我们给牛保留了一个多余而不会完成的责任，这让我们每次提到牛不仅说它能耕水田还能耕菜地。这让我们对牛的描述更加的复杂而没有准确性。程序也时这样，当没用的责任增加，就会让相应的类都变得臃肿腐臭。当我们要添加牛要耕后要吃草，耕地机耕地后要加油时，继续往农活接口中添加，这样使得农活什么都能干，使得后期修改维护等难度太大。</p></li><li>如果不分离责任，在不断变化和添加的需求面前，责任之间耦合度强导致我们的程序更加的脆弱。<h2 id="比如说？（实际举例说明）"><a href="#比如说？（实际举例说明）" class="headerlink" title="比如说？（实际举例说明）"></a>比如说？（实际举例说明）</h2></li><li>例子一<br><img src="http://upload-images.jianshu.io/upload_images/1552955-75ef45d419f1dce5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="农活责任(改).png"></li></ul><p>如上图将两个责任分离，牛实现耕水田的时候，不会知道也不会去在意耕菜地，分离了责任，该做的才做，不做的不用管。</p><ul><li>例子二（来自敏捷软件开发第8章）<a href="结尾">^foot</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//调制解调器</span><br><span class="line">interface Modem &#123;</span><br><span class="line">    void dial(String pno);//拨号</span><br><span class="line">    void hangup();//挂断</span><br><span class="line">    void send(char c);//发送消息</span><br><span class="line">    void recv();//接收消息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这个接口中显示了两个职责，一个是连接管理，一个是数据通信。dial和hangup函数进行调制解调器的连接处理，而send和recv函数进行数据的通信。</p></blockquote><p>这两个责任应该被分开吗？这决定于应用程序以何种方式变化。如果应用程序的变化会影响连接函数的部署，那么这个设计就具有僵化性的臭味。因为调用send和recv的类必须要重新编译连接处理函数，部署的次数常常会超过我们希望的次数。在这种情况下，这两个职责应该被分离。如图下图所示，这样避免了客户应用程序和这两个职责耦合在一起。</p><p><img src="http://upload-images.jianshu.io/upload_images/1552955-9b698d76a5b9cabe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分离的Modem接口"></p><table><thead><tr><th style="text-align:center">注意</th></tr></thead><tbody><tr><td style="text-align:center">另一方面，如果应用程序的变化方式总是会导致两个职责同时变化，那么就不必分离他们，分离后会导致不必要的复杂性。</td></tr><tr><td style="text-align:center">此外还有个推论：变化的曲线是仅当变化实际发生时才具有真正的意义。如果没有征兆，那么去应用SRP，或者其他原则都是不明智的。</td></tr></tbody></table><h2 id="结论总结"><a href="#结论总结" class="headerlink" title="结论总结"></a>结论总结</h2><ul><li>SRP为最简单的原则，也是最难运用好的原则</li><li>软件设计真正要做的其实就是发现责任并把那些责任分离</li><li>其他原则都将能追溯到SRP</li><li>大道至简，只有不断在代码中运用才能真正体会其中的奥妙</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[1]《敏捷软件开发：原则、模式与实践》第8章 单一职责原则<br>[2]<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">维基百科</a><br>[3]<a href="http://www.oschina.net/translate/how-i-explained-ood-to-my-wife?lang=chs&amp;page=1#" target="_blank" rel="noopener">我是怎样向妻子解释OOD的</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1552955-f8fcbe790d7f8cd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Android studio</title>
    <link href="http://yoursite.com/2016/03/27/install-android-studio-linux/"/>
    <id>http://yoursite.com/2016/03/27/install-android-studio-linux/</id>
    <published>2016-03-26T23:13:00.000Z</published>
    <updated>2017-12-10T14:12:39.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1.安装jdk"></a>1.安装jdk</h2><h3 id="①由于linux自带openjdk因此我就将openjdk卸载了装jdk1-7"><a href="#①由于linux自带openjdk因此我就将openjdk卸载了装jdk1-7" class="headerlink" title="①由于linux自带openjdk因此我就将openjdk卸载了装jdk1.7"></a>①由于linux自带openjdk因此我就将openjdk卸载了装jdk1.7</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove openjdk-*</span><br></pre></td></tr></table></figure><h3 id="②下载jdk1-7"><a href="#②下载jdk1-7" class="headerlink" title="②下载jdk1.7"></a>②下载jdk1.7</h3><p><a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">jdk1.7下载链接</a><br>我下载的文件为：jdk-7u79-linux-x64.tar.gz</p><h3 id="③解压"><a href="#③解压" class="headerlink" title="③解压"></a>③解压</h3><ul><li><p>创建/usr/java目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /usr/java</span><br></pre></td></tr></table></figure></li><li><p>将当前目录下的jdk压缩包移/usr/java</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/下载 $ sudo mv jdk-7u79-linux-x64.tar.gz /usr/java</span><br></pre></td></tr></table></figure></li><li><p>解压到/usr/java，删除压缩包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/java</span><br><span class="line">$ sudo tar -zxvf /usr/java/jdk-7u79-linux-x64.tar.gz</span><br><span class="line">$ sudo rm jdk-7u79-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h3 id="④配置jdk环境变量"><a href="#④配置jdk环境变量" class="headerlink" title="④配置jdk环境变量"></a>④配置jdk环境变量</h3><ul><li><p>打开环境变量配置文件profile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gedit /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>在文本最后添加如下信息，注意改成自己的jdk版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>保存、重启、java -version验证是否配置成功</p></li></ul><h2 id="2-安装android-studio"><a href="#2-安装android-studio" class="headerlink" title="2.安装android studio"></a>2.安装android studio</h2><h3 id="①下载linux-android-studio"><a href="#①下载linux-android-studio" class="headerlink" title="①下载linux android studio"></a>①下载linux android studio</h3><p><a href="http://developer.android.com/intl/zh-cn/sdk/index.html" target="_blank" rel="noopener">官网下载</a></p><h3 id="②解压"><a href="#②解压" class="headerlink" title="②解压"></a>②解压</h3><p>将下载好的android studio压缩包移动到/usr/local目录，然后unzip命令解压<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip android-studio-ide-141.2456560-linux.zip</span><br></pre></td></tr></table></figure></p><h3 id="③运行"><a href="#③运行" class="headerlink" title="③运行"></a>③运行</h3><p>进入android-studio/bin,然后运行studio.sh<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> android-studio/bin</span><br><span class="line">$ sh studio.sh</span><br></pre></td></tr></table></figure></p><h3 id="④因为在linux-mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！"><a href="#④因为在linux-mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！" class="headerlink" title="④因为在linux mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！"></a>④因为在linux mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！</h3><h2 id="3-安装Genymotion"><a href="#3-安装Genymotion" class="headerlink" title="3.安装Genymotion"></a>3.安装Genymotion</h2><blockquote><p>Genymotion被称为是速度最快的Android模拟器可不是盖的，手机也没有两，就打算安装一个模拟器。</p></blockquote><h3 id="Genymotion官网"><a href="#Genymotion官网" class="headerlink" title="Genymotion官网"></a><a href="https://www.genymotion.com/" target="_blank" rel="noopener">Genymotion官网</a></h3><p>注册一个号，登录了就能下载免费版本的虚拟机。<a href="http://files2.genymotion.com/genymotion/genymotion-2.6.0/genymotion-2.6.0-linux_x64.bin" target="_blank" rel="noopener">我下载版本的连接地址</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>根据这篇教程<a href="http://www.lihuan.com.cn/2015/02/15/521.html" target="_blank" rel="noopener">Ubuntu下安装Genymotion安卓模拟器 Linux教程</a></p><ul><li>将genymotion-2.6.0-ubuntu15_x64.bin移动到用户目录<code>$ mv genymotion-2.6.0-ubuntu15_x64.bin /home/jiana</code></li><li>需要安装一个软件virtualbox才能使用Gecymotion,命令:<code>sudo apt-get install virtualbox</code></li><li><p>进入/home/jiana运行genymotion文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/jiana/</span><br><span class="line">$ chmod +x genymotion-2.6.0-ubuntu15_x64.bin </span><br><span class="line">$ ./genymotion-2.6.0-ubuntu15_x64.bin</span><br></pre></td></tr></table></figure></li><li><p>完成后进入该用户目录下的genymotion目录，双击运行genymotion。好了，接下来就可以下载genymotion虚拟机来体验快感了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装jdk&quot;&gt;&lt;a href=&quot;#1-安装jdk&quot; class=&quot;headerlink&quot; title=&quot;1.安装jdk&quot;&gt;&lt;/a&gt;1.安装jdk&lt;/h2&gt;&lt;h3 id=&quot;①由于linux自带openjdk因此我就将openjdk卸载了装jdk1-7&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
