<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐佳吉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xujiaji.com/"/>
  <updated>2019-04-08T06:56:12.369Z</updated>
  <id>https://blog.xujiaji.com/</id>
  
  <author>
    <name>xujiaji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VBO）</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven/index.html</id>
    <published>2019-03-09T08:49:10.000Z</published>
    <updated>2019-04-08T06:56:12.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：Android Lesson Seven: An Introduction to Vertex Buffer Objects (VBOs)<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-seven-an-introduction-to-vertex-buffer-objects-vbos/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-seven-an-introduction-to-vertex-buffer-objects-vbos/</a><br><a id="more"></a></p><hr><h1 id="介绍Vertex-Buffer-Objects（顶点缓冲区对象，简称：VBO）">介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VBO）<a href="post/Learn-OpenGL-Lesson-Seven#介绍Vertex-Buffer-Objects（顶点缓冲区对象，简称：VBO）"></a></h1><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>在这节课中，我们将介绍如何定义和如何去使用<br>顶点缓冲对象（VBO）。下面是我们要讲到的几点：<br><br>1.怎样用顶点缓冲对象定义和渲染<br>2.单个缓冲区、所有数据打包进去、多个缓冲区之间的区别<br>3.问题和陷阱我们如何取处理它们</td><td style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190309170313.png" alt="screenshot"></td></tr></tbody></table></div></div><h2 id="什么是顶点缓冲区对象？为什么使用它们？">什么是顶点缓冲区对象？为什么使用它们？<a href="post/Learn-OpenGL-Lesson-Seven#什么是顶点缓冲区对象？为什么使用它们？"></a></h2><p>到目前为止，我们所有的课程都是将对象数据存储在客户端内存中，只有在渲染时将其传输到GPU中。没有大量数据传输时，这很好，但随着我们的场景越来越复杂，有更多的物体和三角形，这会给GPU和内存增加额外的成本。</p><p>我们能做些什么呢？我们可以使用顶点缓冲对象，而不是每帧从客户端内存传输顶点信息，信息将被传输一次，然后渲染器将从该图形存储器缓存中得到数据。</p><h2 id="前提条件">前提条件<a href="post/Learn-OpenGL-Lesson-Seven#前提条件"></a></h2><p>请阅读<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a>介绍如何从客户端的内存上传顶点数据。了解OpenGL ES如何与顶点数组一起工作对于理解本课至关重要。</p><h2 id="更详细的了解客户端缓冲区">更详细的了解客户端缓冲区<a href="post/Learn-OpenGL-Lesson-Seven#更详细的了解客户端缓冲区"></a></h2><p>一但了解了如何使用客户端内存进行渲染，切换到使用VBO实际上并不太难。其主要的不同在于添加了一个上传数据到图形内存的额外步骤，以及渲染时添加了绑定这个缓冲区的额外调用。</p><p>本节课将使用四种不同的模式：</p><ol><li>客户端，单独的缓冲区</li><li>客户端，打包的缓冲</li><li>顶点缓冲对象，单独的缓冲区</li><li>顶点缓冲对象，打包的缓冲</li></ol><p>无论我们是否使用顶点缓冲对象，我们都需要先将我们的数据存储在客户端本地缓冲区。会想到<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">第一课</a>中OpenGL ES 是一个本地系统库，而java是运行在Android上的一个虚拟机中。如何去桥接这个距离？我们需要使用一组特殊的缓冲区类来在本地堆上分配内存，并使使其供OpenGL访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 数组</span></span><br><span class="line"><span class="keyword">float</span>[] cubePositions;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 浮点缓冲区</span></span><br><span class="line"><span class="keyword">final</span> FloatBuffer cubePositionsBuffer;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 在本地堆上直接分配一块内存</span></span><br><span class="line"><span class="comment">// 字节大小为cubePositions的长度乘以每个浮点数的字节大小</span></span><br><span class="line"><span class="comment">// 每个float的字节大小为4，因为float是32位或4字节</span></span><br><span class="line">cubePositionsBuffer = ByteBuffer.allocateDirect(cubePositions.length * BYTES_PRE_FLOAT)</span><br><span class="line"><span class="comment">// 浮点会以大端（big-endian）或小段（little-endian）的顺序排列</span></span><br><span class="line"><span class="comment">// 我想让其同本地平台相同的排列</span></span><br><span class="line">.order(ByteOrder.nativeOrder())</span><br><span class="line"><span class="comment">// 在这个字节缓冲区上给我们一个浮点视角</span></span><br><span class="line">.asFloatBuffer();</span><br></pre></td></tr></table></figure><p>将Java堆上数据转换到本地堆上，就是两方法调用的事情：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将java堆上的数据拷贝到本地堆</span></span><br><span class="line">cubePositionsBuffer.put(cubePositions)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置这个缓冲区开始的缓冲位置</span></span><br><span class="line">.position(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>缓冲位置的目的是什么？通常，Java没有为我们提供一种在内存中使用<a href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)" target="_blank" rel="noopener">指针</a>，任意指定位置的方法。然而，设置缓冲区的位置在功能上等同于更改指向内存块指针的值。通过改变指针的位置，我们可以将缓冲区中任意的内存位置传递给OpenGL调用。当我们使用打包的缓冲作业时，这将派上用场。</p><p>一但数据存放到本地堆上，我们就不需要长时间持有float[]数组了，我们可以让垃圾回收器清理它。</p><p>使用客户端缓冲区进行渲染非常简单，我们仅需要启动对应属性的顶点素组，并将指针传递给我们的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入位置信息</span></span><br><span class="line">GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br><span class="line">GLES20.glVertexAttriPointer(mPositionHandle, POSITION_DATA_SIZE,</span><br><span class="line">    GLES20.GL_FLOAT, <span class="keyword">false</span>, <span class="number">0</span>, mCubePositions)</span><br></pre></td></tr></table></figure><p><a href="https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glVertexAttribPointer.xml" target="_blank" rel="noopener">glVertexAttriPointer</a>参数说明：</p><ul><li><em>mPositionHandle：</em> 我们着色器程序的位置属性索引</li><li><em>POSITION_DATA_SIZE：</em> 定义这个属性需要多少个float元素</li><li><em>GL_FLOAT：</em> 每个元素的类型</li><li><em>false：</em> 定点数据因该标准化吗？由于我们使用的是浮点数据，因此不适用。</li><li><em>0：</em> 跨度，设置0，以为着应安顺序读取。第一课中设置为7，表示每次读取跨度7个位置</li><li><em>mCubePositions：</em> 指向缓冲区的的指针，包含所有位置数据</li></ul><h2 id="使用打包缓冲区">使用打包缓冲区<a href="post/Learn-OpenGL-Lesson-Seven#使用打包缓冲区"></a></h2><p>使用打包缓冲区是非常相似的，替换了每个位置、法线等的缓冲区，现在一个缓冲区将包含所有这些数据。不同点看下面：</p><blockquote><p>使用单缓冲区</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">positions = X,Y,Z,X,Y,Z,X,Y,Z,...</span><br><span class="line">colors = R,G,B,A,R,G,B,A,...</span><br><span class="line">textureCoordinates = S,T,S,T,S,T...</span><br></pre></td></tr></table></figure><blockquote><p>使用打包缓冲区</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer = X,Y,Z,R,G,B,A,S,T...</span><br></pre></td></tr></table></figure><p>使用打包缓冲区的好处是它将会使GPU更高效的渲染，因为渲染三角形所需的所有信息都位于内存同一块地方。缺点是，如果我们使用动态数据，更新可能会更困难，更慢。</p><p>当我们使用打包缓冲区时，我们需要以下几种方式更改渲染调用。首先，我们需要告诉OpenGL<code>跨度（stride）</code> ，定义一个顶点的字节数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> stride = (POSITION_DATA_SIZE + NORMAL_DATA_SIZE + TEXTURE_COORDINATE_DATA_SIZE)</span><br><span class="line">    * BYTES_PER_FLOAT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入位置信息</span></span><br><span class="line">mCubeBuffer.position(<span class="number">0</span>);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br><span class="line">GLES20.glVertexAttribPointer(mPositionHandle, POSITION_DATA_SIZE,</span><br><span class="line">    GLES20.GL_FLOAT, <span class="keyword">false</span>, stride, mCubeBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入法线信息</span></span><br><span class="line">mCubeBuffer.position(POSITION_DATA_SIZE);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mNormalHandle);</span><br><span class="line">GLES20.glVertexAttribPointer(mNormalHandle, NORMAL_DATA_SIZE,</span><br><span class="line">    GLES20.GL_FLOAT, <span class="keyword">false</span>, stride, mCubeBuffer);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个跨度告诉OpenGL ES下一个顶点的同样的属性要再跨多远才能找到。例如：如果元素0是第一个顶点的开始位置，并且这里每个顶点有8个元素，然后这个跨度将是8个元素，也就是32个字节。下一个顶点的位置将找到第8个元素，下下个顶点的位置将找到第16个元素，以此类推。</p><p>请记住，传递给<code>glVertexAttriPointer</code>的跨度单位是字节，而不是元素，因此请记住进行该转换。</p><p>注意，当我们从指定位置切换到指定法线时，我们要更改缓冲区的其实位置。这是我们之前提到的指针算法，这是我们在使用OpengGL ES时用Java做的方式。我们仍然使用同一个缓冲区<code>mCubeBuffer</code>，但是我们告诉OpenGL从位置数据后的第一个元素开始读取法线信息。我们也告诉OpenGL下一个法线要跨越8个元素（也可以说是32个字节）开始。</p><h2 id="Dalvik和本地堆上的内存">Dalvik和本地堆上的内存<a href="post/Learn-OpenGL-Lesson-Seven#Dalvik和本地堆上的内存"></a></h2><p>如果你在本地堆上分配大量内存把并将其释放，您迟早会遇到心爱的<code>OutOfMemoryError</code> ，背后有几个原因：</p><ol><li>您可能认为通过让引用超出范围而自动释放了内存，但是本地内存似乎需要一些额外的GC周期才能完全清理，如果没有足够可用的内存并且尚未释放本地内存，Dalvik将抛出异常。</li><li>本地堆可能会<a href="https://stackoverflow.com/questions/6892676/android-bitmap-limit-preventing-java-lang-outofmemory" target="_blank" rel="noopener">碎片化</a>，调用<code>allocateDirect()</code>将会莫名其妙失败，尽管似乎有足够的内存可用。有时它有助于进行较小的分配，释放它，然后再次尝试更大的分配。</li></ol><p>如何能避免这些问题？除了希望Google在未来的版本中改进Dalvik的行为之外，并不多。或者通过本地代码进行分配或预先分配一大块内存来自行管理堆，并根据此分离缓冲区。</p><blockquote><p>注意：这些信息最初写于2012年初，现在Android使用了一个名为ART的不同运行时，它可能在相同程度上不会遇到这些问题。</p></blockquote><h2 id="移动到顶点缓冲区对象">移动到顶点缓冲区对象<a href="post/Learn-OpenGL-Lesson-Seven#移动到顶点缓冲区对象"></a></h2><p>现在我们已经回顾了使用客户端缓冲区，让我们继续讨论顶点缓冲区对象！首先，我们需要回顾几个非常重要的问题：</p><h3 id="1-缓冲区必须创建在一个有效的OpenGL上下文中">1. 缓冲区必须创建在一个有效的OpenGL上下文中<a href="post/Learn-OpenGL-Lesson-Seven#1-缓冲区必须创建在一个有效的OpenGL上下文中"></a></h3><p>这似乎是一个明显的观点，但是它仅仅提醒你必须等到<code>onSurfaceCreated()</code>执行，并且你必须注意OpenGL ES调用是在GL线程上完成的。<br>看这个文档：<a href="https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html" target="_blank" rel="noopener">iOS OpenGL ES编程指南</a>，它可能是为iOS写的，但是OpenGL ES在Android的行为和这相同。</p><h3 id="2-顶点缓冲区对象使用不当会导致图形驱动程序崩溃">2. 顶点缓冲区对象使用不当会导致图形驱动程序崩溃<a href="post/Learn-OpenGL-Lesson-Seven#2-顶点缓冲区对象使用不当会导致图形驱动程序崩溃"></a></h3><p>当你使用顶点缓冲对象时，需要注意传递的数据。不当的值将会导致OpenGL ES系统库或图形驱动库本地崩溃。在我的Nexus S上，一些游戏完全卡在我的手机上或导致手机重启，因为图形驱动因为他们的指令崩溃。并非所有的崩溃都会锁定您的设备，但至少您不会看到“此应用已停止工作”的对话框。您的活动将在没有警告的情况下重新启动，您将获得唯一的信息可能是日志中的本地调试跟踪。</p><h2 id="上传顶点数据到GPU">上传顶点数据到GPU<a href="post/Learn-OpenGL-Lesson-Seven#上传顶点数据到GPU"></a></h2><p>要上传数据到GPU，我们需要像以前一样创建客户端缓冲区的相同步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">cubePositionsBuffer = ByteBuffer.allocateDirect(cubePositions.length * BYTES_PER_FLOAT)</span><br><span class="line">.order(ByteOrder.nativeOrder()).asFloatBuffer();</span><br><span class="line">cubePositionsBuffer.put(cubePositions).position(<span class="number">0</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一旦我们有了客户端缓冲区，我们就可以创建一个顶点缓冲区对象，并使用一下指令将数据从客户端内存上传到GPU：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先，我们要尽可能的申请更多的缓冲区</span></span><br><span class="line"><span class="comment">// 这将为我们提供这些缓冲区的handle</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> buffers[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">GLES20.glGenBuffers(<span class="number">3</span>, buffers, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定这个缓冲区，将来的指令将单独影响此缓冲区</span></span><br><span class="line">GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, buffers[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端内存中的数据转移到缓冲区</span></span><br><span class="line"><span class="comment">// 我们能在此次调动后释放客户端内存</span></span><br><span class="line">GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER, cubePositionsBuffer.capacity() * BYTES_PER_FLOAT,</span><br><span class="line">    cubePositionsBuffer, GLES20.GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重要提醒：完成缓冲后，从缓冲区取消绑定</span></span><br><span class="line">GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>一旦数据上传到了OpenGL ES，我们就可以释放这个客户端内存，因为我们不需要再继续保留它。这是<a href="http://www.learnopengles.com/android-lesson-seven-an-introduction-to-vertex-buffer-objects-vbos/GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,%200);" target="_blank" rel="noopener">glBufferData</a>的解释：</p><ul><li><em>GL_ARRAY_BUFFER：</em> 这个缓冲区包含顶点数据数组</li><li><em>cubePositionsBuffer.capacity() </em> BYTES_PER_FLOAT：* 这个缓冲区因该包含的字节数</li><li><em>cubePositionsBuffer：</em> 将要拷贝到这个顶点缓冲区对象的源</li><li><em>GL_STATIC_DRAW：</em> 这个缓冲区不会动态更新</li></ul><p>我们对<code>glVertexAttribPointer</code>的调用看起来有点儿不同，因为最后一个参数现在是偏移量而不是指向客户端内存的指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入位置信息</span></span><br><span class="line">GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, mCubePositionsBufferIdx);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br><span class="line">mGlEs20.glVertexAttribPointer(mPositionHandle, POSITION_DATA_SIZE, GLES20.GL_FLOAT, <span class="keyword">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>像以前一样，我们绑定到缓冲区，然后启用顶点数组。由于缓冲区早已绑定，当从缓冲区读取数据时，我们仅需要告诉OpenGL开始的偏移。因为我们使用的特定的缓冲区，我们传入偏移量0。另请注意，我们使用自定义绑定来调用<code>glVertexAttribPointer</code>，因为官方SKD缺少此特定函数调用。</p><p>一旦我们用缓冲区绘制完成，我们应该解除它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>当我们不想在保留缓冲区时，我们可以释放内存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] buffersToDelete = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; mCubePositionsBufferIdx, mCubeNormalsBufferIdx,</span><br><span class="line">    mCubeTexCoordsBufferIdx &#125;;</span><br><span class="line">GLES20.glDeleteBuffers(buffersToDelete.length, buffersToDelete, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="打包顶点缓冲区对象">打包顶点缓冲区对象<a href="post/Learn-OpenGL-Lesson-Seven#打包顶点缓冲区对象"></a></h2><p>我们还可以使用单个缓冲区打包顶点缓冲区对象的所有顶点数据。打包顶点缓冲区的创建和上面相同，唯一的区别是我们从打包客户端缓冲区开始。打包缓冲区渲染也是一样的，除了我们需要传偏移量，就像在客户端内存中使用打包缓冲区一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> stride = (POSITION_DATA_SIZE + NORMAL_DATA_SIZE + TEXTURE_COORDINATE_DATA_SIZE)</span><br><span class="line">    * BYTES_PER_FLOAT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入位置信息</span></span><br><span class="line">GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, mCubeBufferIdx);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br><span class="line">mGlEs20.glVertexAttribPointer(mPositionHandle, POSITION_DATA_SIZE,</span><br><span class="line">    GLES20.GL_FLOAT, <span class="keyword">false</span>, stride, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入法线信息</span></span><br><span class="line">GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, mCubeBufferIdx);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mNormalHandle);</span><br><span class="line">mGlEs20.glVertexAttribPointer(mNormalHandle, NORMAL_DATA_SIZE,</span><br><span class="line">    GLES20.GL_FLOAT, <span class="keyword">false</span>, stride, POSITION_DATA_SIZE * BYTES_PER_FLOAT);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意：偏移量需要以字节为单位指定。与之前一样解除绑定和删除缓冲区的相同注意事项也适用。</p><h2 id="将顶点数据放到一起">将顶点数据放到一起<a href="post/Learn-OpenGL-Lesson-Seven#将顶点数据放到一起"></a></h2><p>这节课已构建了多立方体组成的立方体，每个面的立方体数量体相同。它将在1x1x1立方体和16x16x16立方体之间构建立方体。由于每个立方体共享相同的法线和纹理数据，因此在初始化客户端缓冲区时将重复复制此数据。所有立方体都将在同一个缓冲区对象中结束。</p><p>您可以查看课程中的代码并查看使用和不使用VBO，以及使用和不使用打包缓冲区进行渲染的示例。检查代码以查看如何处理一下某些操作：</p><ul><li>通过<code>runOnUiThread()</code>将事件从OpenGL线程发布回UI主线程</li><li>异步生成顶点数据</li><li>处理内存溢出异常</li><li>我们移除了<code>glEnable(GL_TEXTURE_2D)</code>的调用，因为它实际在OpenGL ES 2是一个无效枚举。这是以前的固定写法延续下来的，在OpenGLES2中，这些东西由着色器处理，因此不需要使用<code>glEnable</code>或<code>glDisable</code>。</li><li>怎样使用不同的方式进行渲染，而不添加太多的if语句和条件。</li></ul><h2 id="进一步练习">进一步练习<a href="post/Learn-OpenGL-Lesson-Seven#进一步练习"></a></h2><p>您何时使用顶点缓冲区？什么时候从客户端内存传输数据更好？使用顶点缓冲区对象有哪些缺点？您将如何改进异步加载代码？</p><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-Seven#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VBO）</a></li></ul><h2 id="打包教材">打包教材<a href="post/Learn-OpenGL-Lesson-Seven#打包教材"></a></h2><p>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>为了方便大家下载，“我”也编译了个apk，：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：Android Lesson Seven: An Introduction to Vertex Buffer Objects (VBOs)&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-seven-an-introduction-to-vertex-buffer-objects-vbos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-seven-an-introduction-to-vertex-buffer-objects-vbos/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL Android课程六：介绍纹理过滤</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six/index.html</id>
    <published>2019-02-19T08:24:18.000Z</published>
    <updated>2019-04-08T06:56:15.793Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：Android Lesson Six: An Introduction to Texture Filtering<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-six-an-introduction-to-texture-filtering/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-six-an-introduction-to-texture-filtering/</a><br><a id="more"></a></p><hr><h1 id="介绍纹理过滤">介绍纹理过滤<a href="post/Learn-OpenGL-Lesson-Six#介绍纹理过滤"></a></h1><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>这节课，我们将介绍基本纹理过滤的不同类型和怎样使用它们，<br>包括最邻近（nearest-neighbour）过滤，<a href="https://en.wikipedia.org/wiki/Bilinear_filtering" target="_blank" rel="noopener">双线性(bilinear)过滤</a>，<br>和使用mipmap的<a href="https://en.wikipedia.org/wiki/Trilinear_filtering" target="_blank" rel="noopener">三线性(trilinear)过滤</a>。<br><br>你将学习如何使纹理看起来更平滑，以及平滑带来的缺点。<br>[这儿有旋转物体][]的不同方式，本课使用了其中一。</td><td style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190219164050.png" alt="screenshot"></td></tr></tbody></table></div></div><h2 id="前提条件">前提条件<a href="post/Learn-OpenGL-Lesson-Six#前提条件"></a></h2><p>强烈建议您先阅读<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a>，理解纹理映射在OpenGL中的基本使用。</p><h2 id="什么是纹理过滤？">什么是纹理过滤？<a href="post/Learn-OpenGL-Lesson-Six#什么是纹理过滤？"></a></h2><p>OpenGLES中的纹理由元素数组组成，被称为纹素(texels)，其中包含颜色和alpha值。这与显示器相对应，显示器由一堆像素组成，并在每个点显示不同的颜色。在OpenGL中纹理被用在三角形上并绘制到屏幕，因此这些纹理能绘制出各种各样的尺寸和方向。OpenGL中的纹理过滤选项告诉它如何根据具体情况将纹理像素过滤到设备的像素上。</p><blockquote><p>有三种情况：</p></blockquote><ul><li>每个纹素映射到多个像素，这被称为放大(magnification)</li><li>每个纹素精确的映射到一个像素，过滤不适合这种情况</li><li>每个纹素映射少于一个像素，这被称为缩小(minification)</li></ul><p>OpenGL允许我们为放大和缩小分配过滤器，并允许我们使用最邻近、双线性和三线性过滤。我们将在下面解释这些意思。</p><h2 id="放大和缩小">放大和缩小<a href="post/Learn-OpenGL-Lesson-Six#放大和缩小"></a></h2><p>这里是放大和缩小的最邻近渲染的可视化，当您用USB连接你的Android设备时使用这个可爱的Android显示成功连接。</p><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221100843.png" alt="cute android" data-zoomable=""></p></div><h3 id="放大">放大<a href="post/Learn-OpenGL-Lesson-Six#放大"></a></h3><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221100936.png" alt="magnification android" data-zoomable=""></p></div><p>正如您所见，纹素现在很容易看到，因为当前一个纹素覆盖了很多像素展示出来。</p><h3 id="缩小">缩小<a href="post/Learn-OpenGL-Lesson-Six#缩小"></a></h3><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221101211.png" alt="minification android" data-zoomable=""></p></div><p>随着缩小，许多纹素不能渲染到有限的像素上，许多细节将会丢失。</p><h2 id="纹理过滤模式">纹理过滤模式<a href="post/Learn-OpenGL-Lesson-Six#纹理过滤模式"></a></h2><h3 id="双线性插值（Bilinear-interpolation）">双线性插值（Bilinear interpolation）<a href="post/Learn-OpenGL-Lesson-Six#双线性插值（Bilinear-interpolation）"></a></h3><p>当纹素值之间没有插值时，在放大示例中，纹理的纹素清晰可见为大正方形。当使用最邻近方式时，像素将会分配到最邻近的像素。</p><p>通过切换到双线性插值，渲染质量显著提高。这些值将会在邻近的四个像素之间线性插值，而不是将一组像素分配给邻近相同的纹素值。每个像素被平滑化，使得最后的图片看起来也更平滑：</p><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221103115.png" alt="smoother android" data-zoomable=""></p></div><p>一些块效果仍然很明显，但是这个图片看起来比之前更加平滑。那些在3D加速卡出现前玩过3D游戏的人将会记得软件渲染游戏和硬件加速游戏之间的特性：软件渲染游戏根本没有进行预计算处理，所以一切都显示得块状和锯齿状。一旦人们开始使用图形加速，这些东西都将变得平滑。</p><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221104453.png" alt="smooth" data-zoomable=""></p></div><p>双线性插值大多使用在放大。它也能使用在缩小，但是超过某个度，我们将会遇到同样的问题，我们在尝试将太多的纹素放到相同的像素上。OpenGL仅使用最多4个纹素渲染一个像素，因此许多信息仍然会丢失。</p><p>如果我们看应用了双线性插值的纹理，当我们在远处看它移动时看起来会很嘈杂，因为每帧都会选择不同的纹素。</p><h3 id="纹理映射（Mipmapping）">纹理映射（Mipmapping）<a href="post/Learn-OpenGL-Lesson-Six#纹理映射（Mipmapping）"></a></h3><p>我们如何才能在缩小纹理时不引用嘈杂并使用上所有纹素呢？我们可以生成一组优化后的不同尺寸的纹理，然后在我们运行的时候使用它们。由于这些纹理已预先生成，它们能使用更多高昂的技术去过滤所有纹素，并且在运行时OpenGL会根据纹理在屏幕上的最终大小选择最合适的层。</p><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221143838.png" alt="textures set" data-zoomable=""></p></div><p>生成的图片可以具有更多细节，更少噪点，并且整体上看起来更好。尽管需要更多的内存，但渲染速度也会更快，因为较小的层级能更容易保存在GPU的纹理缓存中。让我们来仔细研究一下原尺寸的1/8倍的图片，在使用了双线性过滤使用纹理映射和双线性过滤没有使用映射。为了清楚图片已被扩大：</p><h4 id="双线性过滤没有mipmap">双线性过滤没有mipmap<a href="post/Learn-OpenGL-Lesson-Six#双线性过滤没有mipmap"></a></h4><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221145134.png" alt="without mipmaps" data-zoomable=""></p></div><h4 id="双线性过滤-mipmap">双线性过滤+mipmap<a href="post/Learn-OpenGL-Lesson-Six#双线性过滤-mipmap"></a></h4><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221145249.png" alt="with mipmaps" data-zoomable=""></p></div><p>使用mipmap的版本拥有更多细节，由于图像预处理到单独的层级，所有纹素最终都会在最终的图像中使用。</p><h3 id="三线性过滤（Trilinear-filtering）">三线性过滤（Trilinear filtering）<a href="post/Learn-OpenGL-Lesson-Six#三线性过滤（Trilinear-filtering）"></a></h3><p>当使用双线性过滤的mipmap时，有时在渲染场景中可以看到明显的跳跃或线，由于OpenGL在纹理的不同mipmap层级之间切换。比较不同的OpenGL纹理的过滤模式将在下面进一步指出。</p><p>三线性插值通过在不同mipmap层级之间插值来解决这个问题，这样总共8个纹素将用于插值得到最终的像素值，使得图像更平滑。</p><h2 id="OpenGL-纹理过滤模式">OpenGL 纹理过滤模式<a href="post/Learn-OpenGL-Lesson-Six#OpenGL-纹理过滤模式"></a></h2><p>OpenGL有两个可被设置的参数：</p><ul><li><code>GL_TEXTURE_MIN_FILTER</code> 纹理缩小时的过滤模式</li><li><code>GL_TEXTURE_MAG_FILTER</code> 纹理放大时的过滤模式</li></ul><p>这些相对应于上面的缩小和放大描述。  </p><ul><li><code>GL_TEXTURE_MIN_FILTER</code>接受以下选项：<ul><li><code>GL_NEAREST</code></li><li><code>GL_LINEAR</code></li><li><code>GL_NEAREST_MIPMAP_NEAREST</code></li><li><code>GL_NEAREST_MIPMAP_LINEAR</code></li><li><code>GL_LINEAR_MIPMAP_NEAREST</code></li><li><code>GL_LINEAR_MIPMAP_LINEAR</code></li></ul></li><li><code>GL_TEXTURE_MAG_FILTER</code>接受以下选项：<ul><li><code>GL_NEAREST</code></li><li><code>GL_LINEAR</code></li></ul></li></ul><p><code>GL_NEAREST</code> 对应最邻近渲染；<br><code>GL_LINEAR</code> 对应双线性过滤；<br><code>GL_LINEAR_MIPMAP_NEAREST</code> 对应双线性过滤+mipmap；<br><code>GL_LINEAR_MIPMAP_LINEAR</code> 对应三线性过滤；<br>本课中将进一步介绍图形示例和最常见选项的进一步说明。</p><h3 id="怎样设置纹理过滤模式">怎样设置纹理过滤模式<a href="post/Learn-OpenGL-Lesson-Six#怎样设置纹理过滤模式"></a></h3><p>我们首先需要绑定纹理，然后我们在这个纹理上设置合适的过滤参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTextureHandle);</span><br><span class="line">GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, filter);</span><br></pre></td></tr></table></figure><h3 id="怎样生成mipmap">怎样生成mipmap<a href="post/Learn-OpenGL-Lesson-Six#怎样生成mipmap"></a></h3><p>这真的很容易！在加载纹理到OpenGL中后，纹理仍然是绑定的，我们可以简单的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glGenerateMipmap(GLES20.GL_TEXTURE_2D);</span><br></pre></td></tr></table></figure><p>它将为我们生成所有的mipmap层级，并且这些层级会根据纹理过滤自动使用。</p><h2 id="它看起来怎么样？">它看起来怎么样？<a href="post/Learn-OpenGL-Lesson-Six#它看起来怎么样？"></a></h2><p>以下是可用的最常见的组合的屏幕截图，当你看到它运动中时，效果更加引人注目，因此我建议下载<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">这个App</a>并试一试。</p><h3 id="最邻近渲染">最邻近渲染<a href="post/Learn-OpenGL-Lesson-Six#最邻近渲染"></a></h3><p>这个模式让人想起旧版3D游戏软件的渲染。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GL_TEXTURE_MIN_FILTER = GL_NEAREST</span><br><span class="line">GL_TEXTURE_MAG_FILTER = GL_NEAREST</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221163746.png" alt="nearest nearest" data-zoomable=""></p></div><h3 id="双线性过滤，mipmap">双线性过滤，mipmap<a href="post/Learn-OpenGL-Lesson-Six#双线性过滤，mipmap"></a></h3><p>许多支持3D加速的首批游戏都使用此模式，这是今天在Android手机上平滑纹理的有效方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GL_TEXTURE_MIN_FILTER = GL_LINEAR_MIPMAP_NEAREST</span><br><span class="line">GL_TEXTURE_MAG_FILTER = GL_LINEAR</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221164349.png" alt="linear mipmap" data-zoomable=""></p></div><p>静态图上很难看图问题，但是当物体运动时，您可能会注意到渲染的像素在mipmap层级之间切换的水平条带。</p><h3 id="三线性过滤">三线性过滤<a href="post/Learn-OpenGL-Lesson-Six#三线性过滤"></a></h3><p>此模式通过在mipmap层级之间进行插值，改进了使用mipmap的双线性过滤的渲染质量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GL_TEXTURE_MIN_FILTER = GL_LINEAR_MIPMAP_LINEAR</span><br><span class="line">GL_TEXTURE_MAG_FILTER = GL_LINEAR</span><br></pre></td></tr></table></figure><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190221165703.png" alt="trilinear" data-zoomable=""></p></div><p>像素在近距离和远距离之间完全平滑；事实上，纹理现在可能在倾斜角度下显示的过于平滑。<br><a href="https://en.wikipedia.org/wiki/Anisotropic_filtering" target="_blank" rel="noopener">各向异性过滤（Anisotropic filtering）</a>是一种更先进的技术，受到某些移动GPU的支持，可用于改善最终结果，超出三线性过滤所能提供的效果。</p><h3 id="进一步练习">进一步练习<a href="post/Learn-OpenGL-Lesson-Six#进一步练习"></a></h3><p>使用其他模式可以达到什么样的效果？例如，您何时会使用像<code>GL_NEAREST_MIPMAP_LINEAR</code>这样的东西？</p><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-Six#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li></ul><h2 id="打包教材">打包教材<a href="post/Learn-OpenGL-Lesson-Six#打包教材"></a></h2><p>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：Android Lesson Six: An Introduction to Texture Filtering&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-six-an-introduction-to-texture-filtering/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-six-an-introduction-to-texture-filtering/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL Android课程五：介绍混合（Blending）</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five/index.html</id>
    <published>2019-02-12T08:37:00.000Z</published>
    <updated>2019-04-08T06:55:57.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：Android Lesson Five: An Introduction to Blending<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-five-an-introduction-to-blending/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-five-an-introduction-to-blending/</a><br><a id="more"></a></p><hr><h1 id="介绍混合（Blending）">介绍混合（Blending）<a href="post/Learn-OpenGL-Lesson-Five#介绍混合（Blending）"></a></h1><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>这节课，我们来学习混合(blending)在OpenGL中的<br>基本使用。我们来看看如何打开或关闭混合，怎样设置<br>不同的混合模式，以及不同的混合模式如何模仿显示生<br>活中的效果。在后面的课程中，我们还将介绍如何使用<br>alpha通道，如何使用深度缓冲区在同一个场景中渲染<br>半透明和不透明的物体，以及什么时候按深度排序对象，<br>以及为什么。<br><br>我们还将研究如何监听触摸事件，然后基于此更改渲染<br>状态。</td><td style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190212163914.png" alt="display"><br><em>基本混合</em></td></tr></tbody></table></div></div><h2 id="前提条件">前提条件<a href="post/Learn-OpenGL-Lesson-Five#前提条件"></a></h2><p>本系列每个课程构建都是以前一个课程为基础。然而，对于这节课，如果您理解了<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a>就足够了。尽管代码基本上是前一课的，照明和纹理部分已在本课中移除，因此我们仅关注混合。</p><h2 id="混合（Blending）">混合（Blending）<a href="post/Learn-OpenGL-Lesson-Five#混合（Blending）"></a></h2><p>混合是将一种颜色与另一种颜色组合以获得第三种颜色的行为。我们在现实世界任何时候都能看到混合：当光穿过玻璃时，当它从表面反射时，当光源本身叠加在背景上时，例如我们在晚上看到一盏明亮的路灯周围的耀斑。</p><p>OpenGL有不同的混合模式，我们能使用它模拟这种效果。在OpenGL中，混合发生在渲染过程的后期：一旦片段着色器计算出片段的最终输出颜色并且它即将被写入帧缓冲区，就会发生这种情况。通常情况下，这片段会覆盖之前所有内容，但如果启用了混合，那么该片段将与之前的片段混合。</p><p>默认情况下，当<code>glBlendEquation()</code>设置为默认值<code>GL_FUNC_ADD</code>时OpenGL的默认混合方程式为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出 = （源因子 * 源片段） + （目标因子 * 目标片段）</span></span><br><span class="line">output = (source factor * source fragment) + (destination factor * destination fragment)</span><br></pre></td></tr></table></figure><p>OpenGL ES 2 中还有另外两种模式<code>GL_FUNC_SUBTRACT</code>和<code>GL_FUNC_REVERSE_SUBTRACT</code>。<br>这些可能在以后的教程中介绍，然而，当我尝试调用此函数时，我在Nexus S上遇到了<br><code>UnsupportedOperationException</code>，因此Android实现可能实际上不支持此功能。<br>这不是世界末日，因为你可以用<code>GL_FUNC_ADD</code>做很多事情。</p><p>使用函数<code>glBlendFunc()</code>设置源因子和目标因子。下面将给出几个常见混合因子的概述；更多信息以及不同可能的因素的列举，请参阅<a href="http://www.khronos.org/opengles/sdk/docs/man/" target="_blank" rel="noopener">Khronos在线手册</a>：</p><ul><li><a href="https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glBlendFunc.xml" target="_blank" rel="noopener">glBlendFunc()</a></li><li><a href="https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glBlendEquation.xml" target="_blank" rel="noopener">glBlendEquation()</a></li></ul><h3 id="截取（Clamping）">截取（Clamping）<a href="post/Learn-OpenGL-Lesson-Five#截取（Clamping）"></a></h3><p>OpenGL预期的输入被限制在[0,1]的范围内，并且输入也被限制在[0,1]。这在实践中意味着当您进行混合时，颜色可以在色调中移动。<br>如果继续想帧缓冲区添加红色（RGB = 1，0，0），最终颜色会是红色。如果想添加一点儿绿色，您要添加（RGB = 1，0.1，0）到缓冲区，即使您开始带红色的色调，最后也会得到黄色！<br>打开混合时，您可以在本课程的Demo中看到此效果：不同颜色的重叠的颜色变得过饱和。</p><h2 id="不同类型的混合以及它们有怎样不同的效果">不同类型的混合以及它们有怎样不同的效果<a href="post/Learn-OpenGL-Lesson-Five#不同类型的混合以及它们有怎样不同的效果"></a></h2><h3 id="相加混合（Additive-blending）">相加混合（Additive blending）<a href="post/Learn-OpenGL-Lesson-Five#相加混合（Additive-blending）"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190213200752.png" alt="rgb"></th></tr></thead><tbody><tr><td style="text-align:center"><em>RGB颜色相加模型； 来源：Wikipedia</em></td></tr></tbody></table></div></div><p>相加混合是当我们添加不同颜色在一起的混合，这就是我们的视觉与光一起工作的模式，这就是我们如何在我们的显示器上感知数百万种不同的颜色——它们实际上只是将三种不同的原色混合在一起。</p><p>这种混合在3D混合中很有用，例如在粒子效果中，它们似乎发出光线和覆盖物，例如灯光周围的光晕，或光剑周围的发光效果。</p><p>相加混合能通过调用<code>glBlendFunc(GL_ONE, GL_ONE)</code>指定，<br>混合的结果等式<code>输出=（1 * 源片段） + （1 * 目标片段）</code>，运算后：<code>输出=源片段 + 目标片段</code></p><h3 id="相乘混合（Multiplicative-blending）">相乘混合（Multiplicative blending）<a href="post/Learn-OpenGL-Lesson-Five#相乘混合（Multiplicative-blending）"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190213202603.png" alt="rg"></th></tr></thead><tbody><tr><td style="text-align:center"><em>光照贴图的一个例子</em></td></tr></tbody></table></div></div><p>相乘混合（也称为调制）是另一种有用的混合模式，它表示光在通过过滤器时的行为方式，或从被点燃的物体反射并进入我们的眼睛。一个红色的物体看上去是红色是因为白光照射到这个物体上，蓝光和绿光被吸收，只有红光反射回我们的眼睛。在上面的例子中，我们能看到一些红色和绿色，但是很少会有一点蓝色。</p><p>当多纹理不可用时，乘法混合用于在游戏中实现光照贴图。纹理与光照贴图相乘，以填充在明亮和阴影的区域。</p><p>相乘混合能通过调用<code>glBlendFunc(GL_DST_COLOR, GL_ZERO)</code>指定，<br>其混合的结果等式<code>输出=（目标片段 * 源片段）+ （0 * 目标片段）</code>，写作：<code>输出=目标片段 * 源片段</code>。</p><h3 id="插值混合（Interpolative-blending）">插值混合（Interpolative blending）<a href="post/Learn-OpenGL-Lesson-Five#插值混合（Interpolative-blending）"></a></h3><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190213205158.png" alt="textures"></th></tr></thead><tbody><tr><td style="text-align:center"><em>一个两个纹理一起插值的案例</em></td></tr></tbody></table></div></div><p>插值混合结合了乘法和加法，以提供插值效果。与添加和调制本身不同，此混合模式也可是依赖绘制顺序的。因此在某些情况下，如果您先画出最远的半透明物体，然后绘制更近的物体，结果才会是正确。即使排序也不是完美，因为三角形可能重叠并相交，但产生的伪像可能是可接受的。</p><p>插值通常是将相邻的表面混合在一起，以及做有色玻璃或淡入淡出的效果。上面这个图片显示了两个纹理（纹理来自<a href="http://pdtextures.blogspot.com/" target="_blank" rel="noopener">公共领域纹理</a>）使用插值混合在一起。</p><p>插值混合能通过调用<code>glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)</code>指定，<br>其混合结果等式<code>输出 = （源alpha * 源片段） + （（1 - 源alpha） * 目标片段）</code>。这是一个例子：</p><p>想象一下，我们正在绘制一个只有25%不透明的绿色（0，1，0），当前屏幕上的物体时红色（1，0，0）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出 = （源因子 * 源片段） + （目标因子 * 目标片段）</span><br><span class="line">输出 = （源alpha * 源片段） + （（<span class="number">1</span> - 源alpha） * 目标片段）</span><br><span class="line"></span><br><span class="line">输出 = (<span class="number">0.25</span> * (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)) + (<span class="number">0.72</span> * (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">输出 = (<span class="number">0</span>, <span class="number">0.25</span>, <span class="number">0</span>) + (<span class="number">0.75</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">输出 = (<span class="number">0.75</span>, <span class="number">0.25</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>注意，我们不需要对目标alpha做任何涉及，因为这个帧缓冲区本身不需要alpha通道，这为我们提供了更多的颜色通道位。</p><h2 id="使用混合">使用混合<a href="post/Learn-OpenGL-Lesson-Five#使用混合"></a></h2><p>在我们的课程中，我们的Demo将使用相加混合将立方体显示为光的发射器。发光的东西不需要其他光源照亮，因此这个Demo中没有灯光。我也删除了纹理，虽然它可以很好地使用。本课程的着色器程序很简单；我们只需要一个可传递颜色的着色器。</p><h3 id="顶点着色器">顶点着色器<a href="post/Learn-OpenGL-Lesson-Five#顶点着色器"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVPMatrix;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Position;</span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    v_Color = a_Color;</span><br><span class="line">    <span class="built_in">gl_Position</span> = u_MVPMatrix * a_Position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="片段着色器">片段着色器<a href="post/Learn-OpenGL-Lesson-Five#片段着色器"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = v_Color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打开混合">打开混合<a href="post/Learn-OpenGL-Lesson-Five#打开混合"></a></h3><p>打开混合就像是做一些方法调用那么简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭剔除去掉背面</span></span><br><span class="line">GLES20.glDisable(GLES20.GL_CULL_FACE);</span><br><span class="line"><span class="comment">// 关闭深度测试</span></span><br><span class="line">GLES20.glDisable(GLES20.GL_DEPTH_TEST);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动混合</span></span><br><span class="line">GLES20.glEnable(GLES20.GL_BLEND);</span><br><span class="line">GLES20.glBlendFunc(GLES20.GL_ONE, GLES20.GL_ONE);</span><br></pre></td></tr></table></figure><p>我们关闭背面剔除，是因为如果立方体是半透明的，那么现在我们能看到立方体的背面。我们需要绘制它们，否则可能看起来会很奇怪。出于同样的原因我们关闭了深度测试。</p><h2 id="学习触摸事件并进行操作">学习触摸事件并进行操作<a href="post/Learn-OpenGL-Lesson-Five#学习触摸事件并进行操作"></a></h2><p>你将注意到，当您运行Demo时，可以通过点击屏幕来打开和关闭混合。</p><p>现实触摸事件，您首先需要创建您的<code>GLSurfaceView</code>自定义view。在这个view中，创建一个默认构造用来调用父类，创建一个新的方法来接收特定的渲染器替换常用接口，并覆写<code>onTouchEvent()</code>。我们传入一个具体的渲染器类，因为我们将要在<code>onTouchEvent()</code>方法中调用这个类的特定方法。</p><p>在Android中，OpenGL渲染器在独立的线程中完成，因此我们还将看看如何安全的从正在监听触摸事件的主线程调度到单独的渲染器线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LessonFiveGLSurfaceView</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LessonFiveRenderer mRenderer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LessonFiveGLSurfaceView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">                event == <span class="keyword">null</span></span><br><span class="line">                || event.getAction() != MotionEvent.ACTION_DOWN</span><br><span class="line">                || mRenderer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 确保我们在OpenGL线程上调用switchMode()</span></span><br><span class="line">        <span class="comment">// queueEvent() 是GLSurfaceView的一个方法，它将为我们做到这点</span></span><br><span class="line">        queueEvent(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                mRenderer.switchMode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRenderer</span><span class="params">(LessonFiveRenderer renderer)</span> </span>&#123;</span><br><span class="line">        mRenderer = renderer;</span><br><span class="line">        <span class="keyword">super</span>.setRenderer(renderer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>LessonFiveRenderer</code>中实现<code>switchMode()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">switchMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mBlending = !mBlending;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mBlending) &#123;</span><br><span class="line">        <span class="comment">// 关闭剔除去掉背面</span></span><br><span class="line">        GLES20.glDisable(GLES20.GL_CULL_FACE);</span><br><span class="line">        <span class="comment">// 关闭深度测试</span></span><br><span class="line">        GLES20.glDisable(GLES20.GL_DEPTH_TEST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动混合</span></span><br><span class="line">        GLES20.glEnable(GLES20.GL_BLEND);</span><br><span class="line">        GLES20.glBlendFunc(GLES20.GL_ONE, GLES20.GL_ONE);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GLES20.glEnable(GLES20.GL_CULL_FACE);</span><br><span class="line">        GLES20.glEnable(GLES20.GL_DEPTH_TEST);</span><br><span class="line">        GLES20.glDisable(GLES20.GL_BLEND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看<code>LessonFiveGLSurfaceView::onTouchEvent()</code>，主要记住触摸事件都是在UI主线程中<br>，而<code>GLSurfaceView</code>在一个单独的线程中创建OpenGL ES上下文，这意味着我们的渲染器的回调也在一个单独的线程中运行。这是一个需要记住的重点，因为我们不能再其他线程调用OpenGL并希望其工作。</p><p>辛运的是，编写<code>GLSurfaceView</code>的人也想到了这点，并提供了一个<code>queueEvent()</code>方法，这使得你可以调用OpenGL线程上的东西。因此，当我们想通过点击屏幕打开和关闭混合时，我们确保通过在UI线程中使用<code>queueEvent()</code>来正确调用OpenGL线程中的内容。</p><h3 id="进一步练习">进一步练习<a href="post/Learn-OpenGL-Lesson-Five#进一步练习"></a></h3><p>这个Demo目前仅使用相加混合，尝试改变其为插值混合并重新添加灯光和纹理。如果您只在黑色背景上绘制两个半透明纹理，绘制顺序是否重要？什么时候重要？</p><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-Five#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li></ul><h2 id="打包教材">打包教材<a href="post/Learn-OpenGL-Lesson-Five#打包教材"></a></h2><p>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：Android Lesson Five: An Introduction to Blending&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-five-an-introduction-to-blending/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-five-an-introduction-to-blending/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL Android课程四：介绍纹理基础</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four/index.html</id>
    <published>2019-02-08T11:26:29.000Z</published>
    <updated>2019-04-08T06:56:03.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：Android Lesson Four: Introducing Basic Texturing<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-four-introducing-basic-texturing/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-four-introducing-basic-texturing/</a><br><a id="more"></a></p><hr><h1 id="介绍纹理基础">介绍纹理基础<a href="post/Learn-OpenGL-Lesson-Four#介绍纹理基础"></a></h1><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>这是我们Android系列的第四个课程。<br>在本课中，我们将添加我们在<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">第三课</a><br>中学到的内容，并学习如何添加纹理。<br>我们来看看如何从应用资源中获取一张<br>图片加载到OpenGLES中，并展示到<br>屏幕上。<br><br>跟着我一起来，你将马上明白纹理的<br>基本使用方式。</td><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190208193740.png" alt="screenshot"></td></tr></tbody></table></div></div><h2 id="前提条件">前提条件<a href="post/Learn-OpenGL-Lesson-Four#前提条件"></a></h2><p>本系列每个课程构建都是以前一个课程为基础，这节课是<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">第三课</a>的扩展，因此请务必在继续之前复习该课程。</p><blockquote><p>已下是本系列课程的前几课：</p></blockquote><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li></ul><h2 id="纹理基础">纹理基础<a href="post/Learn-OpenGL-Lesson-Four#纹理基础"></a></h2><p>纹理映射的艺术（以及照明）是构建逼真的3D世界最重要的部分。没有纹理映射，一切都是平滑的阴影，看起来很人工，就像是90年代的老式控制台游戏。</p><p>第一个开始大量使用纹理的游戏，如Doom和Duke Nukem 3D，通过增加视觉冲击力，大大提升了游戏的真实感——如果在晚上玩可能会真的吓唬到我们。</p><blockquote><p>这里我们来看有纹理和没有纹理的场景</p></blockquote><div class="article-bounded"><div class="article-table"><table><tbody><tr><td style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190208215006.png" alt="pre-fragment lighting"><br><em>每片段照明；<br>正方形四个顶点中心位置</em></td><td style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190208215108.png" alt="added texture"><br><em>添加了纹理；<br>正方形四个顶点中心位置</em></td><td>看左边的图片，这个场景通过每像<br>素照明和着色点亮。这个场景看起<br>来非常平滑，现实生活中我们走进<br>一个房间有充满了光滑阴影的东西<br>就像是这个立方体。<br><br>在看右边的图片，同样的场景现在<br>纹理化了。环境光也增加了，因为<br>纹理的使用使整个场景变暗，也可<br>以看到纹理对侧面立方体的影响。<br>立方体具有和以前相同数量的多边<br>形，但它们有新纹理看起来更加详<br>细。<br><br>满足于那些好奇的人，这个纹理的<br>资源来自于<a href="http://pdtextures.blogspot.com/2008/03/first-set.html" target="_blank" rel="noopener">公共领域的资源</a></td></tr></tbody></table></div></div><h2 id="纹理坐标">纹理坐标<a href="post/Learn-OpenGL-Lesson-Four#纹理坐标"></a></h2><p>在OpengGL中，纹理坐标时常使用坐标(s,t)代替(x,y)。(s,t)表示纹理上的一个纹理元素，然后映射到多边形。另外需要注意这些纹理坐标和其他OpengGL坐标相似：t(或y)轴指向上方，所以值越高您走的越远。</p><p>大多数计算机图形，y轴指向下方。这意味着左上角是图片的原点(0,0)，并且y值向下递增。换句话说，OpenGL的坐标系和大多数计算机图形相反，这是您需要考虑到的。</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:center"><em>OpenGL的纹理坐标系</em></th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190208225905.png" alt="coordiante"></td></tr></tbody></table></div></div><h2 id="纹理映射基础">纹理映射基础<a href="post/Learn-OpenGL-Lesson-Four#纹理映射基础"></a></h2><p>在本课中，我们将来看看常规2D纹理（<code>GL_TEXTURE_2D</code>）和红，绿，蓝颜色信息（<code>GL_RGB</code>）。OpenGL ES 也提供其他纹理模式让你做更多不同的特殊效果。我们将使用<code>GL_NEAREST</code>查看点采样，<code>GL_LINEAR</code>和MIP-映射将在后面的课程中讲解。</p><p>让我们一起来到代码部分，看看怎样开始在Android中使用基本的纹理。</p><h3 id="顶点着色器">顶点着色器<a href="post/Learn-OpenGL-Lesson-Four#顶点着色器"></a></h3><p>我们将采用上节课中的每像素照明着色器，并添加纹理支持。</p><blockquote><p>这儿是新的变化：</p></blockquote><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">attribute</span> <span class="type">vec2</span> a_TexCoordinate;<span class="comment">// 我们将要传入的每个顶点的纹理坐标信息</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> v_TexCoordinate;  <span class="comment">// 这将会传入到片段着色器</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 传入纹理坐标</span></span><br><span class="line">   v_TexCoordinate = a_TexCoordinate;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在顶点着色器中，我们添加一个新的属性类型<code>vec2</code>（一个包含两个元素的数组），将用来放入纹理坐标信息。这将是每个顶点都有，同位置，颜色，法线数据一样。我们也添加了一个新的变量，它将通过三角形表面上的线性插值将数据传入片段着色器。</p><h3 id="片段着色器">片段着色器<a href="post/Learn-OpenGL-Lesson-Four#片段着色器"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uniform sampler2D u_Texture;" +  // 传入纹理</span><br><span class="line">...</span><br><span class="line">varying vec2 v_TexCoordinate;" + // 插入的纹理坐标</span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class="line">   float diffuse = max(dot(v_Normal, lightVector), 0.1);" +</span><br><span class="line">   <span class="comment">// 根据距离哀减光线</span></span><br><span class="line">   diffuse = diffuse * (1.0 / (1.0 + (0.10 * distance * distance)));" +</span><br><span class="line">   <span class="comment">// 添加环境照明</span></span><br><span class="line">   diffuse = diffuse + 0.3;" +</span><br><span class="line">   <span class="comment">// 颜色乘以亮度哀减和纹理值得到最终的颜色</span></span><br><span class="line">   gl_FragColor = v_Color * diffuse * texture2D(u_Texture, v_TexCoordinate);" +</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们添加了一个新的常量类型<code>sampler2D</code>来表示实际纹理数据（与纹理坐标对应），<br>由定点着色器插值传入纹理坐标，我们再调用<code>texture2D(texture, textureCoordinate)</code><br>得到纹理在当前坐标的值，我们得到这个值后再乘以其他项得到最终输出的颜色。</p><p>这种方式添加纹理会使整个场景变暗，因此我们还会稍微增强环境光照并减少光照哀减。</p><h3 id="将一个图片加载到纹理">将一个图片加载到纹理<a href="post/Learn-OpenGL-Lesson-Four#将一个图片加载到纹理"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">loadTexture</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> <span class="keyword">int</span> resourceId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] textureHandle = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    GLES20.glGenTextures(<span class="number">1</span>, textureHandle, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (textureHandle[<span class="number">0</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inScaled = <span class="keyword">false</span>; <span class="comment">// 没有预先缩放</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到图片资源</span></span><br><span class="line">        <span class="keyword">final</span> Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), resourceId, options);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在OpenGL中绑定纹理</span></span><br><span class="line">        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置过滤</span></span><br><span class="line">        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);</span><br><span class="line">        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将位图加载到已绑定的纹理中</span></span><br><span class="line">        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, <span class="number">0</span>, bitmap, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回收位图，因为它的数据已加载到OpenGL中</span></span><br><span class="line">        bitmap.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (textureHandle[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Error loading texture."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> textureHandle[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码将Android<code>res</code>文件夹中的图形文件读取并加载到OpenGL中，我会解释每一部分的作用。</p><p>我们首先需要告诉OpenGL去为我们创建一个新的<code>handle</code>，这个<code>handle</code>作为一个唯一标识，我们想在OpenGL中引用纹理时就会使用它。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final <span class="type">int</span>[] textureHandle = new <span class="type">int</span>[<span class="number">1</span>];</span><br><span class="line">GLES20.glGenTextures(<span class="number">1</span>, textureHandle, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>这个OpenGL方法可以用来同时生成多个<code>handle</code>，这里我们仅生成一个。</p><p>因为我们这里只需要一个handle去加载纹理。首先，我们需要得到OpenGL能理解的纹理格式。<br>我们不能只从PNG或JPG提供原始数据，因为它不会理解。我们需要做的第一步是将图像文件解码为Android Bitmap对象：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final BitmapFactory.Options options = new BitmapFactory.Options();</span><br><span class="line">options.inScaled = <span class="literal">false</span>; <span class="comment">// 没有预先缩放</span></span><br><span class="line"><span class="comment">// 得到图片资源</span></span><br><span class="line">final Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), resourceId, options);</span><br></pre></td></tr></table></figure><p>默认情况下，Android会根据设备的分辨率和你放置图片的资源文件目录而预先缩放位图。我们不希望Android根据我们的情况对位图进行缩放，因此我们将<code>inScaled</code>设置为<code>false</code></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在OpenGL中绑定纹理</span></span><br><span class="line">GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureHandle[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置过滤</span></span><br><span class="line">GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);</span><br><span class="line">GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);</span><br></pre></td></tr></table></figure><p>然后我们绑定纹理，并设置几个参数，绑定一个纹理，并告诉OpenGL后续OpenGL调用需要这样过滤这个纹理。我们将默认过滤器设置为<code>GL_NEAREST</code>，这是最快，也是最粗糙的过滤形式。它所做的就是在屏幕的每个点选择最近的纹素，这可能导致图像伪像和锯齿。</p><ul><li><code>GL_TEXTURE_MIN_FILTER</code> 这是告诉OpenGL在绘制小于原始大小（以像素为单位）的纹理时要应用哪种类型的过滤。</li><li><code>GL_TEXTURE_MAG_FILTER</code> 这是告诉OpenGL在放大纹理到原始大小时要应用哪种类型的过滤。</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将位图加载到已绑定的纹理中</span></span><br><span class="line">GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, <span class="number">0</span>, bitmap, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回收位图，因为它的数据已加载到OpenGL中</span></span><br><span class="line">bitmap.recycle();</span><br></pre></td></tr></table></figure><p>安卓有一个非常实用的功能可以直接将位图加载到OpenGL中。一旦您将资源读入Bitmap对象<code>GLUtils.texImage2D()</code>将负责其他事情，这个方法的签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">texImage2D</span> <span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> level, Bitmap bitmap, <span class="keyword">int</span> border)</span></span></span><br></pre></td></tr></table></figure><p>我们想要一个常规的2D位图，因此我们传入<code>GL_TEXTURE_2D</code>作为第一个参数。第二个参数用于MIP-映射，并允许您指定要在哪个级别使用的图像。我们这里没有使用MIP-映射，因此我们将传入0设置为默认级别。我们传入位图，由于我们没有使用边框，所以我们传入0。</p><p>然后原始位图对象调用<code>recycle()</code>，这提醒Android可以回收这部分内存。由于纹理已被加载到OpenGL，我们不需要继续保留这个副本。<br>是的，Android应用程序在执行垃圾收集的Dalvik VM下运行，但Bitmap对象包含驻留在native内存中的数据，如果你不明确的回收它们，它们需要几个周期来进行垃圾收集。<br>这意味着如果您忘记执行此操作，实际上可能会因内存不足错误而崩溃，即使您不再持有对位图的任何引用。</p><h3 id="将纹理应用到我们的场景">将纹理应用到我们的场景<a href="post/Learn-OpenGL-Lesson-Four#将纹理应用到我们的场景"></a></h3><p>首先，我们需要添加各种成员变量来持有我们纹理所需要的东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存放我们的模型数据在浮点缓冲区</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FloatBuffer mCubeTextureCoordinates;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来传入纹理</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTextureUniformHandle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来传入模型纹理坐标</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTextureCoordinateHandle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个数据元素的纹理坐标大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mTextureCoordinateDataSize = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 纹理数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mTextureDataHandle;</span><br></pre></td></tr></table></figure><p>我们基本上是需要添加新成员变量来跟踪我们添加到着色器的内容，以及保持对纹理的引用。</p><h3 id="定义纹理坐标">定义纹理坐标<a href="post/Learn-OpenGL-Lesson-Four#定义纹理坐标"></a></h3><p>我们在构造方法中定义我们的纹理坐标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S, T （或 X， Y）</span></span><br><span class="line"><span class="comment">// 纹理坐标数据</span></span><br><span class="line"><span class="comment">// 因为图像Y轴指向下方（向下移动图片时值会增加），OpenGL的Y轴指向上方</span></span><br><span class="line"><span class="comment">// 我们通过翻转Y轴来调整它</span></span><br><span class="line"><span class="comment">// 每个面的纹理坐标都是相同的</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span>[] cubeTextureCoordinateData =</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">// 正面</span></span><br><span class="line">                <span class="number">0.0F</span>, <span class="number">0.0F</span>,</span><br><span class="line">                <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">                <span class="number">1.0F</span>, <span class="number">0.0F</span>,</span><br><span class="line">                <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">                <span class="number">1.0F</span>, <span class="number">1.1F</span>,</span><br><span class="line">                <span class="number">1.0F</span>, <span class="number">0.0F</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这坐标数据看起来可能有点混乱。如果您返回去看第三课中点的位置是如何定义的，您将会发现我们为正方体每个面都定义了两个三角形。点的定义方式像下面这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（三角形<span class="number">1</span>）</span><br><span class="line">左上，</span><br><span class="line">左下，</span><br><span class="line">右上</span><br><span class="line">（三角形<span class="number">2</span>）</span><br><span class="line">左下，</span><br><span class="line">右下，</span><br><span class="line">右上</span><br></pre></td></tr></table></figure><p>纹理坐标和正面的位置坐标对应，但是由于Y轴翻转，Y轴指向和OpenGL的Y轴相反的方向。</p><blockquote><p>看下图，实线坐标表示在OpenGL中正方体正面X，Y坐标。虚线表示翻转后的坐标，可以看出和上面定义的纹理坐标是一一对应的</p></blockquote><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190211153435.jpg" alt="纹理坐标对应" data-zoomable=""></p></div><h3 id="设置纹理">设置纹理<a href="post/Learn-OpenGL-Lesson-Four#设置纹理"></a></h3><p>我们在<code>onSurfaceCreated()</code>方法中加载纹理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mProgramHandle = ShaderHelper.createAndLinkProgram(vertexShaderHandle, fragmentShaderHandle, <span class="string">"a_Position"</span>, <span class="string">"a_Color"</span>, <span class="string">"a_Normal"</span>, <span class="string">"a_TexCoordinate"</span>);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 加载纹理</span></span><br><span class="line">    mTextureDataHandle = TextureHelper.loadTexture(mActivityContext, R.drawable.bumpy_bricks_public_domain);</span><br></pre></td></tr></table></figure><p>我们传入一个新的属性<code>a_TexCoordinate</code>绑定到我们的着色器中，并且我们通过之前创建的<code>loadTexture()</code>方法加载着色器。</p><h3 id="使用纹理">使用纹理<a href="post/Learn-OpenGL-Lesson-Four#使用纹理"></a></h3><p>我们也需要在<code>onDrawFrame(GL10 gl)</code>方法中添加一些代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mTextureUniformHandle = GLES20.glGetUniformLocation(mProgramHandle, <span class="string">"u_Texture"</span>);</span><br><span class="line">    mTextureCoordinateHandle = GLES20.glGetAttribLocation(mProgramHandle, <span class="string">"a_TexCoordinate"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将纹理单元设置为纹理单元0</span></span><br><span class="line">    GLES20.glActiveTexture(GLES20.GL_TEXTURE0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将纹理绑定到这个单元</span></span><br><span class="line">    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTextureDataHandle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过绑定到纹理单元0，告诉纹理标准采样器在着色器中使用此纹理</span></span><br><span class="line">    GLES20.glUniform1i(mTextureUniformHandle, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>我们得到着色器中的纹理数据和纹理坐标句柄。在OpenGL中，纹理能在着色之前，需要绑定到纹理单元。纹理单元是读取纹理并实际将它传入着色器的中，因此可以再屏幕上显示。不同的图形芯片有不同数量的纹理单元，因此在使用它们之前，您需要检查是否存在其他纹理单元。</p><p>首先，我们告诉OpenGL我们想设置使用的纹理单元到第一个单元，纹理单元0。然后自动绑定纹理到第一个单元，通过调用<code>glBindTexture()</code>。最后，我们告诉OpenGL，我们想将<code>mTextureUniformHandle</code>绑定到第一个纹理单元，它引用了片段着色器中<code>u_Texture</code>属性。</p><p>简而言之：</p><ol><li>设置纹理单元</li><li>绑定纹理到这个单元</li><li>将此单元指定给片段着色器中的纹理标准</li></ol><p>根据需要重复多个纹理。</p><h3 id="进一步练习">进一步练习<a href="post/Learn-OpenGL-Lesson-Four#进一步练习"></a></h3><p>一旦您做到这儿，您就完成的差不多了！当然这这并没有您预期的那么糟糕…或者确实糟糕？😉作为下一个练习，尝试通过加载另一个纹理，将其绑定到另一个单元，并在着色器中使用它。</p><h2 id="回顾">回顾<a href="post/Learn-OpenGL-Lesson-Four#回顾"></a></h2><p>现在我们回顾一下所有的着色器代码，以及我们添加了一个新的帮助功能用来从资源目录读取着色器代码，而不是存储在java字符串中：</p><h3 id="顶点着色器-all">顶点着色器 all<a href="post/Learn-OpenGL-Lesson-Four#顶点着色器-all"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVPMatrix;                      <span class="comment">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVMatrix;                       <span class="comment">// 一个表示组合model、view矩阵的常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Position;                     <span class="comment">// 我们将要传入的每个顶点的位置信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Color;                        <span class="comment">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> a_Normal;                       <span class="comment">// 我们将要传入的每个顶点的法线信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec2</span> a_TexCoordinate;                <span class="comment">// 我们将要传入的每个顶点的纹理坐标信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Position;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Normal;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> v_TexCoordinate;                  <span class="comment">// 这将会传入到片段着色器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点着色器入口点</span></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 传入纹理坐标</span></span><br><span class="line">   v_TexCoordinate = a_TexCoordinate;</span><br><span class="line">   <span class="comment">// 将顶点位置转换成眼睛空间的位置</span></span><br><span class="line">   v_Position = <span class="type">vec3</span>(u_MVMatrix * a_Position);</span><br><span class="line">   <span class="comment">// 传入颜色</span></span><br><span class="line">   v_Color = a_Color;</span><br><span class="line">   <span class="comment">// 将法线的方向转换在眼睛空间</span></span><br><span class="line">   v_Normal = <span class="type">vec3</span>(u_MVMatrix * <span class="type">vec4</span>(a_Normal, <span class="number">0.0</span>));</span><br><span class="line">   <span class="comment">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class="line">   <span class="comment">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class="line">   <span class="built_in">gl_Position</span> = u_MVPMatrix * a_Position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="片段着色器-all">片段着色器 all<a href="post/Learn-OpenGL-Lesson-Four#片段着色器-all"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>; <span class="comment">//我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> u_Texture;  <span class="comment">// 传入纹理</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> u_LightPos; <span class="comment">// 光源在眼睛空间的位置</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Position; <span class="comment">// 插入的位置</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color; <span class="comment">// 插入的位置颜色</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Normal; <span class="comment">// 插入的位置法线</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec2</span> v_TexCoordinate; <span class="comment">// 插入的纹理坐标</span></span><br><span class="line"><span class="type">void</span> main()  <span class="comment">// 片段着色器入口</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 将用于哀减</span></span><br><span class="line">   <span class="type">float</span> <span class="built_in">distance</span> = <span class="built_in">length</span>(u_LightPos - v_Position);</span><br><span class="line">   <span class="comment">// 获取从光源到顶点方向的光线向量</span></span><br><span class="line">   <span class="type">vec3</span> lightVector = <span class="built_in">normalize</span>(u_LightPos - v_Position);</span><br><span class="line">   <span class="comment">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class="line">   <span class="type">float</span> diffuse = <span class="built_in">max</span>(<span class="built_in">dot</span>(v_Normal, lightVector), <span class="number">0.1</span>);</span><br><span class="line">   <span class="comment">// 根据距离哀减光线</span></span><br><span class="line">   diffuse = diffuse * (<span class="number">1.0</span> / (<span class="number">1.0</span> + (<span class="number">0.25</span> * <span class="built_in">distance</span> * <span class="built_in">distance</span>)));</span><br><span class="line">   <span class="comment">// 添加环境照明</span></span><br><span class="line">   diffuse = diffuse + <span class="number">0.3</span>;</span><br><span class="line">   <span class="comment">// 颜色乘以亮度哀减和纹理值得到最终的颜色</span></span><br><span class="line">   <span class="built_in">gl_FragColor</span> = v_Color * diffuse * <span class="built_in">texture2D</span>(u_Texture, v_TexCoordinate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怎样从raw资源目录中读取文本？">怎样从raw资源目录中读取文本？<a href="post/Learn-OpenGL-Lesson-Four#怎样从raw资源目录中读取文本？"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RawResourceReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readTextFileFromRawResource</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> <span class="keyword">int</span> resurceId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> InputStream inputStream = context.getResources().openRawResource(resurceId);</span><br><span class="line">        <span class="keyword">final</span> InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream);</span><br><span class="line">        <span class="keyword">final</span> BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line"></span><br><span class="line">        String nextLine;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> StringBuilder body = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((nextLine = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                body.append(nextLine).append(<span class="string">'\n'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bufferedReader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> body.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-Four#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li></ul><h2 id="打包教材">打包教材<a href="post/Learn-OpenGL-Lesson-Four#打包教材"></a></h2><p>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：Android Lesson Four: Introducing Basic Texturing&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-four-introducing-basic-texturing/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-four-introducing-basic-texturing/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL Android课程三：使用每片段照明</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three/index.html</id>
    <published>2019-01-26T09:55:49.000Z</published>
    <updated>2019-04-08T08:32:50.360Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：Android Lesson Three: Moving to Per-Fragment Lighting<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-three-moving-to-per-fragment-lighting/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-three-moving-to-per-fragment-lighting/</a><br><a id="more"></a></p><hr><h1 id="使用每片段照明">使用每片段照明<a href="post/Learn-OpenGL-Lesson-Three#使用每片段照明"></a></h1><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>欢迎来到第三课！这节课，我们将会在<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">第二课</a>的基础上，<br>学习如何使用每像素技术来达到相同的照明。<br>简单的正方体即使使用标准的漫射照明我们也能看到差异。</td><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190126183929.png" alt="screenshot"></td></tr></tbody></table></div></div><h2 id="前提条件">前提条件<a href="post/Learn-OpenGL-Lesson-Three#前提条件"></a></h2><p>本系列的每节课都以前面的课程为基础，本节课是<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">第二课</a>的补充，因此请务在阅读了之前的课程后再来回顾。</p><blockquote><p>下面是本系列课程的前几课：</p></blockquote><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li></ul><h2 id="什么是每像素照明">什么是每像素照明<a href="post/Learn-OpenGL-Lesson-Three#什么是每像素照明"></a></h2><p>随着着色器的使用，每像素照明在游戏中是一种相对较新的现象。许多有名的旧游戏，例如原版的<a href="https://en.wikipedia.org/wiki/Half-Life_(video_game)" target="_blank" rel="noopener">半条命</a>，都是在着色器之前开发出来的，主要使用静态照明，通过一些技巧模拟动态照明，使用每顶点（也称为<a href="http://en.wikipedia.org/wiki/Gouraud_shading" target="_blank" rel="noopener">Gouraud阴影</a>）照明或其他技术，如动态<a href="https://en.wikipedia.org/wiki/Lightmap" target="_blank" rel="noopener">光照贴图</a>。</p><p>光照贴图可以提供非常好的效果，有时可以比单独的着色器提供更好的效果，因为可以预先计算昂贵的光线计算。但缺点是它们占用了大量内存并使用它们进行动态照明仅限于简单的计算。</p><p>使用着色器，现在很多这些计算转给GPU，这可以完成更多实时的效果。</p><h2 id="从每顶点照明转移到每片段照明">从每顶点照明转移到每片段照明<a href="post/Learn-OpenGL-Lesson-Three#从每顶点照明转移到每片段照明"></a></h2><p>这本课中，我们将针对每顶点解决方案和每片段解决方案查看相同的照明代码。尽管我将这种类型称为每像素，但在OpenGL ES中我们实际上使用片段，并且几个片段可以贡献一个像素的最终值。</p><p>手机的GPU变得越来越快，但是性能仍然是一个问题。对于“软”照明例如地形，每顶点照明可能足够好。确保您在质量和速度之间取得适当的平衡。</p><p>在某些情况下可以看到两种类型的照明之间的显著差异。看看下面的屏幕截图：</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190127004415.png" alt="Per vertex lighting"><br>每顶点照明；<br>在正方形四个顶点为中心</td><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190127004455.png" alt="Per fragment lighting"><br>每片段照明；<br>在正方形四个顶点为中心</td><td>在左图的每顶点照明中正方体的<br>正面看起来像是平面阴影，不能<br>表明附近有光源。这是因为正面<br>的四个顶点和光源距离差不多相<br>等，并且四个点的低光强度被简<br>单的插入两个三角形构成的正面。<hr>相对比，每片段照明很好的<br>显示了亮点特性</td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190127004542.png" alt="Per vertex lighting"><br>每顶点照明；<br>在正方形角落</td><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190127004615.png" alt="Per fragment lighting"><br>每片段照明；<br>在正方形角落</td><td>左图显示了一个<a href="http://en.wikipedia.org/wiki/Gouraud_shading" target="_blank" rel="noopener">Gouraud阴影</a><br>立方体。当光源移动到立方体正<br>面角落时，可以看到类似三角形<br>的效果。这是因为正面实际上是<br>由两个三角形组成，并且在每个<br>三角形不同方向插值，我们能看<br>到构成立方体的基础几何图形。<hr>每片段的版本显示上没有此类插<br>值的问题并且它在边缘附近显示<br>了一个漂亮的圆形高光。</td></tr></tbody></table></div></div><h3 id="每顶点照明概述">每顶点照明概述<a href="post/Learn-OpenGL-Lesson-Three#每顶点照明概述"></a></h3><p>我们来看看<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">第二课</a>讲的着色器；在该课程中可以找到详细的着色器说明。</p><h3 id="顶点着色器">顶点着色器<a href="post/Learn-OpenGL-Lesson-Three#顶点着色器"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVPMatrix;      <span class="comment">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVMatrix;       <span class="comment">// 一个表示组合model、view矩阵的常量</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> u_LightPos;       <span class="comment">// 光源在眼睛空间的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Position;     <span class="comment">// 我们将要传入的每个顶点的位置信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Color;        <span class="comment">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> a_Normal;       <span class="comment">// 我们将要传入的每个顶点的法线信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;          <span class="comment">// 这将被传入片段着色器</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main()                    <span class="comment">// 顶点着色器入口</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 将顶点转换成眼睛空间</span></span><br><span class="line">   <span class="type">vec3</span> modelViewVertex = <span class="type">vec3</span>(u_MVMatrix * a_Position);</span><br><span class="line"><span class="comment">// 将法线的方向转换成眼睛空间</span></span><br><span class="line">   <span class="type">vec3</span> modelViewNormal = <span class="type">vec3</span>(u_MVMatrix * <span class="type">vec4</span>(a_Normal, <span class="number">0.0</span>));</span><br><span class="line"><span class="comment">// 将用于哀减</span></span><br><span class="line">   <span class="type">float</span> <span class="built_in">distance</span> = <span class="built_in">length</span>(u_LightPos - modelViewVertex);</span><br><span class="line"><span class="comment">// 获取从光源到顶点方向的光线向量</span></span><br><span class="line">   <span class="type">vec3</span> lightVector = <span class="built_in">normalize</span>(u_LightPos - modelViewVertex);</span><br><span class="line"><span class="comment">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class="line">   <span class="type">float</span> diffuse = <span class="built_in">max</span>(<span class="built_in">dot</span>(modelViewNormal, lightVector), <span class="number">0.1</span>);</span><br><span class="line"><span class="comment">// 根据距离哀减光线</span></span><br><span class="line">   diffuse = diffuse * (<span class="number">1.0</span> / (<span class="number">1.0</span> + (<span class="number">0.25</span> * <span class="built_in">distance</span> * <span class="built_in">distance</span>)));</span><br><span class="line"><span class="comment">// 将颜色乘以亮度，它将被插入三角形中</span></span><br><span class="line">   v_Color = a_Color * diffuse;</span><br><span class="line"><span class="comment">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class="line"><span class="comment">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class="line">   <span class="built_in">gl_Position</span> = u_MVPMatrix * a_Position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="片段着色器">片段着色器<a href="post/Learn-OpenGL-Lesson-Three#片段着色器"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>;     <span class="comment">// 我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;        <span class="comment">// 这是从三角形每个片段内插的顶点着色器的颜色</span></span><br><span class="line"><span class="type">void</span> main()                  <span class="comment">// 片段着色器入口</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">gl_FragColor</span> = v_Color;   <span class="comment">// 直接将颜色传递</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如您所见，大部分工作都在我们的着色器中做的。转移到每片段着色照明意味着，我们的片段着色器还有更多的工作要做。</p><h3 id="实现每片段照明">实现每片段照明<a href="post/Learn-OpenGL-Lesson-Three#实现每片段照明"></a></h3><p>以下是移动到每片段照明后的代码的样子。</p><h3 id="顶点着色器-new">顶点着色器 new<a href="post/Learn-OpenGL-Lesson-Three#顶点着色器-new"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVPMatrix;    <span class="comment">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">mat4</span> u_MVMatrix;     <span class="comment">// 一个表示组合model、view矩阵的常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Position;   <span class="comment">// 我们将要传入的每个顶点的位置信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec4</span> a_Color;      <span class="comment">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class="line"><span class="keyword">attribute</span> <span class="type">vec3</span> a_Normal;     <span class="comment">// 我们将要传入的每个顶点的法线信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Position;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;</span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Normal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顶点着色器入口点</span></span><br><span class="line"><span class="type">void</span> main()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 将顶点位置转换成眼睛空间的位置</span></span><br><span class="line">   v_Position = <span class="type">vec3</span>(u_MVMatrix * a_Position);</span><br><span class="line">   <span class="comment">// 传入颜色</span></span><br><span class="line">   v_Color = a_Color;</span><br><span class="line">   <span class="comment">// 将法线的方向转换在眼睛空间</span></span><br><span class="line">   v_Normal = <span class="type">vec3</span>(u_MVMatrix * <span class="type">vec4</span>(a_Normal, <span class="number">0.0</span>));</span><br><span class="line">   <span class="comment">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class="line">   <span class="comment">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class="line">   <span class="built_in">gl_Position</span> = u_MVPMatrix * a_Position;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶点着色器比之前更加的简单。我们添加了两个线性插值变量用来传入到片段着色器：顶点位置和顶点法线。它们将在片段着色器计算光亮的时候被使用。</p><h3 id="片段着色器-new">片段着色器 new<a href="post/Learn-OpenGL-Lesson-Three#片段着色器-new"></a></h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">precision</span> <span class="keyword">mediump</span> <span class="type">float</span>; <span class="comment">//我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class="line"><span class="keyword">uniform</span> <span class="type">vec3</span> u_LightPos; <span class="comment">// 光源在眼睛空间的位置</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Position; <span class="comment">// 插入的位置</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec4</span> v_Color;    <span class="comment">// 插入的位置颜色</span></span><br><span class="line"><span class="keyword">varying</span> <span class="type">vec3</span> v_Normal;   <span class="comment">// 插入的位置法线</span></span><br><span class="line"><span class="type">void</span> main()              <span class="comment">// 片段着色器入口</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 将用于哀减</span></span><br><span class="line">   <span class="type">float</span> <span class="built_in">distance</span> = <span class="built_in">length</span>(u_LightPos - v_Position);</span><br><span class="line">   <span class="comment">// 获取从光源到顶点方向的光线向量</span></span><br><span class="line">   <span class="type">vec3</span> lightVector = <span class="built_in">normalize</span>(u_LightPos - v_Position);</span><br><span class="line">   <span class="comment">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class="line">   <span class="type">float</span> diffuse = <span class="built_in">max</span>(<span class="built_in">dot</span>(v_Normal, lightVector), <span class="number">0.1</span>);</span><br><span class="line">   <span class="comment">// 根据距离哀减光线</span></span><br><span class="line">   diffuse = diffuse * (<span class="number">1.0</span> / (<span class="number">1.0</span> + (<span class="number">0.25</span> * <span class="built_in">distance</span> * <span class="built_in">distance</span>)));</span><br><span class="line">   <span class="comment">// 颜色乘以亮度哀减得到最终的颜色</span></span><br><span class="line">   <span class="built_in">gl_FragColor</span> = v_Color * diffuse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用每片段照明，我们的片段着色器还有更多的工作要做。我们基本上将<a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law" target="_blank" rel="noopener">朗伯计算</a>和哀减移到了每像素级别，这为我们提供了更逼真的照明，而无需添加更多顶点。</p><h2 id="进一步练习">进一步练习<a href="post/Learn-OpenGL-Lesson-Three#进一步练习"></a></h2><p>我们可以在顶点着色器中计算距离，然后赋值给变量通过线性插值传入片段着色器吗？</p><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-Three#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li></ul><h2 id="打包教材">打包教材<a href="post/Learn-OpenGL-Lesson-Three#打包教材"></a></h2><p>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：Android Lesson Three: Moving to Per-Fragment Lighting&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-three-moving-to-per-fragment-lighting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-three-moving-to-per-fragment-lighting/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL Android课程二：环境光和漫射光</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two/index.html</id>
    <published>2019-01-23T07:50:51.000Z</published>
    <updated>2019-04-08T06:56:23.990Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：OpenGL Android Lesson One: Getting Started<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-two-ambient-and-diffuse-lighting/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-two-ambient-and-diffuse-lighting/</a><br><a id="more"></a></p><hr><h1 id="环境光和漫射光">环境光和漫射光<a href="post/Learn-OpenGL-Lesson-Two#环境光和漫射光"></a></h1><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>欢迎来到第二课，我们将学习如何使用<br>着色器实现<a href="https://en.wikipedia.org/wiki/Lambertian_reflectance" target="_blank" rel="noopener">朗伯反射（ Lambertian reflectance ）</a>，也称为标准漫射照明。<br><br>在OpengGLES2，我们需要实现我们自己的照明算法，<br>因此我们要学会数学如何工作以及如何应用到我们的场景中。</td><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190123163828.png" alt="screenshot"></td></tr></tbody></table></div></div><h2 id="阅读本文前提条件">阅读本文前提条件<a href="post/Learn-OpenGL-Lesson-Two#阅读本文前提条件"></a></h2><p>本系列的每节课都以前面的课程为基础。在开始前，<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">请看第一课</a>，因为本课程将以此为基础概念介绍。</p><h2 id="什么是光">什么是光<a href="post/Learn-OpenGL-Lesson-Two#什么是光"></a></h2><p>没错！一个没有光的世界是昏暗的。没有[光]，我们甚至不能感知世界或我们周围的物体，除了声音和触摸等其他感官。<br>光向我们展示了物体是明亮还是昏暗，是远还是近，它的角度是什么。</p><p>在现实世界，我们所感知的光实际是数万亿微小粒子的聚集，称为光子。它从光源飞出，反弹数千或数百万次，最终到达我们的眼镜我们称之为光。</p><p>我们如何通过计算机图形模拟光的影响？<br>有两种流行的方法：<a href="http://en.wikipedia.org/wiki/Ray_tracing_(graphics)" target="_blank" rel="noopener">光线追踪</a>和<a href="http://en.wikipedia.org/wiki/Rasterisation" target="_blank" rel="noopener">光栅化</a><br>光线跟踪的工作原理是通过数学计算跟踪实际光线并查看它们的最终位置。该技术可以得到非常精准和逼真的结果，但缺点是模拟所有这些光线的计算成本非常高，并且通常对于实时渲染来说太慢了。<br>由于这个限制，大多数实时图形计算使用光栅化，它通过近似值模拟光照。鉴于当前游戏的真实性，光栅化看起来非常好，即使在手机上也可以快速实现实时图形。OpengGL ES主要是一个光栅化库，因此我们主要关注这个。</p><h3 id="不同种类的光">不同种类的光<a href="post/Learn-OpenGL-Lesson-Two#不同种类的光"></a></h3><p>事实证明，我们可以抽象出光的工作方式，并提出三种基本的光照方式</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190123234400.png" alt="Ambient"><br>环境光</td><td><strong>环境光</strong><br>这是基本的照明水平，似乎遍布整个场景。它似乎不是来自任何<br>光源的光，因为它在到达你之前已经反弹了很多次。这种类型的光<br>在户外的阴天可以体验，或者在户内作为许多不同光源的积累影响。<br>我们可以为物体或场景设置一个基本的亮度，而不是为所有的<br>光单独计算。</td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190124093759.png" alt="diffuse"><br>环境照明和漫射照明<br>的例子</td><td><strong>漫射照明</strong><br>这是直接从一个物体上跳弹后到达您眼睛中的光，物体的亮度<br>随着它与照明的角度而变化，面向灯光的方向比其他角度更加明亮<br>此外，无论我们相对于物体的角度怎样，我们都觉得物体是相同的<br>亮度，这也被称为<a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law" target="_blank" rel="noopener">Lambert的余弦定律</a>。漫射照明或朗伯反射率在<br>日常生活中很常见，您可以在室内灯光照明的白墙上轻松看到。</td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190124105013.png" alt="specular"><br>镜面高光的一个例子</td><td><strong>镜面照明</strong><br>与漫射照明不同，当我们相对于物体移动时，镜面光照也会<br>发生改变。这给物体带来“光泽”，并且可以在“更光滑”的表面<br>上看到，例如玻璃和其他有光泽的物体。</td></tr></tbody></table></div></div><h3 id="模拟光">模拟光<a href="post/Learn-OpenGL-Lesson-Two#模拟光"></a></h3><p>正如3D场景中的3中主要类型的光照一样，还有三种主要类型的光源：定向光源，点光源，聚光灯，这些也可以在日常生活中轻松看到。</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190124112017.png" alt="Directional lighting"><br>一个明亮的风景</td><td><strong>定向光源</strong><br>定向光照通常来自于一个很远的光源，它可以均匀的照亮整个<br>场景达到相同的亮度。这种光源是最简单的类型，无论您处在<br>场景哪里，光照都具有相同的强度和方向。</td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190124112915.png" alt="Point lighting"><br>一个点光源的例子</td><td><strong>点光源</strong><br>点光源可以添加到场景中，以提供更多样化和逼真的照明。<br>点光的照射<a href="https://en.wikipedia.org/wiki/Inverse-square_law" target="_blank" rel="noopener">随着距离而下降</a>，并且它的光线在所有方向上<br>向外传播，光源位于中心。</td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190124113930.png" alt="Spot lighting"><br>聚光灯</td><td><strong>聚光灯</strong><br>除了具有点光源的特性外，聚光灯也有光哀减的方向，<br>通常呈锥形。</td></tr></tbody></table></div></div><h3 id="数学">数学<a href="post/Learn-OpenGL-Lesson-Two#数学"></a></h3><p>本节课，我们来看看来自一个点光源的环境照明和漫射照明。</p><h3 id="环境照明">环境照明<a href="post/Learn-OpenGL-Lesson-Two#环境照明"></a></h3><p>环境照明其实是<a href="https://en.wikipedia.org/wiki/Radiosity_(computer_graphics)" target="_blank" rel="noopener">间接漫射照明</a>，但它也可以被认为是遍布整个场景的低级光。如果我们这么想，那么它将非常好计算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终颜色 = 材质颜色 * 环境光颜色</span></span><br><span class="line">final color = material color * ambient light color</span><br></pre></td></tr></table></figure><p>例如，我们有个红色的物体和一个暗白色的环境照明。我们假设三个颜色（红，绿，蓝）的数组存储颜色，使用<a href="https://en.wikipedia.org/wiki/RGB_color_model" target="_blank" rel="noopener">RGB颜色模型</a>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终颜色 = 红色 * 暗白色 = 暗红色</span></span><br><span class="line">final color = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125; * &#123;<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>&#125; = &#123;<span class="number">0.1</span>, <span class="number">0.0</span>, <span class="number">0.0</span>&#125;</span><br></pre></td></tr></table></figure><p>物体的最终颜色将是暗红色，如果您有一个被昏暗的白光照明的红色物体，那么这就是您的预期。基本的环境光真的没有比这更多的了，除非您想加入更先进的照明技术，如光能传递。</p><h3 id="漫射照明-点光源">漫射照明-点光源<a href="post/Learn-OpenGL-Lesson-Two#漫射照明-点光源"></a></h3><p>对于漫射照明，我们需要添加哀减和光源位置。光源位置将用来计算光线和表面的角度，它将影响表面的整体光照水平。它还将用于计算光源到表面的距离，这决定了光在这个点上的强度。</p><h4 id="第一步：计算朗伯因子（lambert-factor）">第一步：计算朗伯因子（lambert factor）<a href="post/Learn-OpenGL-Lesson-Two#第一步：计算朗伯因子（lambert-factor）"></a></h4><p>我们最重要的是需要弄清楚表面和光线之间的角度。面向光直射的表面因该全强度照射，而倾斜的表面因该得到较少的照射，比较合适的计算方式是使用<a href="https://en.wikipedia.org/wiki/Lambert%27s_cosine_law" target="_blank" rel="noopener">Lambert的余弦定律</a>。<br>果我们有两个向量，一个是从光到表面上的一个点，第二个是<a href="https://en.wikipedia.org/wiki/Normal_(geometry)" target="_blank" rel="noopener">表面的法线</a>（如果表面是平面，则表面法线是指向上或垂直于该表面的矢量），然后我们可以通过对每个向量进行归一化来计算余弦，使其长度为1，然后通过计算两个向量的<a href="https://en.wikipedia.org/wiki/Dot_product" target="_blank" rel="noopener">点积（数量积）</a>。<br>这个操作可以由OpenGL ES 2轻松完成。</p><p>我们称这位朗伯因子，它的取值范围在0~1之间</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 光线向量 = 光源位置 - 物体位置</span></span><br><span class="line">light <span class="built_in">vector</span> = light position - object position</span><br><span class="line"><span class="comment">// 余弦 = 物体法线和归一化后的光线向量的点积</span></span><br><span class="line">cosine = dot product(object normal, normalize(light <span class="built_in">vector</span>))</span><br><span class="line"><span class="comment">// 朗伯因子 = 取余弦和0中最大的</span></span><br><span class="line">lambert factor = max(cosine, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>首先我们通过光源位置减去物体位置得到光线向量，然后我们通过物体法线和光向量的点积得到余弦。我们标准化光向量，这意味着改变它的长度，长度为1，这个物体的法线长度也是1，两个归一化向量的点积得到他们之间的余弦。因为点积的取值范围是-1~1，所以我们将其限制到0~1。</p><p>这儿有个处在原点的平面，其表面法线指向天空的例子。</p><blockquote><p>光的位置在{0, 10, -10}，我们想要计算在原点的光。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 光线向量</span></span><br><span class="line">light <span class="built_in">vector</span> = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">-10</span>&#125; - &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125; = &#123;<span class="number">0</span>, <span class="number">10</span>, <span class="number">-10</span>&#125;</span><br><span class="line"><span class="comment">// 物体法线</span></span><br><span class="line">object normal = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简洁的说，如果们沿着光线矢量走，我们到达光源的位置。为了归一化矢量，我们将每个分量除以矢量长度：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 光线向量长度 = 平方根(0*0 + 10*10 + (-10 * -10)) = 平方根(200) = 14.14</span></span><br><span class="line">light <span class="built_in">vector</span> length = square root(<span class="number">0</span>*<span class="number">0</span> + <span class="number">10</span>*<span class="number">10</span> + (<span class="number">-10</span> * <span class="number">-10</span>)) = square root(<span class="number">200</span>) = <span class="number">14.14</span></span><br><span class="line"><span class="comment">// 归一化光线向量</span></span><br><span class="line">normalize light <span class="built_in">vector</span> = &#123;<span class="number">0</span>, <span class="number">10</span>/<span class="number">14.14</span>, <span class="number">-10</span>/<span class="number">14.14</span>&#125; = &#123;<span class="number">0</span>, <span class="number">0.707</span>, <span class="number">-0.707</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后我们计算点积：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点积</span></span><br><span class="line"><span class="function">dot <span class="title">product</span><span class="params">(&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0.707</span>, <span class="number">-0.707</span>&#125;)</span> </span>= (<span class="number">0</span> * <span class="number">0</span>) + (<span class="number">1</span> * <span class="number">0.707</span>) + (<span class="number">0</span> * <span class="number">-0.707</span>) = <span class="number">0.707</span></span><br></pre></td></tr></table></figure><p><a href="http://programmedlessons.org/VectorLessons/vch07/vch07_5.html" target="_blank" rel="noopener">这里有个一对点积计算很好的解释</a></p><blockquote><p>最后我们限制范围：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 朗伯因子</span></span><br><span class="line">lambert factor = max(<span class="number">0.707</span>, <span class="number">0</span>) = <span class="number">0.707</span></span><br></pre></td></tr></table></figure><p>OpenGL ES 2的着色器语言内置了对其中一些函数的支持，因此我们不需要手动完成所有数学运算，但它仍然有助于理解正在发生的事情。</p><h4 id="第二步：计算哀减系数">第二步：计算哀减系数<a href="post/Learn-OpenGL-Lesson-Two#第二步：计算哀减系数"></a></h4><p>接下来，我们需要计算哀减。来自光源的实际光哀减遵循<a href="https://en.wikipedia.org/wiki/Inverse-square_law" target="_blank" rel="noopener">反平方定律</a></p><blockquote><p>也可以这样表示：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 亮度 = 1 / 距离的平方</span></span><br><span class="line">luminosity = <span class="number">1</span> / (distance * distance)</span><br></pre></td></tr></table></figure><blockquote><p>回到我们的列子，因为我们有光线长度为14.14，这儿我们最终的亮度：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luminosity = <span class="number">1</span> / (<span class="number">14.14</span> * <span class="number">14.14</span>) = <span class="number">1</span> / <span class="number">200</span> = <span class="number">0.005</span></span><br></pre></td></tr></table></figure><p>正如您所见，反平方定律会导致距离的强烈哀减。这就是点光源的光在现实世界中的作用，但是由于我们图形展示范围有限，控制这个哀减系数是非常有用的，因此我们仍然能获得逼真的照明而不会让其看起来很昏暗。</p><h4 id="第三步：计算最终颜色">第三步：计算最终颜色<a href="post/Learn-OpenGL-Lesson-Two#第三步：计算最终颜色"></a></h4><blockquote><p>现在我们知道了余弦和哀减度，我们可以计算我们最终的亮度：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最终颜色 = 材质颜色 * （光的颜色 * 朗伯因子 * 亮度）</span></span><br><span class="line">final color = material color * (light color * lambert factor * luminosity)</span><br></pre></td></tr></table></figure><blockquote><p>继续我们之前的红色物体和白光源的例子，这儿计算最终颜色：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final color = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125; * (&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125; * <span class="number">0.707</span> * <span class="number">0.005</span>) = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125; * &#123;<span class="number">0.0035</span>, <span class="number">0.0035</span>, <span class="number">0.0035</span>&#125; = &#123;<span class="number">0.0035</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>回顾一下，对于漫射照明，我们需要使用表面和光线之间的角度以及距离，用来计算最终的整体漫射亮度。</p><blockquote><p>以下是步骤：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">light <span class="built_in">vector</span> = light position - object position</span><br><span class="line">cosine = dot product(object normal, normalize(light <span class="built_in">vector</span>))</span><br><span class="line">lambert factor = mac(cosine, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line">luminosity = <span class="number">1</span> / (distance * distance)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步</span></span><br><span class="line">final color = material color * (light color * lambert factor * luminosity)</span><br></pre></td></tr></table></figure><h3 id="将这一切放到OpenGL-ES-2着色器中">将这一切放到OpenGL ES 2着色器中<a href="post/Learn-OpenGL-Lesson-Two#将这一切放到OpenGL-ES-2着色器中"></a></h3><h4 id="顶点着色器">顶点着色器<a href="post/Learn-OpenGL-Lesson-Two#顶点着色器"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String vertexShader =</span><br><span class="line">        <span class="string">"uniform mat4 u_MVPMatrix;      \n"</span> + <span class="comment">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class="line">        <span class="string">"uniform mat4 u_MVMatrix;       \n"</span> + <span class="comment">// 一个表示组合model、view矩阵的常量</span></span><br><span class="line">        <span class="string">"uniform vec3 u_LightPos;       \n"</span> + <span class="comment">// 光源在眼睛空间（相对于相机视角）的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"attribute vec4 a_Position;     \n"</span> + <span class="comment">// 我们将要传入的每个顶点的位置信息</span></span><br><span class="line">        <span class="string">"attribute vec4 a_Color;        \n"</span> + <span class="comment">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class="line">        <span class="string">"attribute vec3 a_Normal;       \n"</span> + <span class="comment">// 我们将要传入的每个顶点的法线信息</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"varying vec4 v_Color;          \n"</span> + <span class="comment">// 这将被传入片段着色器</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"void main()                    \n"</span> + <span class="comment">// 顶点着色器入口</span></span><br><span class="line">        <span class="string">"&#123;                              \n"</span> +</span><br><span class="line">        <span class="comment">// 将顶点转换成眼睛空间（相对于相机视角）</span></span><br><span class="line">        <span class="string">"   vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);                \n"</span> +</span><br><span class="line">        <span class="comment">// 将法线的方向转换成眼睛空间（相对于相机视角）</span></span><br><span class="line">        <span class="string">"   vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));       \n"</span> +</span><br><span class="line">        <span class="comment">// 将用于哀减</span></span><br><span class="line">        <span class="string">"   float distance = length(u_LightPos - modelViewVertex);               \n"</span> +</span><br><span class="line">        <span class="comment">// 获取从光源到顶点方向的光线向量</span></span><br><span class="line">        <span class="string">"   vec3 lightVector = normalize(u_LightPos - modelViewVertex);          \n"</span> +</span><br><span class="line">        <span class="comment">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class="line">        <span class="string">"   float diffuse = max(dot(modelViewNormal, lightVector), 0.1);         \n"</span> +</span><br><span class="line">        <span class="comment">// 根据距离哀减光线</span></span><br><span class="line">        <span class="string">"   diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));    \n"</span> +</span><br><span class="line">        <span class="comment">// 将颜色乘以亮度，它将被插入三角形中</span></span><br><span class="line">        <span class="string">"   v_Color = a_Color * diffuse;                                         \n"</span> +</span><br><span class="line">        <span class="comment">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class="line">        <span class="comment">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class="line">        <span class="string">"   gl_Position = u_MVPMatrix * a_Position;                              \n"</span> +</span><br><span class="line">        <span class="string">"&#125;                                                                       \n"</span>;</span><br></pre></td></tr></table></figure><p>这里有相当多的事情要做。我们在<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">第一课</a>讲到过我们要有一个model/view/projection的组合矩阵，但是我们还要添加了一个model/view矩阵。为什么？因为我们将需要这个矩阵去计算光源位置到当前顶点位置之间的距离。对于漫射照明，无论您使用世界空间（model矩阵）或眼睛空间（model/view矩阵）只要你能计算出合适的距离和角度实际上都没有问题。</p><p>我们传入顶点的颜色和位置信息，以及它的<a href="https://en.wikipedia.org/wiki/Normal_(geometry)" target="_blank" rel="noopener">法线</a>。我们会将最终的颜色传入片段着色器，它将在顶点之间插值，这也被称为<a href="https://en.wikipedia.org/wiki/Gouraud_shading" target="_blank" rel="noopener">Gouraud着色法</a>。</p><p>让我们来看看着色器每一部分的意义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将顶点转换成眼睛空间（相对于相机视角）</span></span><br><span class="line"><span class="string">"   vec3 modelViewVertex = vec3(u_MVMatrix * a_Position);                \n"</span></span><br></pre></td></tr></table></figure><p>因为我们是在眼睛空间观察光源位置，我们转换当前的顶点位置到眼睛空间的坐标系中，因此我们能计算出对应的距离和角度。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将法线的方向转换成眼睛空间（相对于相机视角）</span></span><br><span class="line"><span class="string">"   vec3 modelViewNormal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));       \n"</span> +</span><br></pre></td></tr></table></figure><p>我们也需要转换法线的方向。这里我们只是想上面位置一样做了个常规乘法，但是如果model或view矩阵做过旋转或倾斜，那么将不能工作：我们实际上需要通过将法线乘以原始矩阵的反转来消除倾斜或缩放的影响。<a href="https://web.archive.org/web/20150101061328/http://www.arcsynthesis.org/gltut/Illumination/Tut09%20Normal%20Transformation.html" target="_blank" rel="noopener">这个网站很好的解释了为什么我们必须这么做</a></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将用于哀减</span></span><br><span class="line"><span class="string">"   float distance = length(u_LightPos - modelViewVertex);               \n"</span></span><br></pre></td></tr></table></figure><p>如前面数学部分所示，我们需要这个距离去计算哀减系数</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取从光源到顶点方向的光线向量</span></span><br><span class="line"><span class="string">"   vec3 lightVector = normalize(u_LightPos - modelViewVertex);          \n"</span></span><br></pre></td></tr></table></figure><p>我们也需要光线向量去计算朗伯反射因子</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算光线矢量和顶点法线的点积，如果法线和光线矢量指向相同的方向，那么它将获得最大的照明</span></span><br><span class="line"><span class="string">"   float diffuse = max(dot(modelViewNormal, lightVector), 0.1);         \n"</span></span><br></pre></td></tr></table></figure><p>这与上面的数学部分相同，只是在OpenGL ES 2着色器中完成。后面的0.1是一种非常便宜的环境照明方式（最小值将被限制在0.1）。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据距离哀减光线</span></span><br><span class="line"><span class="string">"   diffuse = diffuse * (1.0 / (1.0 + (0.25 * distance * distance)));    \n"</span></span><br></pre></td></tr></table></figure><p>这里和上面的数学部分略有不同。我们将距离的平方缩放0.25以抑制衰减的效应，并且我们还将修改的距离加1，这样当光源非常接近物体时我们就不会过饱和（否则，当距离小于1时，该等式实际上回照亮光源而不是哀减它）。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将颜色乘以亮度，它将被插入三角形中</span></span><br><span class="line"><span class="string">"   v_Color = a_Color * diffuse;                                         \n"</span> +</span><br><span class="line"><span class="comment">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class="line"><span class="comment">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class="line"><span class="string">"   gl_Position = u_MVPMatrix * a_Position;                              \n"</span></span><br></pre></td></tr></table></figure><p>当我们有了最终的光色，我们将它乘以顶点的颜色得到最终输出的颜色，然后我们将这个顶点的位置投影到屏幕上。</p><h4 id="像素着色器">像素着色器<a href="post/Learn-OpenGL-Lesson-Two#像素着色器"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String fragmentShader =</span><br><span class="line">        <span class="string">"precision mediump float;       \n"</span> + <span class="comment">// 我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class="line">                <span class="string">"varying vec4 v_Color;          \n"</span> + <span class="comment">// 这是从三角形每个片段内插的顶点着色器的颜色</span></span><br><span class="line">                <span class="string">"void main()                    \n"</span> + <span class="comment">// 片段着色器入口</span></span><br><span class="line">                <span class="string">"&#123;                              \n"</span> +</span><br><span class="line">                <span class="string">"   gl_FragColor = v_Color;     \n"</span> + <span class="comment">// 直接将颜色传递</span></span><br><span class="line">                <span class="string">"&#125;                              \n"</span>;</span><br></pre></td></tr></table></figure><p>因为我们是在每个顶点的基础上计算光，我们的片段着色器和<a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">上节课</a>一样，我们所做的是将颜色直接传过去。在下节课中，我们将学习每像素照明。</p><h2 id="每顶点照明和每像素照明">每顶点照明和每像素照明<a href="post/Learn-OpenGL-Lesson-Two#每顶点照明和每像素照明"></a></h2><p>这节课我们的关注点在实现每顶点照明。对于具有光滑表面的物体（如地形），或具有许多三角形的物体的漫反射，这通常是足够了。然而，当您的物体没有包含许多顶点时（例如我们的在这个案例中的正方体），或者有尖角，顶点光照可能会导致伪影，因为亮度在多边形上线性插值；当镜面高光添加到图像时，这些伪影也会变得更加明显。更多关于<a href="https://en.wikipedia.org/wiki/Gouraud_shading" target="_blank" rel="noopener">Gouraud着色法</a>的Wiki文章</p><h2 id="正方体的构造">正方体的构造<a href="post/Learn-OpenGL-Lesson-Two#正方体的构造"></a></h2><p>在第一课中，我们将位置和颜色属性打包到一个数组中，但是OpengGL ES 2也允许让我们将属性单独存放：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//X, Y, Z</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span>[] cubePositionData = &#123;</span><br><span class="line">        <span class="comment">// 在OpenGL，逆时针绕组（下面的点事逆时针顺序）是默认的。</span></span><br><span class="line">        <span class="comment">// 这意味着当我们在观察一个三角形时，如果这些电视逆时针的，那么我们正在看"前面"，如果不是我们则正在看背面</span></span><br><span class="line">        <span class="comment">// OpenGL有一个优化，所有背面的三角形都会被剔除，因为它们通常代表一个物体的背面，无论如何都不可见</span></span><br><span class="line">        <span class="comment">// 正面</span></span><br><span class="line">        -<span class="number">1.0F</span>, <span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        -<span class="number">1.0F</span>, -<span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        -<span class="number">1.0F</span>, -<span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, -<span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// R，G，B，A</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span>[] cubeColorData = &#123;</span><br><span class="line">        <span class="comment">// 正面红色</span></span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line">        ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="新的OpenGL-flag">新的OpenGL flag<a href="post/Learn-OpenGL-Lesson-Two#新的OpenGL-flag"></a></h2><p>我们还使用了<code>glEnable()</code>调用启用了剔除和深度缓冲：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用剔除去掉背面</span></span><br><span class="line">GLES20.glEnable(GLES20.GL_CULL_FACE);</span><br><span class="line"><span class="comment">// 启用深度测试</span></span><br><span class="line">GLES20.glEnable(GLES20.GL_DEPTH_TEST);</span><br></pre></td></tr></table></figure><p>作为优化，您可以告诉OpenGL剔除物体背面的三角形。当我们定义正方体时，我们还定义了每个三角形的三个点，以便当我们在查看正面的时候是逆时针的。当我们翻转三角形以便我们到背面时，这些点将会顺时针展示。<br>您只能同时看到一个正方体的三个面，所以这个优化告诉OpenGL不要浪费时间去绘制背面的三角形。</p><p>之后当我们绘制透明的物体时，我们希望关闭剔除，然后物体背面将会变得可见。</p><p>我们还开启了<a href="https://en.wikipedia.org/wiki/Z-buffering" target="_blank" rel="noopener">深度测试</a>。如果你总是从后面向前面绘制物体，那么深度测试绝非必要，但是通过启用它您不仅不需要担心绘制顺序（尽管如果你先画最近的物体渲染会更快），一些显卡也将进行优化，通过花费更少的时间绘制像素来加速渲染。</p><h2 id="加载着色器程序的修改">加载着色器程序的修改<a href="post/Learn-OpenGL-Lesson-Two#加载着色器程序的修改"></a></h2><p>因为在OpenGL中加载着色器程序的步骤大致相同，这些步骤可以很容易的重构为一个单独的方法。我们还添加了以下调用来检索调试信息，以防编译/链接失败：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glGetProgramInfoLog(programHandle);</span><br><span class="line">GLES20.glGetShaderInfoLog(shaderHandle);</span><br></pre></td></tr></table></figure><h2 id="光点的顶点和着色程序">光点的顶点和着色程序<a href="post/Learn-OpenGL-Lesson-Two#光点的顶点和着色程序"></a></h2><p>这个新的顶点和着色器程序绘制在屏幕上代表当前光源的位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个简单的着色程序</span></span><br><span class="line"><span class="keyword">final</span> String pointVertexShader =</span><br><span class="line">        <span class="string">"uniform mat4 u_MVPMatrix;                  \n"</span> +</span><br><span class="line">        <span class="string">"attribute vec4 a_Position;                 \n"</span> +</span><br><span class="line">        <span class="string">"void main()                                \n"</span> +</span><br><span class="line">        <span class="string">"&#123;                                          \n"</span> +</span><br><span class="line">        <span class="string">"   gl_Position = u_MVPMatrix * a_Position; \n"</span> +</span><br><span class="line">        <span class="string">"   gl_PointSize = 5.0;                     \n"</span> +</span><br><span class="line">        <span class="string">"&#125;                                          \n"</span>;</span><br><span class="line"><span class="keyword">final</span> String pointFragmentShader =</span><br><span class="line">        <span class="string">"precision mediump float;                   \n"</span> +</span><br><span class="line">        <span class="string">"void main()                                \n"</span> +</span><br><span class="line">        <span class="string">"&#123;                                          \n"</span> +</span><br><span class="line">        <span class="string">"   gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0) \n"</span> +</span><br><span class="line">        <span class="string">"&#125;                                          \n"</span>;</span><br></pre></td></tr></table></figure><p>这个着色器类似于第一课的简单着色器，这里有个新的成员<code>gl_PointSize</code>，直接固定它的值为5.0，这是点的像素尺寸。当我们使用<code>GLES20.GL_POINTS</code>模式绘制这个点的时候它会被使用。我们也直接设置了它的显示颜色为白色。</p><h2 id="进一步练习">进一步练习<a href="post/Learn-OpenGL-Lesson-Two#进一步练习"></a></h2><ul><li>尝试删除“过渡饱和”看会发生什么</li><li>这里的照明方式存在缺陷，你能发现是什么吗？提示：我们做环境照明的方式的缺点是什么，以及alpha会放生什么？</li><li>如果将<code>gl_PointSize</code>添加到正方体着色器并使用<code>GL_POINTS</code>绘制它会发生什么？</li></ul><h2 id="进一步阅读">进一步阅读<a href="post/Learn-OpenGL-Lesson-Two#进一步阅读"></a></h2><ul><li><a href="https://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/lighting.php" target="_blank" rel="noopener">Clockworkcoders教程：每片段照明</a></li><li><a href="http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/" target="_blank" rel="noopener">Lighthouse3d.com：法线矩阵</a></li><li><a href="https://web.archive.org/web/20150101061328/http://www.arcsynthesis.org/gltut/Illumination/Tut09%20Normal%20Transformation.html" target="_blank" rel="noopener">arcsynthesis.org: OpenGL教程：法线转换</a></li><li><a href="http://glprogramming.com/red/chapter05.html" target="_blank" rel="noopener">OpenGL编程指南：5章 照明</a></li></ul><p>在编写本教程时，上面的进一步阅读部分对我来说是非常宝贵的资源，因此我强烈建议您阅读它们以获得更多的信息和解释。</p><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-Two#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li></ul><h2 id="打包教材">打包教材<a href="post/Learn-OpenGL-Lesson-Two#打包教材"></a></h2><p>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：OpenGL Android Lesson One: Getting Started&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-two-ambient-and-diffuse-lighting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-two-ambient-and-diffuse-lighting/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL Android课程一：入门</title>
    <link href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One/index.html"/>
    <id>https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One/index.html</id>
    <published>2019-01-21T08:10:46.000Z</published>
    <updated>2019-04-08T06:56:07.337Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>翻译文</p></blockquote><p>原文标题：OpenGL Android Lesson One: Getting Started<br>原文链接：<a href="http://www.learnopengles.com/android-lesson-one-getting-started/" target="_blank" rel="noopener">http://www.learnopengles.com/android-lesson-one-getting-started/</a><br><a id="more"></a></p><hr><p>这是在Android中使用OpenGL ES2的第一个教程。这一课中，我们将一步一步跟随代码，学习如何创建一个OpenGL ES 2并绘制到屏幕上。<br>我们还将了解什么是着色器，它们如何工作，以及怎样使用矩阵将场景转换为您在屏幕上看到的图像。最后，您需要在清单文件中添加您正在使用OpenGL ES 2的说明，以告知Android应用市场支持的设备可见。</p><h1 id="入门">入门<a href="post/Learn-OpenGL-Lesson-One#入门"></a></h1><p>我们将过一道下面所有的代码并且解释每一部分的作用。您可以跟着拷贝每一处的代码片段来创建您自己的项目，您也可以在文章末尾下载这个已完成的项目。<br>在开发工具（如：Android Studio）中创建您的Android项目，名字不重要，这里由于这个课程我将<code>MainActivity</code>更名为<code>LessonOneActivity</code>。</p><blockquote><p>我们来看这段代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 保留对GLSurfaceView的引用*/</span></span><br><span class="line"><span class="keyword">private</span> GLSurfaceView mGLSurfaceView;</span><br></pre></td></tr></table></figure><p>这个<a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.html" target="_blank" rel="noopener">GLSurfaceView</a>是一个特别的View，它为我们管理OpenGL界面并且将它绘制在Android View系统。它还添加了许多功能，使其更易于使用OpenGL，包括下面等等：</p><ul><li>它为OpenGL提供一个专用的着色线程，因此主线程不会停懈</li><li>它支持连续或按需渲染</li><li>它使用<a href="https://en.wikipedia.org/wiki/EGL_(API)" target="_blank" rel="noopener">EGL</a> (OpenGL和底层系统窗口之间的接口)来处理屏幕设置</li></ul><blockquote><p><code>GLSurfaceView</code>使得在Android中设置和使用OpenGL相对轻松</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    mGLSurfaceView = <span class="keyword">new</span> GLSurfaceView(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//检测系统是否支持OpenGL ES 2.0</span></span><br><span class="line">    <span class="keyword">final</span> ActivityManager activityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">    <span class="keyword">final</span> ConfigurationInfo configurationInfo = activityManager.getDeviceConfigurationInfo();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> supportsEs2 = configurationInfo.reqGlEsVersion &gt;= <span class="number">0x20000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (supportsEs2) &#123;</span><br><span class="line">        <span class="comment">// 请求一个OpenGL ES 2.0兼容的上下文</span></span><br><span class="line">        mGLSurfaceView.setEGLContextClientVersion(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 设置我们的Demo渲染器，定义在后面讲</span></span><br><span class="line">        mGLSurfaceView.setRenderer(<span class="keyword">new</span> LessonOneRenderer());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果您想同时支持ES 1.0和2.0的话，这里您可以创建兼容OpenGL ES 1.0的渲染器</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setContentView(mGLSurfaceView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>onCreate()</code>方法中是我们创建OpenGL上下文以及一切开始发生的重要部分。<br>在我们的<code>onCreate()</code>方法中,在调用<code>super.onCreate()</code>后我们首先创建了<code>GLSurfaceView</code>实例。<br>然后我们需要弄清楚系统是否支持OpenGL ES 2.为此，我们获得一个<code>ActivityManager</code>实例，它允许我们与全局系统状态进行交互。<br>然后我们使用它获取设备配置信息，它将告诉我们设备是否支持OpenGL ES 2。<br>我们也可以通过传入不同的渲染器来支持OpenGL ES 1.x，尽管因为API不同，我们需要编写不同的代码。对于本课我们仅仅关注支持OpenGL ES 2。</p><p>一旦我们知道设备是否支持OpenGL ES 2，我们告诉<code>GLSurfaceView</code>兼容OpenGL ES 2，然后传入我们的自定义渲染器。无论何时调整界面或绘制新帧，系统都会调用此渲染器。</p><p>最后，我们调用<code>setContentView()</code>设置GLSurfaceView为显示内容，它告诉Android这个活动内容因该被我们的OpenGL界面填充。要入门OpenGL，就是这么简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="comment">//Activity 必须在onResume中调用GLSurfaceView的onResume方法</span></span><br><span class="line">    mGLSurfaceView.onResume();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">    <span class="comment">//Activity 必须在onPause中调用GLSurfaceView的onPause方法</span></span><br><span class="line">    mGLSurfaceView.onPause();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>GLSurfaceView</code>要求我们在Activity<code>onResume()</code>和<code>onPause()</code>的父方法被调用后分别调用它的<code>onResume()</code>和<code>onPause()</code>方法。我们在此添加调用以完善我们的Activity。</p><h2 id="可视化3D世界">可视化3D世界<a href="post/Learn-OpenGL-Lesson-One#可视化3D世界"></a></h2><p>在这部分，我们来看怎样让OpenGL ES 2工作，以及我们如何在屏幕上绘制东西。<br>在Activity中我们传入自定义的<a href="http://developer.android.com/reference/android/opengl/GLSurfaceView.Renderer.html" target="_blank" rel="noopener">GLSurfaceView.Renderer</a>到<code>GLSurfaceView</code>，它将在这里定义。<br>这个渲染器有三个重要的方法，每当系统事件发生时，它们将会自动被调用：</p><blockquote><p><em>public void onSurfaceCreated(GL10 gl, EGLConfig config)</em></p></blockquote><p>当界面第一次被创建时调用，如果我们失去界面上下文并且之后由系统重建，也会被调用。</p><blockquote><p><em>public void onSurfaceChanged(GL10 gl, int width, int height)</em></p></blockquote><p>每当界面改变时被调用；例如，从纵屏切换到横屏，在创建界面后也会被调用。</p><blockquote><p><em>public void onDrawFrame(GL10 gl)</em></p></blockquote><p>每当绘制新帧时被调用。</p><p>您可能注意到<code>GL10</code>的实例被传入名字是<code>gl</code>。当使用OpengGL ES 2绘制时，我们不能使用它；<br>我们使用<code>GLES20</code>类的静态方法来代替。这个<code>GL10</code>参数仅仅是在这里，因为相同的接口被使用在OpenGL ES 1.x。</p><blockquote><p>在我们的渲染器可以显示任何内容之前，我们需要有些东西去显示。在OpenGL ES 2，我们通过制定数字数组传递内容。这些数字可以表示位置、颜色或任何我们需要的。在这个Demo中，我们将显示三个三角形。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新类成员</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FloatBuffer mTriangle1Verticels;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FloatBuffer mTriangle2Verticels;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> FloatBuffer mTriangle3Verticels;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 每个Float多少字节*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mBytePerFloat = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始Model数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LessonOneRenderer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这个三角形是红色，蓝色和绿色组成</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span>[] triangle1VerticesData = &#123;</span><br><span class="line">        <span class="comment">// X, Y, Z,</span></span><br><span class="line">        <span class="comment">// R, G, B, A</span></span><br><span class="line">        -<span class="number">0.5F</span>, -<span class="number">0.25F</span>, <span class="number">0.0F</span>,</span><br><span class="line">        <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0.5F</span>, -<span class="number">0.25F</span>, <span class="number">0.0F</span>,</span><br><span class="line">        <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>, <span class="number">1.0F</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0.0F</span>, <span class="number">0.559016994F</span>, <span class="number">0.0F</span>,</span><br><span class="line">        <span class="number">0.0F</span>, <span class="number">1.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 初始化缓冲区</span></span><br><span class="line">    mTriangle1Verticels = ByteBuffer.allocateDirect(triangle1VerticesData.length * mBytePerFloat).order(ByteOrder.nativeOrder()).asFloatBuffer();</span><br><span class="line">    ...</span><br><span class="line">    mTriangle1Verticels.put(triangle1VerticesData).position(<span class="number">0</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，这些是什么意思？如果您曾经使用过OpenGL 1， 您可能会习惯这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">glBegin(GL_TRIANGLES);</span><br><span class="line">glVertex3f(-<span class="number">0.5f</span>, -<span class="number">0.25f</span>, <span class="number">0.0f</span>);</span><br><span class="line">glColor3f(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">...</span><br><span class="line">glEnd();</span><br></pre></td></tr></table></figure><p>这种方法在OpenGL ES 2中不起作用。我们不是通过一堆方法调用来定义点，而是定义一个数组。让我们再来看看我们这个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">float</span>[] triangle1VerticesData = &#123;</span><br><span class="line">                <span class="comment">// X, Y, Z,</span></span><br><span class="line">                <span class="comment">// R, G, B, A</span></span><br><span class="line">                -<span class="number">0.5f</span>, -<span class="number">0.25f</span>, <span class="number">0.0f</span>,</span><br><span class="line">                <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>,</span><br><span class="line">                ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面展示的代表三角形的一个点。我们已设置好前三个数字代表位置（X,Y,Z），随后的四个数字代表颜色（红，绿，蓝，透明度）。<br>您不必太担心如何定义这个数组；只要记住当我们想绘制东西在OpenGL ES 2时，我们需要以块的形式传递数据，而不是一次传递一个。</p><h3 id="了解缓冲区">了解缓冲区<a href="post/Learn-OpenGL-Lesson-One#了解缓冲区"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化缓冲区</span></span><br><span class="line">mTriangle1Verticels = ByteBuffer.allocateDirect(triangle1VerticesData.length * mBytePerFloat).order(ByteOrder.nativeOrder()).asFloatBuffer();</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们在Android上使用Java进行编码，但OpengGL ES 2底层实现其实使用C语言编写的。<br>在我们将数据传递给OpenGL之前，我们需要将其转换成它能理解的形式。<br>Java和native系统可能不会以相同的顺序存储它们的字节，因此我们使用一个特殊的缓冲类并创建一个足够大的<code>ByteBuffer</code>来保存我们的数据，并告诉它使用native字节顺序存储数据。<br>然后我们将它转换成<code>FloatBuffer</code>，以便我们可以使用它来保存浮点数据。<br>最后，我们将数组复制到缓冲区。</p><p>这个缓冲区的东西看起来可能很混乱，单请记住，在将数据传递给OpenGL之前，我们需要做一个额外的步骤。我们现在的缓冲区已准备好可以用于将数据传入OpenGL。</p><p><strong>另外，<a href="https://issuetracker.google.com/issues/36921128" target="_blank" rel="noopener">float缓冲区在Froyo上很慢</a>,在Gingerbread上缓慢，因此您可能不希望经常更换它们。</strong></p><h3 id="理解矩阵">理解矩阵<a href="post/Learn-OpenGL-Lesson-One#理解矩阵"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new class 定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储view矩阵。可以认为这是一个相机，我们通过相机将世界空间转换为眼睛空间</span></span><br><span class="line"><span class="comment"> * 它定位相对于我们眼睛的东西</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span>[] mViewMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置背景清理颜色为灰色</span></span><br><span class="line">    GLES20.glClearColor(<span class="number">0.5F</span>, <span class="number">0.5F</span>, <span class="number">0.5F</span>, <span class="number">0.5F</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将眼睛放到原点之后</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> eyeX = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> eyeY = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> eyeZ = <span class="number">1.5F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我们的眼睛望向哪</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> lookX = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> lookY = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> lookZ = -<span class="number">5.0F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置我们的向量，这是我们拿着相机时头指向的方向</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> upX = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> upY = <span class="number">1.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> upZ = <span class="number">0.0F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以这样想象：我们在桥上拿着相机90°弯腰拍摄水平面下5米处的美人鱼</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置view矩阵，可以说这个矩阵代表相机的位置</span></span><br><span class="line">    <span class="comment">// 注意：在OpenGL 1中使用ModelView matrix，这是一个model和view矩阵的组合。</span></span><br><span class="line">    <span class="comment">//在OpenGL2中，我们选择分别跟踪这些矩阵</span></span><br><span class="line">    Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, eyeX, eyeY, eyeZ, lookX, lookY, lookZ, upX, upY, upZ);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一个有趣的话题是矩阵！无论您何时进行3D编程，这些都将成为您最好的朋友。因此，您需要很好的了解他们。</p><p>当我们的界面被创建，我们第一件事情是设置清理颜色为灰色。alpha部分也设置为灰色，但在我们本课程中没有进行alpha混合，因此该值未使用。我们只需要设置一次清理颜色，之后我们不会更改它。</p><p>我们第二件事情是设置view矩阵。我们使用了几个不同种类的矩阵，它们都做了些重要的事情：</p><ol><li>model（模型）矩阵，该矩阵用于在“世界”中的某处放置模型。例如，您有一个模型车，你想将它放置在东边一千米处，您将使用矩阵模型来做这件事。</li><li>view （视图)矩阵，该矩阵代表相机。如果我们想查看位于东边一千米处的车，我们也需要向东移动一千米（另一种思考方式是我们保持静止，世界向西移动一千米）。我们使用视图矩阵来做到这点。</li><li>projection（投影)矩阵。由于我们的屏幕是平面的，我们需要进行最后的转换，将我们的视图“投影”到我们的屏幕上并获得漂亮的3D视角。这就是投影矩阵的用途</li></ol><p>可以在<a href="http://www.songho.ca/opengl/gl_transform.html" target="_blank" rel="noopener">SongHo的OpenGL教程</a>中找到很好的解释。我建议您阅读几次直到您把握好这个想法为止；别担心，我也阅读了它好几次！</p><p>在OpenGL 1中，模型和视图矩阵被组合并且假设了摄像机处于(0,0,0)坐标并面向Z轴方向。</p><p>我们不需要手动构建这些矩阵，Android有一个Matrix帮助类，它能为我们做繁重的工作。这里，我为摄像机创建了一个视图矩阵，它位于原点后，朝向远处。</p><h3 id="定义vertex（顶点）和fragment（片段）着色器">定义vertex（顶点）和fragment（片段）着色器<a href="post/Learn-OpenGL-Lesson-One#定义vertex（顶点）和fragment（片段）着色器"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String vertexShader =</span><br><span class="line">        <span class="string">"uniform mat4 u_MVPMatrix;    \n"</span> + <span class="comment">// 一个表示组合model、view、projection矩阵的常量</span></span><br><span class="line">        <span class="string">"attribute vec4 a_Position;   \n"</span> + <span class="comment">// 我们将要传入的每个顶点的位置信息</span></span><br><span class="line">        <span class="string">"attribute vec4 a_Color;      \n"</span> + <span class="comment">// 我们将要传入的每个顶点的颜色信息</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"varying vec4 v_Color;        \n"</span> + <span class="comment">// 他将被传入片段着色器</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"void main()                  \n"</span> + <span class="comment">// 顶点着色器入口</span></span><br><span class="line">        <span class="string">"&#123;                            \n"</span> +</span><br><span class="line">        <span class="string">"   v_Color = a_Color;        \n"</span> + <span class="comment">// 将颜色传递给片段着色器</span></span><br><span class="line">                                            <span class="comment">// 它将在三角形内插值</span></span><br><span class="line">        <span class="string">"   gl_Position = u_MVPMatrix \n"</span> + <span class="comment">// gl_Position是一个特殊的变量用来存储最终的位置</span></span><br><span class="line">        <span class="string">"               * a_Position  \n"</span> + <span class="comment">// 将顶点乘以矩阵得到标准化屏幕坐标的最终点</span></span><br><span class="line">        <span class="string">"&#125;                            \n"</span>;</span><br></pre></td></tr></table></figure><p>在OpenGL ES 2中任何我们想展示在屏幕中的东西都必须先经过顶点和片段着色器，还好这些着色器并不像他们看起来的那么复杂。顶点着色器在每个顶点执行操作，并把这些操作的结果使用在片段着色器做额外的每像素计算。</p><p>每个着色器基本由输入（input）、输出（output）和一个程序（program）组成。<br>首先我们定义一个统一（uniform），它是一个包含所有变换的组合矩阵。它是所有顶点的常量，用于将它们投影到屏幕上。<br>然后我们定义了位置和颜色属性（attribute），这些属性将从我们之前定义的缓存区中读入，并指定每个顶点的位置和颜色。<br>接着我们定义了一个变量（varying），它负责在三角形中插值并传递到片段着色器。当它运行到片段着色器，它将为每个像素持有一个插值。</p><p>假设我们定义了一个三角形每个点都是红色、绿色和蓝色，我们调整它的大小让它占用10像素屏幕。当片段着色器运行时，它将为每像素包含一个不同的变量（varying）颜色。在某一点上，变量（varying）将是红色，但是在红色和蓝色之间它可能是更紫的颜色。</p><p>除了设置颜色，我们还告诉OpenGL顶点在屏幕上的最终位置。然后我们定义片段着色器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String fragmentShader =</span><br><span class="line">        <span class="string">"precision mediump float;       \n"</span> + <span class="comment">// 我们将默认精度设置为中等，我们不需要片段着色器中的高精度</span></span><br><span class="line">        <span class="string">"varying vec4 v_Color;          \n"</span> + <span class="comment">// 这是从三角形每个片段内插的顶点着色器的颜色</span></span><br><span class="line">        <span class="string">"void main()                    \n"</span> + <span class="comment">// 片段着色器入口</span></span><br><span class="line">        <span class="string">"&#123;                              \n"</span> +</span><br><span class="line">        <span class="string">"   gl_FragColor = v_Color;     \n"</span> + <span class="comment">// 直接将颜色传递</span></span><br><span class="line">        <span class="string">"&#125;                              \n"</span>;</span><br></pre></td></tr></table></figure><p>这是个片段着色器，它会将东西放到屏幕上。在这个着色器中，我们得到的变量（varying）颜色来自顶点着色器，然后将它直接传递给OpenGL。该点已按像素插值，因为片段着色器将针对每个将要绘制的像素点运行。</p><p>更多信息：<a href="http://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf" target="_blank" rel="noopener">OpenGL ES 2 API快速参考卡</a></p><h3 id="将着色器加载到OpenGL">将着色器加载到OpenGL<a href="post/Learn-OpenGL-Lesson-One#将着色器加载到OpenGL"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载顶点着色器</span></span><br><span class="line"><span class="keyword">int</span> vertexShaderHandle = GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);</span><br><span class="line"><span class="keyword">if</span> (vertexShaderHandle != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 传入顶点着色器源代码</span></span><br><span class="line">    GLES20.glShaderSource(vertexShaderHandle, vertexShader);</span><br><span class="line">    <span class="comment">// 编译顶点着色器</span></span><br><span class="line">    GLES20.glCompileShader(vertexShaderHandle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取编译状态</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] compileStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    GLES20.glGetShaderiv(vertexShaderHandle, GLES20.GL_COMPILE_STATUS, compileStatus, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果编译失败则删除着色器</span></span><br><span class="line">    <span class="keyword">if</span> (compileStatus[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        GLES20.glDeleteShader(vertexShaderHandle);</span><br><span class="line">        vertexShaderHandle = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (vertexShaderHandle == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Error creating vertex shader."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们创建一个着色器对象。如果成功，我们将得到这个对象的引用。<br>然后，我们使用这个引用传入着色器源码然后编译它。<br>我们可以从OpenGL获取编译是否成功的状态，如果失败我们可以使用<code>GLES20.glGetShaderInfoLog(shader)</code>找到原因。我们按照相同的步骤加载片段着色器。</p><h3 id="将顶点和片段着色器链接到一个程序中">将顶点和片段着色器链接到一个程序中<a href="post/Learn-OpenGL-Lesson-One#将顶点和片段着色器链接到一个程序中"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个程序对象并将引用放进去</span></span><br><span class="line"><span class="keyword">int</span> programHandle = GLES20.glCreateProgram();</span><br><span class="line"><span class="keyword">if</span> (programHandle != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 绑定顶点着色器到程序对象中</span></span><br><span class="line">    GLES20.glAttachShader(programHandle, vertexShaderHandle);</span><br><span class="line">    <span class="comment">// 绑定片段着色器到程序对象中</span></span><br><span class="line">    GLES20.glAttachShader(programHandle, fragmentShaderHandle);</span><br><span class="line">    <span class="comment">// 绑定属性</span></span><br><span class="line">    GLES20.glBindAttribLocation(programHandle, <span class="number">0</span>, <span class="string">"a_Position"</span>);</span><br><span class="line">    GLES20.glBindAttribLocation(programHandle, <span class="number">1</span>, <span class="string">"a_Color"</span>);</span><br><span class="line">    <span class="comment">// 将两个着色器连接到程序</span></span><br><span class="line">    GLES20.glLinkProgram(programHandle);</span><br><span class="line">    <span class="comment">// 获取连接状态</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] linkStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    GLES20.glGetProgramiv(programHandle, GLES20.GL_LINK_STATUS, linkStatus, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 如果连接失败，删除这程序</span></span><br><span class="line">    <span class="keyword">if</span> (linkStatus[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        GLES20.glDeleteProgram(programHandle);</span><br><span class="line">        programHandle = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (programHandle == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Error creating program."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们使用顶点和片段着色器之前，我们需要将它们绑定到一个程序中，它连接了顶点着色器的输出和片段着色器的输入。这也是让我们从程序传递输入并使用着色器绘制形状的原因。</p><p>我们创建一个程序对象，如果成功绑定着色器。我们想要将位置和颜色作为属性传递进去，因此我们需要绑定这些属性。然后我们将着色器连接到一起。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新类成员</span></span><br><span class="line"><span class="comment">/** 这将用于传递变换矩阵*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mMVPMatrixHandle;</span><br><span class="line"><span class="comment">/** 用于传递model位置信息*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mPositionHandle;</span><br><span class="line"><span class="comment">/** 用于传递模型颜色信息*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mColorHandle;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 设置程序引用，这将在之后传递值到程序时使用</span></span><br><span class="line">    mMVPMatrixHandle = GLES20.glGetUniformLocation(programHandle, <span class="string">"u_MVPMatrix"</span>);</span><br><span class="line">    mPositionHandle = GLES20.glGetAttribLocation(programHandle, <span class="string">"a_Position"</span>);</span><br><span class="line">    mColorHandle = GLES20.glGetAttribLocation(programHandle, <span class="string">"a_Color"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉OpenGL渲染的时候使用这个程序</span></span><br><span class="line">    GLES20.glUseProgram(programHandle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们成功连接程序后，我们还要完成几个任务，以便我们能实际使用它。<br>第一个任务是获取引用，因为我们要传递数据到程序中。<br>然后我们要告诉OpenGL在绘制时使用我们这个程序。<br>由于本课我们仅使用了一个程序，我们可以将它放到<code>onSurfaceCreated()</code>方法中而不是<code>onDrawFrame()</code></p><h3 id="设置透视投影">设置透视投影<a href="post/Learn-OpenGL-Lesson-One#设置透视投影"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新类成员</span></span><br><span class="line"><span class="comment">// 存放投影矩阵，用于将场景投影到2D视角</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span>[] mProjectionMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置OpenGL界面和当前视图相同的尺寸</span></span><br><span class="line">    GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的透视投影矩阵，高度保持不变，而高度根据纵横比而变换</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) width / height;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> left = -ratio;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> right = ratio;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> bottom = -<span class="number">1.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> top = <span class="number">1.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> near = <span class="number">1.0F</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> far = <span class="number">10.0F</span>;</span><br><span class="line"></span><br><span class="line">    Matrix.frustumM(mProjectionMatrix, <span class="number">0</span>, left, right, bottom, top, near, far);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onSurfaceChanged()</code>方法至少被调用一次，每当界面改变也会被调用。因为我们需要每当界面改变的时候重置投影矩阵，那么<code>onSurfaceChanged()</code>方法中是个理想的地方。</p><h3 id="绘制东西到屏幕上！">绘制东西到屏幕上！<a href="post/Learn-OpenGL-Lesson-One#绘制东西到屏幕上！"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新类成员</span></span><br><span class="line"><span class="comment">// 存放模型矩阵，该矩阵用于将模型从对象空间（可以认为每个模型开始都位于宇宙的中心）移动到世界空间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span>[] mModelMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">    GLES20.glClear(GLES20.GL_DEPTH_BUFFER_BIT | GLES20.GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每10s完成一次旋转</span></span><br><span class="line">    <span class="keyword">long</span> time = SystemClock.uptimeMillis() % <span class="number">10000L</span>;</span><br><span class="line">    <span class="keyword">float</span> angleDegrees = (<span class="number">360.0F</span> / <span class="number">10000.0F</span>) * ((<span class="keyword">int</span>)time);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画三角形</span></span><br><span class="line">    Matrix.setIdentityM(mModelMatrix, <span class="number">0</span>);</span><br><span class="line">    Matrix.rotateM(mModelMatrix, <span class="number">0</span>, angleDegrees, <span class="number">0.0F</span>, <span class="number">0.0F</span>, <span class="number">1.0F</span>);</span><br><span class="line">    drawTriangle(mTriangle1Verticels);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是实际显示在屏幕上的内容。我们清理屏幕，因此不会得到任何奇怪的<a href="https://en.wikipedia.org/wiki/Noclip_mode#.22Hall_of_mirrors.22_effect" target="_blank" rel="noopener">镜像效应</a>影响，我们希望我们的三角形在屏幕上能有平滑的动画，通常使用时间而不是帧率更好。</p><blockquote><p>实际绘制在<code>drawTriangle()</code>方法中完成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新的类成员</span></span><br><span class="line"><span class="comment">/** 为最终的组合矩阵分配存储空间，这将用来传入着色器程序*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span>[] mMVPMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 每个顶点有多少字节组成，每次需要迈过这么一大步（每个顶点有7个元素，3个表示位置，4个表示颜色，7 * 4 = 28个字节）*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mStrideBytes = <span class="number">7</span> * mBytePerFloat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 位置数据偏移量*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mPositionOffset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 一个元素的位置数据大小*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mPositionDataSize = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 颜色数据偏移量*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mColorOffset = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 一个元素的颜色数据大小*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mColorDataSize = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从给定的顶点数据中绘制一个三角形</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aTriangleBuffer 包含顶点数据的缓冲区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">(FloatBuffer aTriangleBuffer)</span> </span>&#123;</span><br><span class="line">    aTriangleBuffer.position(mPositionOffset);</span><br><span class="line">    GLES20.glVertexAttribPointer(</span><br><span class="line">            mPositionHandle, mPositionDataSize, GLES20.GL_FLOAT, <span class="keyword">false</span>,</span><br><span class="line">            mStrideBytes, aTriangleBuffer);</span><br><span class="line"></span><br><span class="line">    GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入颜色信息</span></span><br><span class="line">    aTriangleBuffer.position(mColorOffset);</span><br><span class="line">    GLES20.glVertexAttribPointer(mColorHandle, mColorDataSize, GLES20.GL_FLOAT, <span class="keyword">false</span>,</span><br><span class="line">            mStrideBytes, aTriangleBuffer);</span><br><span class="line"></span><br><span class="line">    GLES20.glEnableVertexAttribArray(mColorHandle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将视图矩阵乘以模型矩阵，并将结果存放到MVP Matrix（model * view）</span></span><br><span class="line">    Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mViewMatrix, <span class="number">0</span>, mModelMatrix, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将上面计算好的视图模型矩阵乘以投影矩阵，并将结果存放到MVP Matrix（model * view * projection）</span></span><br><span class="line">    Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mProjectionMatrix, <span class="number">0</span>, mMVPMatrix, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    GLES20.glUniformMatrix4fv(mMVPMatrixHandle, <span class="number">1</span>, <span class="keyword">false</span>, mMVPMatrix, <span class="number">0</span>);</span><br><span class="line">    GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您还记得我们最初创建渲染器时定义的那些缓冲区吗？我们终于可以使用它们了。<br>我们需要使用<code>GLES20.glVertexAttribPointer()</code>来告诉OpenGL怎样使用这些数据。</p><blockquote><p>我们来看第一个使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aTriangleBuffer.position(mPositionOffset);</span><br><span class="line">GLES20.glVertexAttribPointer(</span><br><span class="line">        mPositionHandle, mPositionDataSize, GLES20.GL_FLOAT, <span class="keyword">false</span>,</span><br><span class="line">        mStrideBytes, aTriangleBuffer);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mPositionHandle);</span><br></pre></td></tr></table></figure><p>我们设置缓冲区的位置偏移，它位于缓冲区的开头。然后我们告诉OpenGL使用这些数据并将其提供给顶点着色器并将其应用到位置属性（a_Position）。我们也需要告诉OpenGL每个顶点或迈幅之间有多少个元素。</p><blockquote><p>注意：迈幅（Stride）需要定义为字节（byte），尽管每个顶点之间我们有7个元素（3个是位置，4个是颜色），但我们事实上有28个字节，因为每个浮点数（float）就是4个字节（byte）。忘记此步骤您可能没有任何错误，但是你会想知道为什么您的屏幕上看不到任何内容。</p></blockquote><p>最终，我们使用了顶点属性，往下我们使用了下一个属性。再往后点我们构建一个组合矩阵，将点投影到屏幕上。我们也可以在顶点着色器中执行此操作，但是由于它只需要执行一次我们也可以只缓存结果。<br>我们使用<code>GLES20.glUniformMatrix4fv()</code>方法将最终的矩阵传入顶点着色器。<br><code>GLES20.glDrawArrays()</code>将我们的点转换为三角形并将其绘制在屏幕上。</p><h2 id="总结">总结<a href="post/Learn-OpenGL-Lesson-One#总结"></a></h2><p>呼呼！这是重要的一课，如果您完成了本课，感谢您！<br>我们学习了怎样创建OpenGL上下文，传入形状数据，加载顶点和片段着色器，设置我们的转换矩阵，最终放在一起。<br>如果一切顺利，您因该看到了类似下面的截屏。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-opengl/20190122233309.png" alt="screenshot"></p><p>这一课有很多需要消化的内容，您可能需要多次阅读这些步骤才能理解它。<br>OpenGL ES 2需要更多的设置才能开始，但是一旦您完成了这个过程几次，您就会记住这个流程。</p><h2 id="在Android市场上发布">在Android市场上发布<a href="post/Learn-OpenGL-Lesson-One#在Android市场上发布"></a></h2><p>当开发的应用我们不想在无法运行这些应用程序的人在市场上看到它们，否则当应用程序在其设备上崩溃时，我们可能会收到大量糟糕的评论和评分。<br>要防止OpenGL ES 2 应用程序出现在不支持它的设备上，你可以在清单文件中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:glEsVersion</span>=<span class="string">"0x00020000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这告诉市场您的app需要有OpenGL ES 2支持，不支持的设备将会隐藏您的app。</p><h2 id="进一步探索">进一步探索<a href="post/Learn-OpenGL-Lesson-One#进一步探索"></a></h2><p>尝试更改动画速度，顶点或颜色，看看会发生什么！<br>可以在Github下载本课程源代码：<a href="https://github.com/learnopengles/Learn-OpenGLES-Tutorials" target="_blank" rel="noopener">下载项目</a><br>本课的编译版本也可以再Android市场下：<a href="https://market.android.com/details?id=com.learnopengles.android" target="_blank" rel="noopener">google play 下载apk</a><br>“我”也编译了个apk，方便大家下载：<a href="https://github.com/xujiaji/LearnOpenGL/releases" target="_blank" rel="noopener">github download</a></p><h2 id="教程目录">教程目录<a href="post/Learn-OpenGL-Lesson-One#教程目录"></a></h2><ul><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-One">OpenGL Android课程一：入门</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Two">OpenGL Android课程二：环境光和漫射光</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Three">OpenGL Android课程三：使用每片段照明</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Four">OpenGL Android课程四：介绍纹理基础</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Five">OpenGL Android课程五：介绍混合（Blending）</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Six">OpenGL Android课程六：介绍纹理过滤</a></li><li><a href="https://blog.xujiaji.com/post/Learn-OpenGL-Lesson-Seven">OpenGL Android课程七：介绍Vertex Buffer Objects（顶点缓冲区对象，简称：VOB）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文标题：OpenGL Android Lesson One: Getting Started&lt;br&gt;原文链接：&lt;a href=&quot;http://www.learnopengles.com/android-lesson-one-getting-started/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.learnopengles.com/android-lesson-one-getting-started/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/categories/OpenGL/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="OpenGL" scheme="https://blog.xujiaji.com/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>C 学习笔记</title>
    <link href="https://blog.xujiaji.com/post/c-learn-note/index.html"/>
    <id>https://blog.xujiaji.com/post/c-learn-note/index.html</id>
    <published>2018-12-25T15:18:45.000Z</published>
    <updated>2018-12-26T14:31:01.185Z</updated>
    
    <content type="html"><![CDATA[<p>重学一次C语言，记录一下学习《C Primer Plus》的笔记，方便回忆！</p><a id="more"></a><h2 id="字符串和格式化输入-输出">字符串和格式化输入/输出<a href="post/c-learn-note#字符串和格式化输入-输出"></a></h2><ol><li>字符串以<code>char</code>数组来存储</li><li><p>常量用 <code>#define</code> 定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DENSITY 62.4</span></span><br></pre></td></tr></table></figure></li><li><p><code>strlen()</code>获取字符串的长度，注意需要<code>#include &lt;string.h&gt;</code></p></li><li><code>char</code>类型数组和<code>null</code>字符<ol><li>C语言没有专门用于储存字符串的变量类型，字符串都被储存在<code>char</code>类型的数组中</li><li>字符串以<code>\0</code>（空字符）结束，它是不打印出来的字符</li><li>如果有40哥存储单单元的字符串，只能储存39哥字符，剩下一个字节留给空字符</li></ol></li><li><p>一下代码<code>%s</code>作为转化说明，<code>scanf()</code>只会读取字符串中的一个单词。并且没有加<code>&amp;</code>取地址符，<code>name</code>就是地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> name[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, name);</span><br></pre></td></tr></table></figure></li><li><p><code>&quot;x&quot;</code>不同于<code>&#39;x&#39;</code>,<code>&quot;x&quot;</code>是字符串由<code>x</code>和<code>\0</code>组成</p></li><li><code>sizeof</code>运算符，它以字节为单位给出对象的大小。<code>strlen()</code>只给出字符串长度，到空字符（不包括空字符）<ol><li>C99和C11标准专门为<code>sizeof</code>运算符的返回类型添加了<code>%zd</code>转换说明，对于<code>strlen()</code>也适用</li><li><code>sizeof</code>使用时，对于类型必须加括号。对于特定量，可有可无。类型：<code>sizeof(char)</code>, <code>sizeof(float)</code>; 特定量：<code>sizeof 6.28</code>, <code>sizeof name</code></li></ol></li></ol><h2 id="常量和C预处理器">常量和C预处理器<a href="post/c-learn-note#常量和C预处理器"></a></h2><ol><li><p>C预处理器定义常量：<code>#define NAME value</code>，其中“NAME”为命令的常量名，约定大写；“value”是对应的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#define <span class="type">BEEP</span> '\a'</span><br><span class="line">#define <span class="type">TEE</span> '<span class="type">T'</span></span><br><span class="line">#define <span class="type">ESC</span> '\<span class="number">033</span>'</span><br><span class="line">#define <span class="type">OOPS</span> <span class="string">"Now you have done it!"</span></span><br></pre></td></tr></table></figure></li><li><p><code>const</code>限定符，C90标准新增该关键字，用于限定一个变量为只读</p></li><li>明示常量：C头文件<code>limits.h</code>和<code>float.h</code>分别提供了与整数类型和浮点数类型大小限制相关的详细信息<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;limits.h&gt;</span><br><span class="line">#include &lt;float.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"Some number limits for this system: \n"</span>);</span><br><span class="line">    printf(<span class="string">"Biggest int: %d\n"</span>, <span class="type">INT_MAX</span>);</span><br><span class="line">    printf(<span class="string">"Smallest long long: %lld\n"</span>, <span class="type">LLONG_MIN</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重学一次C语言，记录一下学习《C Primer Plus》的笔记，方便回忆！&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="https://blog.xujiaji.com/categories/C/"/>
    
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C" scheme="https://blog.xujiaji.com/tags/C/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>一个项目如何编译多个不同签名、包名、资源等，的apk？</title>
    <link href="https://blog.xujiaji.com/post/android-project-one-for-more/index.html"/>
    <id>https://blog.xujiaji.com/post/android-project-one-for-more/index.html</id>
    <published>2018-10-29T08:15:20.000Z</published>
    <updated>2019-04-08T06:54:02.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介<a href="post/android-project-one-for-more#简介"></a></h2><p>如题所示！本篇文章就是为了解决这种问题。方便打包和运行的时候能做到无需手动替换配置，即可打包想要的apk。打包的时候，只需选一下想打哪种配置的apk就OK啦。 (^o^)/~</p><blockquote><p>先来看，有需求如下：</p></blockquote><ol><li>同一个项目</li><li>不同的apk图标</li><li>不同的服务器域名</li><li>不同的包名</li><li>不同的名称</li><li>不同的签名</li><li>不同的第三方key</li><li>不同的版本名版本号</li></ol><blockquote><p>解决思路</p></blockquote><ol><li>当然最直接的方式不过于每次打不同包的时候都去替换对应的配置，这种方式的麻烦之处不言而喻。</li><li>将所有配置，资源等都配置入项目中，打包的时候，根据选择渠道打包不同配置的apk。（本篇文章就是要讲怎么这么做的）</li><li>相信还有其他的。。。</li></ol><h2 id="相关的几个要点">相关的几个要点<a href="post/android-project-one-for-more#相关的几个要点"></a></h2><ol><li><p>首先我们需要知道<code>productFlavors</code>来配置渠道，这里我将渠道用来表示哪种apk，如下我需要配置四种应用:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">  userquhua &#123;&#125;</span><br><span class="line">  quhua &#123;&#125;</span><br><span class="line">  cuntuba &#123;&#125;</span><br><span class="line">  xemh &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果我们选择了某一个渠道，那么运行打包的时候会根据渠道名选择资源文件（可结合第6点一起看）<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/one-for-more/20181029171053.png" alt=""></p></li><li><p>签名可在<code>signingConfigs</code>中配置多个（我将所有签名文件放在了项目跟目录的key文件夹中），这样我们就可以通过<code>signingConfigs</code>指定预制好的签名配置。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    userquhuaRelease &#123;</span><br><span class="line">        storeFile file(<span class="string">"../key/xxx1.keystore"</span>)</span><br><span class="line">        storePassword <span class="string">"xxxxxx"</span></span><br><span class="line">        keyAlias <span class="string">"alias"</span></span><br><span class="line">        keyPassword <span class="string">"xxxxxx"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    quhuaRelease &#123;</span><br><span class="line">        storeFile file(<span class="string">"../key/xxx2.keystore"</span>)</span><br><span class="line">        storePassword <span class="string">"xxxxxx"</span></span><br><span class="line">        keyAlias <span class="string">"alias"</span></span><br><span class="line">        keyPassword <span class="string">"xxxxxx"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cuntubaRelease &#123;</span><br><span class="line">        storeFile file(<span class="string">"../key/xxx3.keystore"</span>)</span><br><span class="line">        storePassword <span class="string">"xxxxxx"</span></span><br><span class="line">        keyAlias <span class="string">"alias"</span></span><br><span class="line">        keyPassword <span class="string">"xxxxxx"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xemhRelease &#123;</span><br><span class="line">        storeFile file(<span class="string">"../key/xxx4.keystore"</span>)</span><br><span class="line">        storePassword <span class="string">"xxxxxx"</span></span><br><span class="line">        keyAlias <span class="string">"alias"</span></span><br><span class="line">        keyPassword <span class="string">"xxxxxx"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可在build.gradle中配置动态配置java代码调用的常量数据（如：通过该方式我们可根据不同渠道动态配置第三方appid，或其他需要根据渠道而改变的数据）</p><ul><li><p>比如：我们在<code>defaultConfig {}</code> 中定义了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildConfigField &quot;String&quot;, &quot;SERVER_URL&quot;, &apos;&quot;http://xx.xxxx.com/&quot;&apos;</span><br></pre></td></tr></table></figure></li><li><p>此时，您看一下清单文件中<code>manifest</code>标签里的，<code>package</code>的值，假如是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.xx</span><br></pre></td></tr></table></figure></li><li><p>那么，您就可以在java代码中通过导入文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import com.xxx.xx.BuildConfig;</span><br></pre></td></tr></table></figure></li><li><p>然后调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BuildConfig.SERVER_URL</span><br></pre></td></tr></table></figure></li></ul><p>它的值就是上边配置的字符串：<code>http://xx.xxxx.com/</code>。</p><ul><li>您可以进入<code>BuildConfig</code>看一看，里面还包含了一些当前的包名版本号等信息。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/one-for-more/20181030234102.png" alt=""></li></ul></li><li><p>在渠道配置那里可以配置对应的包名版本名签名等等<br>如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略其他配置...</span></span><br><span class="line">android &#123;</span><br><span class="line">  <span class="comment">// 省略其他配置...</span></span><br><span class="line">  productFlavors &#123;</span><br><span class="line">      userquhua &#123;</span><br><span class="line">          applicationId <span class="string">"com.xxx.xx"</span></span><br><span class="line">          versionCode <span class="number">1</span></span><br><span class="line">          versionName <span class="string">"1.0.0"</span></span><br><span class="line">          signingConfig signingConfigs.userquhuaRelease <span class="comment">// 配置签名</span></span><br><span class="line"></span><br><span class="line">          String qq_id = <span class="string">'"xxxxxxxxx"'</span> <span class="comment">//配置qq appid</span></span><br><span class="line">          buildConfigField <span class="string">"String"</span>,           <span class="string">"QQ_ID"</span>, qq_id</span><br><span class="line">          buildConfigField <span class="string">"String"</span>,           <span class="string">"WX_ID"</span>, <span class="string">'"wxxxxxxxxxxxxxxxxx"'</span> <span class="comment">// 配置微信appid</span></span><br><span class="line">          manifestPlaceholders = [</span><br><span class="line"><span class="symbol">            qq_id:</span> qq_id,</span><br><span class="line">            <span class="string">JPUSH_PKGNAME :</span> applicationId,</span><br><span class="line">            <span class="string">JPUSH_APPKEY :</span> <span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>, <span class="comment">//JPush 上注册的包名对应的 Appkey.</span></span><br><span class="line">            <span class="string">JPUSH_CHANNEL :</span> <span class="string">"developer-default"</span>,</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;</span><br><span class="line">    release &#123;</span><br><span class="line">      <span class="comment">// 省略其他配置...</span></span><br><span class="line">        signingConfig <span class="literal">null</span>  <span class="comment">// 置空</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug &#123;</span><br><span class="line">      <span class="comment">// 省略其他配置...</span></span><br><span class="line">        signingConfig <span class="literal">null</span> <span class="comment">// 置空</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样，如果我们打包userquhua这个渠道，看第2点中介绍选择userquhuaDebug。</li><li>然后，最好clean一下项目、然后我们运行项目。</li><li>该app的包名就是<code>com.xxx.xx</code>，版本号为<code>1</code>，版本名为<code>1.0.0</code>。</li><li>通过<code>BuildConfig</code>调用<code>QQ_ID</code>静态常量，就是该渠道里配置的值，<code>WX_ID</code>同理。</li><li><code>manifestPlaceholders</code>配置也可以这样配置。</li><li>签名问题经过个人反复尝试（然后半天就过去了￣へ￣），最终签名如上配置。<strong>需要注意</strong><code>buildTypes</code>中的签名配置<code>signingConfig</code>如果不设置为<code>null</code>，那么打包的是有还是以内置的签名打包。</li></ul></li><li>资源文件替换<br>再看到第2点的介绍，我们选择运行渠道后，会默认匹配对应渠道下的资源。下面我将<code>xemh</code>渠道的资源目录全部展开一下。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/one-for-more/20181029233306.png" alt=""><ul><li>如上图这样，只需要资源名字和app目录对应的文件名字一样即可替换。</li><li>strings.xml里的应用名，只需要将对应<code>app_name</code>修改既可替换app下strings的<code>app_name</code>，其他不用替换的不用写就行。</li></ul></li><li>打正式包的时候选好渠道，就可以打包不同配置的apk，当然您也可以使用命令的方式。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/one-for-more/20181029234235.png" alt=""></li></ol><h2 id="其他配置记录">其他配置记录<a href="post/android-project-one-for-more#其他配置记录"></a></h2><blockquote><p>获取当前时间</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> releaseTime() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd-HH.mm"</span>, TimeZone.getTimeZone(<span class="string">"GMT+8"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打包的时候，修改文件名，以方便区别渠道和版本打包时间</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">applicationVariants.all &#123;</span><br><span class="line">    variant -&gt;</span><br><span class="line">        variant.outputs.all &#123;</span><br><span class="line">            outputFileName = <span class="string">"$&#123;variant.productFlavors[0].name&#125;-v$&#123;variant.productFlavors[0].versionName&#125;-$&#123;releaseTime()&#125;.apk"</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>${variant.productFlavors[0].name}</code>当前渠道名</li><li><code>${variant.productFlavors[0].versionName}</code>当前版本名</li><li><code>${releaseTime()}</code>当前时间</li></ul><h2 id="其他需要注意事项">其他需要注意事项<a href="post/android-project-one-for-more#其他需要注意事项"></a></h2><p>如果您在清单文件<code>AndroidManifest.xml</code>中，有那种以包名开头命名的那种。因为如果包名都改了，有些也需要动态的改变。可以用<code>${applicationId}</code>代替。在打包的时候，会自动替换成当前包名。</p><blockquote><p>比如，类似下配置：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xxx.xx.permission.JPUSH_MESSAGE"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:protectionLevel</span>=<span class="string">"signature"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"com.xxx.xx.permission.JPUSH_MESSAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".push.MyJPushMessageReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.RECEIVE_MESSAGE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.xxx.xx"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"com.xxx.xx.provider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:replace</span>=<span class="string">"android:authorities"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可改为：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"$&#123;applicationId&#125;.permission.JPUSH_MESSAGE"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:protectionLevel</span>=<span class="string">"signature"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"$&#123;applicationId&#125;.permission.JPUSH_MESSAGE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".push.MyJPushMessageReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.jpush.android.intent.RECEIVE_MESSAGE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"$&#123;applicationId&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"android.support.v4.content.FileProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"$&#123;applicationId&#125;.provider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:replace</span>=<span class="string">"android:authorities"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:grantUriPermissions</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.support.FILE_PROVIDER_PATHS"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resource</span>=<span class="string">"@xml/file_paths"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当然值得注意的是，在代码中我们也不能把包名写死了，可通过<code>BuildConfig</code>得到当前包名</p></blockquote><h2 id="我的完整配置，供参考">我的完整配置，供参考<a href="post/android-project-one-for-more#我的完整配置，供参考"></a></h2><blockquote><p>有关隐私信息的都用xxx替换了</p></blockquote><ol><li><p>项目根目录的<code>build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:3.0.0'</span></span><br><span class="line">        classpath <span class="string">"io.github.prototypez:save-state:0.1.7"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Do not place your application dependencies here; they belong</span></span><br><span class="line">        <span class="comment">// in the individual module build.gradle files</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</span><br><span class="line">        maven &#123; url <span class="string">'http://oss.jfrog.org/artifactory/oss-snapshot-local/'</span> &#125;</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs <span class="string">'libs'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(<span class="string">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext&#123;</span><br><span class="line">    minSdkVersion               = <span class="number">16</span></span><br><span class="line">    targetSdkVersion            = <span class="number">27</span></span><br><span class="line">    compileSdkVersion           = <span class="number">27</span></span><br><span class="line">    buildToolsVersion           = <span class="string">'27.1.1'</span></span><br><span class="line"></span><br><span class="line">    supportLibraryVersion       = <span class="string">'27.1.1'</span></span><br><span class="line">    xmvpVersion                 = <span class="string">'1.2.2'</span></span><br><span class="line">    retrofit2Version            = <span class="string">'2.3.0'</span></span><br><span class="line">    okhttp3Version              = <span class="string">'3.8.1'</span></span><br><span class="line">    butterknifeVersion          = <span class="string">'8.6.0'</span></span><br><span class="line">    rx2Version                  = <span class="string">'2.0.2'</span></span><br><span class="line">    CircleProgressDialogVersion = <span class="string">'1.0.2'</span></span><br><span class="line">    smarttabVersion             = <span class="string">'1.6.1@aar'</span></span><br><span class="line">    adapterHelperVersion        = <span class="string">'2.9.41'</span></span><br><span class="line">    glideVersion                = <span class="string">'4.7.1'</span></span><br><span class="line">    roundedimageviewVersion     = <span class="string">'2.3.0'</span></span><br><span class="line">    eventbusVersion             = <span class="string">'3.0.0'</span></span><br><span class="line">    dispatcherVersion           = <span class="string">'2.4.0'</span></span><br><span class="line">    picture_libraryVersion      = <span class="string">'v2.2.3'</span></span><br><span class="line">    statusbarutilVersion        = <span class="string">'1.5.1'</span></span><br><span class="line">    okhttpUtilsVersion          = <span class="string">'3.8.0'</span></span><br><span class="line">    constraintVersion           = <span class="string">'1.1.3'</span></span><br><span class="line">    flexboxVersion              = <span class="string">'1.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>app目录下的<code>build.gradle</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'save.state'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> releaseTime() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd-HH.mm"</span>, TimeZone.getTimeZone(<span class="string">"GMT+8"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.compileSdkVersion</span><br><span class="line"><span class="comment">//    buildToolsVersion rootProject.buildToolsVersion</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion rootProject.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.targetSdkVersion</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">        <span class="comment">// config the JSON processing library</span></span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [ <span class="string">serializer :</span> <span class="string">"gson"</span> ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters <span class="string">"armeabi-v7a"</span></span><br><span class="line">        &#125;</span><br><span class="line">        renderscriptTargetApi <span class="number">25</span></span><br><span class="line">        renderscriptSupportModeEnabled <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        userquhuaRelease &#123;</span><br><span class="line">            storeFile file(<span class="string">"../key/xxx.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"xxxxxx"</span></span><br><span class="line">            keyAlias <span class="string">"xxx"</span></span><br><span class="line">            keyPassword <span class="string">"xxxxxx"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quhuaRelease &#123;</span><br><span class="line">            storeFile file(<span class="string">"../key/xxx.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"xxxxxxx"</span></span><br><span class="line">            keyAlias <span class="string">"xxx"</span></span><br><span class="line">            keyPassword <span class="string">"xxxxxxx"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cuntubaRelease &#123;</span><br><span class="line">            storeFile file(<span class="string">"../key/xxx.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"xxxxxxx"</span></span><br><span class="line">            keyAlias <span class="string">"xxx"</span></span><br><span class="line">            keyPassword <span class="string">"xxxxxxx"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xemhRelease &#123;</span><br><span class="line">            storeFile file(<span class="string">"../key/xxx.keystore"</span>)</span><br><span class="line">            storePassword <span class="string">"xxxxxxx"</span></span><br><span class="line">            keyAlias <span class="string">"xxx"</span></span><br><span class="line">            keyPassword <span class="string">"xxxxxxx"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flavorDimensions <span class="string">"default"</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        userquhua &#123;</span><br><span class="line">            applicationId <span class="string">"com.xxx.xx"</span></span><br><span class="line">            versionCode <span class="number">22</span></span><br><span class="line">            versionName <span class="string">"1.7.5"</span></span><br><span class="line">            signingConfig = signingConfigs.userquhuaRelease</span><br><span class="line"></span><br><span class="line">            String qq_id = <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"QQ_ID"</span>, qq_id <span class="comment">// qq appId</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,         <span class="string">"SINA_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 新浪appId</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"WX_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 微信 appId</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"UM_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 友盟</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,       <span class="string">"WX_SECRET"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 微信 secret</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"SINA_REDIRECT"</span>, <span class="string">'"http://open.weibo.com/apps/xxxxxx/privilege/oauth"'</span> <span class="comment">// 新浪</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"ADHUB_INIT_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 广告sdk初始化id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_SPLASH_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 开屏广告id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_BANNER_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// banner广告id</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,      <span class="string">"SERVER_URL"</span>, <span class="string">'"http://xxx.xxx.com/"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,        <span class="string">"LOGO_URL"</span>, <span class="string">'"http://file.xxx.com/img/xxx.png"'</span></span><br><span class="line"></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line"><span class="symbol">                    qq_id:</span> qq_id,</span><br><span class="line">                    <span class="string">JPUSH_PKGNAME :</span> applicationId,</span><br><span class="line">                    <span class="string">JPUSH_APPKEY :</span> <span class="string">"xxxxxx"</span>, <span class="comment">//JPush 上注册的包名对应的 Appkey.</span></span><br><span class="line">                    <span class="string">JPUSH_CHANNEL :</span> <span class="string">"developer-default"</span>, <span class="comment">//暂时填写默认值即可.</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quhua &#123;</span><br><span class="line">            applicationId <span class="string">"com.xxx.xx"</span></span><br><span class="line">            versionCode <span class="number">1</span></span><br><span class="line">            versionName <span class="string">"1.0.0"</span></span><br><span class="line">            signingConfig = signingConfigs.quhuaRelease</span><br><span class="line"></span><br><span class="line">            String qq_id = <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"QQ_ID"</span>, qq_id</span><br><span class="line">            buildConfigField <span class="string">"String"</span>,         <span class="string">"SINA_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"WX_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"UM_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,       <span class="string">"WX_SECRET"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"SINA_REDIRECT"</span>, <span class="string">'"http://open.weibo.com/apps/xxxxxx/privilege/oauth"'</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"ADHUB_INIT_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 广告sdk初始化id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_SPLASH_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 开屏广告id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_BANNER_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// banner广告id</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,      <span class="string">"SERVER_URL"</span>, <span class="string">'"http://xx.xxx.com/"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,        <span class="string">"LOGO_URL"</span>, <span class="string">'"http://file.xxx.com/img/xxx.png"'</span></span><br><span class="line"></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line"><span class="symbol">                    qq_id:</span> qq_id,</span><br><span class="line">                    <span class="string">JPUSH_PKGNAME :</span> applicationId,</span><br><span class="line">                    <span class="string">JPUSH_APPKEY :</span> <span class="string">"xxxxxx"</span>, <span class="comment">//JPush 上注册的包名对应的 Appkey.</span></span><br><span class="line">                    <span class="string">JPUSH_CHANNEL :</span> <span class="string">"developer-default"</span>, <span class="comment">//暂时填写默认值即可.</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cuntuba &#123;</span><br><span class="line">            applicationId <span class="string">"com.xxx.xx"</span></span><br><span class="line">            versionCode <span class="number">1</span></span><br><span class="line">            versionName <span class="string">"1.0.0"</span></span><br><span class="line">            signingConfig = signingConfigs.cuntubaRelease</span><br><span class="line"></span><br><span class="line">            String qq_id = <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"QQ_ID"</span>, qq_id</span><br><span class="line">            buildConfigField <span class="string">"String"</span>,         <span class="string">"SINA_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"WX_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"UM_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,       <span class="string">"WX_SECRET"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"SINA_REDIRECT"</span>, <span class="string">'"http://open.weibo.com/apps/xxxxxx/privilege/oauth"'</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"ADHUB_INIT_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 广告sdk初始化id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_SPLASH_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 开屏广告id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_BANNER_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// banner广告id</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,      <span class="string">"SERVER_URL"</span>, <span class="string">'"http://xxx.xxxx.com/"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,        <span class="string">"LOGO_URL"</span>, <span class="string">'"http://file.xxx.com/img/xxx.png"'</span></span><br><span class="line"></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line"><span class="symbol">                    qq_id:</span> qq_id,</span><br><span class="line">                    <span class="string">JPUSH_PKGNAME :</span> applicationId,</span><br><span class="line">                    <span class="string">JPUSH_APPKEY :</span> <span class="string">"xxxxxx"</span>, <span class="comment">//JPush 上注册的包名对应的 Appkey.</span></span><br><span class="line">                    <span class="string">JPUSH_CHANNEL :</span> <span class="string">"developer-default"</span>, <span class="comment">//暂时填写默认值即可.</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        xemh &#123;</span><br><span class="line">            applicationId <span class="string">"com.xxx.xx"</span></span><br><span class="line">            versionCode <span class="number">1</span></span><br><span class="line">            versionName <span class="string">"1.0.0"</span></span><br><span class="line">            signingConfig = signingConfigs.xemhRelease</span><br><span class="line"></span><br><span class="line">            String qq_id = <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"QQ_ID"</span>, qq_id</span><br><span class="line">            buildConfigField <span class="string">"String"</span>,         <span class="string">"SINA_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"WX_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,           <span class="string">"UM_ID"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,       <span class="string">"WX_SECRET"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"SINA_REDIRECT"</span>, <span class="string">'"xxxxxx"'</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,   <span class="string">"ADHUB_INIT_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 广告sdk初始化id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_SPLASH_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// 开屏广告id</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"ADHUB_BANNER_ID"</span>, <span class="string">'"xxxxxx"'</span> <span class="comment">// banner广告id</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,      <span class="string">"SERVER_URL"</span>, <span class="string">'"http://xx.xxx.com/"'</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>,        <span class="string">"LOGO_URL"</span>, <span class="string">'"http://file.xxxxxx.com/img/xxxxxx.png"'</span></span><br><span class="line"></span><br><span class="line">            manifestPlaceholders = [</span><br><span class="line"><span class="symbol">                    qq_id:</span> qq_id,</span><br><span class="line">                    <span class="string">JPUSH_PKGNAME :</span> applicationId,</span><br><span class="line">                    <span class="string">JPUSH_APPKEY :</span> <span class="string">"xxxxxx"</span>, <span class="comment">//JPush 上注册的包名对应的 Appkey.</span></span><br><span class="line">                    <span class="string">JPUSH_CHANNEL :</span> <span class="string">"developer-default"</span>, <span class="comment">//暂时填写默认值即可.</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    applicationVariants.all &#123;</span><br><span class="line">        variant -&gt;</span><br><span class="line">            variant.outputs.all &#123;</span><br><span class="line">                outputFileName = <span class="string">"$&#123;variant.productFlavors[0].name&#125;-v$&#123;variant.productFlavors[0].versionName&#125;-$&#123;releaseTime()&#125;.apk"</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 不显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span></span><br><span class="line">            signingConfig <span class="literal">null</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 移除无用的resource文件</span></span><br><span class="line">            shrinkResources <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">            signingConfig <span class="literal">null</span></span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            zipAlignEnabled <span class="literal">false</span></span><br><span class="line">            shrinkResources <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">'META-INF/DEPENDENCIES.txt'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE.txt'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE.txt'</span></span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dexOptions &#123;</span><br><span class="line"></span><br><span class="line">        javaMaxHeapSize <span class="string">"4g"</span> <span class="comment">//此处可根据电脑本身配置 数值越大 当然越快</span></span><br><span class="line"></span><br><span class="line">        preDexLibraries = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span>, <span class="string">'../adpoymer/libs'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    implementation <span class="string">"com.android.support:appcompat-v7:$supportLibraryVersion"</span></span><br><span class="line">    implementation <span class="string">"com.android.support:recyclerview-v7:$supportLibraryVersion"</span></span><br><span class="line">    implementation <span class="string">"com.android.support:support-v4:$supportLibraryVersion"</span></span><br><span class="line">    implementation <span class="string">"com.android.support:design:$supportLibraryVersion"</span></span><br><span class="line">    implementation <span class="string">"com.android.support.constraint:constraint-layout:$constraintVersion"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加retrofit2 的依赖 添加这个依赖就默认添加了okhttp依赖</span></span><br><span class="line">    compile <span class="string">"com.squareup.retrofit2:retrofit:$retrofit2Version"</span></span><br><span class="line">    compile <span class="string">"com.squareup.retrofit2:converter-gson:$retrofit2Version"</span></span><br><span class="line">    compile <span class="string">"com.squareup.retrofit2:adapter-rxjava2:$retrofit2Version"</span></span><br><span class="line">    compile <span class="string">"com.squareup.okhttp3:logging-interceptor:$okhttp3Version"</span></span><br><span class="line">    compile <span class="string">"com.jakewharton:butterknife:$butterknifeVersion"</span></span><br><span class="line">    annotationProcessor <span class="string">"com.jakewharton:butterknife-compiler:$butterknifeVersion"</span></span><br><span class="line">    compile <span class="string">"io.reactivex.rxjava2:rxandroid:$rx2Version"</span></span><br><span class="line">    compile <span class="string">"com.github.xujiaji:xmvp:$xmvpVersion"</span></span><br><span class="line">    implementation <span class="string">"com.github.autume:CircleProgressDialog:$CircleProgressDialogVersion"</span></span><br><span class="line">    compile <span class="string">"com.ogaclejapan.smarttablayout:library:$smarttabVersion"</span></span><br><span class="line">    compile <span class="string">"com.github.CymChad:BaseRecyclerViewAdapterHelper:$adapterHelperVersion"</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">"com.github.bumptech.glide:glide:$glideVersion"</span></span><br><span class="line">    annotationProcessor <span class="string">"com.github.bumptech.glide:compiler:$glideVersion"</span></span><br><span class="line"></span><br><span class="line">    compile <span class="string">"com.makeramen:roundedimageview:$roundedimageviewVersion"</span></span><br><span class="line">    compile <span class="string">"org.greenrobot:eventbus:$eventbusVersion"</span></span><br><span class="line">    annotationProcessor <span class="string">"com.github.hotchemi:permissionsdispatcher-processor:$dispatcherVersion"</span></span><br><span class="line">    compile <span class="string">"com.jaeger.statusbarutil:library:$statusbarutilVersion"</span></span><br><span class="line">    compile(<span class="string">"com.github.hotchemi:permissionsdispatcher:$dispatcherVersion"</span>) &#123;</span><br><span class="line">        exclude <span class="string">module:</span> <span class="string">"support-v13"</span></span><br><span class="line">    &#125;</span><br><span class="line">    implementation <span class="string">"com.github.LuckSiege.PictureSelector:picture_library:$picture_libraryVersion"</span></span><br><span class="line">    implementation <span class="string">'me.drakeet.library:crashwoodpecker:2.1.1'</span></span><br><span class="line">    implementation <span class="string">'com.github.chenupt.android:springindicator:1.0.2@aar'</span></span><br><span class="line">    debugImplementation <span class="string">'com.amitshekhar.android:debug-db:1.0.4'</span></span><br><span class="line">    implementation <span class="string">'com.umeng.sdk:common:1.5.3'</span></span><br><span class="line">    implementation <span class="string">'com.umeng.sdk:analytics:7.5.3'</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'com.liulishuo.filedownloader:library:1.7.5'</span></span><br><span class="line"></span><br><span class="line">    implementation project(<span class="string">':banner'</span>)</span><br><span class="line">    implementation project(<span class="string">':xdialog'</span>)</span><br><span class="line">    implementation project(<span class="string">':shareutil'</span>)</span><br><span class="line">    implementation project(<span class="string">':update'</span>)</span><br><span class="line">    implementation project(<span class="string">':pay'</span>)</span><br><span class="line"><span class="comment">//    implementation project(':adhub')</span></span><br><span class="line">    implementation project(<span class="string">':imagewatcher'</span>)</span><br><span class="line">    implementation files(<span class="string">'libs/lite-orm-1.9.2.jar'</span>)</span><br><span class="line">    implementation <span class="string">'jp.wasabeef:blurry:2.1.1'</span></span><br><span class="line">    implementation <span class="string">"com.google.android:flexbox:$flexboxVersion"</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'cn.jiguang.sdk:jpush:3.1.6'</span>  <span class="comment">// 此处以JPush 3.1.6 版本为例。</span></span><br><span class="line">    implementation <span class="string">'cn.jiguang.sdk:jcore:1.2.5'</span>  <span class="comment">// 此处以JCore 1.2.5 版本为例。</span></span><br><span class="line"></span><br><span class="line">    compile(<span class="string">name:</span> <span class="string">'sdk-release'</span>, <span class="string">ext:</span> <span class="string">'aar'</span>)</span><br><span class="line">    compile(<span class="string">name:</span> <span class="string">'open_ad_sdk'</span>, <span class="string">ext:</span> <span class="string">'aar'</span>)</span><br><span class="line">    compile(<span class="string">name:</span> <span class="string">'adpoymer-3.4.35'</span>, <span class="string">ext:</span> <span class="string">'aar'</span>)</span><br><span class="line">    implementation <span class="string">'pl.droidsonroids.gif:android-gif-drawable:1.0.+'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Demo-地址">Demo 地址<a href="post/android-project-one-for-more#Demo-地址"></a></h2><p><a href="https://github.com/xujiaji/OneForAllApk" target="_blank" rel="noopener">https://github.com/xujiaji/OneForAllApk</a></p><h2 id="结束">结束<a href="post/android-project-one-for-more#结束"></a></h2><p>就这样就可以解放大量劳动力啦！每次项目打包各种软件，选一下就ojbk，哈哈哈~<br>如果有些配置在其他渠道没有的，也可通过BuildConfig在java中判断如果是某某渠道那么屏蔽。<br>over</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;简介&lt;a href=&quot;post/android-project-one-for-more#简介&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;如题所示！本篇文章就是为了解决这种问题。方便打包和运行的时候能做到无需手动替换配置，即可打包想要的apk。打包的时候，只需选一下想打哪
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.xujiaji.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="项目配置" scheme="https://blog.xujiaji.com/tags/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>XMVP：一个通过泛型实现的MVP框架2年的演化路</title>
    <link href="https://blog.xujiaji.com/post/xmvp-framework/index.html"/>
    <id>https://blog.xujiaji.com/post/xmvp-framework/index.html</id>
    <published>2018-09-21T10:22:15.000Z</published>
    <updated>2019-04-08T06:57:05.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>XMVP框架是我的第一个框架，刚从Android起步第一次了解MVP模式时决心写一个自己的东西框架，到现在已运用在我写的多个项目中。虽然两年了，但核心的思路没有改变，到现在变换也不是太多，精简了一些代码，添加了一些功能。</p></blockquote><a id="more"></a><h2 id="起步2016">起步2016<a href="post/xmvp-framework#起步2016"></a></h2><p>这是个刚出社会找工作痛苦的时期，我个人不太喜欢生活中麻烦的事情。安静是我的本性，于是想写个属于自己的框架，为未来做些铺垫。于是，便有了XMVP，名字“X”是臭不要脸的加上了自己名字的开头字母。</p><h4 id="目标">目标<a href="post/xmvp-framework#目标"></a></h4><p><strong>该框架的目标很简单，为了省掉View、Model、Presenter层之间的依赖实现过程，通过简单的配置，框架自动实现依赖关系</strong></p><p>实现的原理：获取配置的泛型类型，通过反射实例化P层和M层。</p><h4 id="代码">代码<a href="post/xmvp-framework#代码"></a></h4><p><strong>1.</strong> 关键能让我开始做这个框架的核心代码如下：</p><blockquote><p>传入对象的Class和需要过滤泛型得的匹配的对象，然后遍历<code>klass</code>中配置的泛型判断是不是<code>filterClass</code>的子类，如果是则找到了配置的泛型类型。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Class&lt;T&gt; <span class="title">getGenericClass</span><span class="params">(Class&lt;?&gt; klass, Class&lt;?&gt; filterClass)</span> </span>&#123;</span><br><span class="line">    Type type = klass.getGenericSuperclass(); <span class="comment">// 获取父类Class类型，它包含了所配置的泛型类型</span></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span> || !(type <span class="keyword">instanceof</span> ParameterizedType)) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 判断是否是泛型类型</span></span><br><span class="line">    ParameterizedType parameterizedType = (ParameterizedType) type;</span><br><span class="line">    Type[] types = parameterizedType.getActualTypeArguments(); <span class="comment">// 由于一个类可能不止配置了一个泛型，获取该对象所有泛型类型</span></span><br><span class="line">    <span class="keyword">for</span> (Type t : types) &#123;</span><br><span class="line">        Class&lt;T&gt; tClass = (Class&lt;T&gt;) t;</span><br><span class="line">        <span class="keyword">if</span> (filterClass.isAssignableFrom(tClass)) &#123; <span class="comment">// 通过filterClass找到需要的目标类型</span></span><br><span class="line">            <span class="keyword">return</span> tClass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.</strong> 使用也非常简单，精简代码如下所示，4步配置就实现了MVP</p><ul><li>首先定义契约（Contract），定义View、Model、Presenter的接口，并且都需要继承自<code>XContract</code></li><li>创建Model实现类</li><li>创建Presenter实现类继承<code>XBasePresenter</code>，泛型中关联View接口和Model实现类</li><li>创建View实现类继承<code>XBaseActivity</code>或其子类，泛型中关联Presenter实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 契约</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HomeContract</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">Presenter</span></span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">View</span></span>&#123;&#125;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Model</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M层实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeModel</span> <span class="keyword">implements</span> <span class="title">HomeContract</span>.<span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P层实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomePresenter</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">XBasePresenter</span>&lt;<span class="title">HomeContract</span>.<span class="title">View</span>, <span class="title">HomeModel</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">HomeContract</span>.<span class="title">Presenter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// V层实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span></span></span><br><span class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">XBaseActivity</span>&lt;<span class="title">HomePresenter</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">HomeContract</span>.<span class="title">View</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>3.</strong> 最初XMVP框架做出时写的一篇文章 <a href="https://www.jianshu.com/p/7c71c0d6c150" target="_blank" rel="noopener">封了一个Android MVP框架，就叫XMVP吧！</a></p><hr><blockquote><p>就这样，第一阶段宣告完毕，然后就是优化和修复一些bug，当然上面的<code>getGenericClass</code>这个方法也是后期优化过的结果。</p></blockquote><h2 id="想偷懒了就开发了MVPManager插件，快速生成XMVP代码">想偷懒了就开发了MVPManager插件，快速生成XMVP代码<a href="post/xmvp-framework#想偷懒了就开发了MVPManager插件，快速生成XMVP代码"></a></h2><p><img src="https://raw.githubusercontent.com/xujiaji/MVPManager/master/display/banner.png" alt=""><br>也就是<code>XMVP</code>框架开发出来也就1个月之内的事情吧！这时感觉写契约（Contract），写<code>XMVP</code>各个实现类，都是重复的劳动力，每一个新的界面就得去创建这么些文件太过辛苦。结果虽然变得有条理有模块，但是工作量有些重复和增加，有些时候配置泛型忘了还需要看之前是怎么配置的。</p><p>当时其实也有创建MVP文件的插件之类的东西，但是不符合<code>XMVP</code>的实情，泛型还是得自己动手，于是决心自己写一个<code>intellij</code>插件，当然在<code>AS</code>中也能使用。</p><h4 id="创建MVP代码截图，这是最新的创建代码界面的截图">创建MVP代码截图，这是最新的创建代码界面的截图<a href="post/xmvp-framework#创建MVP代码截图，这是最新的创建代码界面的截图"></a></h4><blockquote><p>在1.0的基础上，增加了可将同一个模块放一个包中或将MVP分在对应的包中的选项；增加了可以不是XMVP框架的情况下使用</p></blockquote><div class="article-img"><p><img src="https://github.com/xujiaji/MVPManager/raw/master/display/update_2_0_0.png" alt="" data-zoomable=""></p></div><h4 id="这是一张动态图，是一张旧版本的演示图。只需要和上面的截图结合来看一下哦">这是一张动态图，是一张旧版本的演示图。只需要和上面的截图结合来看一下哦<a href="post/xmvp-framework#这是一张动态图，是一张旧版本的演示图。只需要和上面的截图结合来看一下哦"></a></h4><div class="article-img"><p><img src="https://github.com/xujiaji/MVPManager/raw/master/display/edit_MVPManager.gif" alt="" data-zoomable=""></p></div><h4 id="最后还有个逆向增加或删除XMVP契约中定义方法的功能">最后还有个逆向增加或删除XMVP契约中定义方法的功能<a href="post/xmvp-framework#最后还有个逆向增加或删除XMVP契约中定义方法的功能"></a></h4><blockquote><p>会同时更新实现类的方法，本人是写出这个功能，但几乎不用的啦</p></blockquote><div class="article-img"><p><img src="https://github.com/xujiaji/MVPManager/raw/master/display/open_change_MVPManager.gif" alt="" data-zoomable=""></p></div><h4 id="刚刚开发出来MVPManager的时候，我也写了篇文章介绍-这个AS插件能帮你快速管理MVP">刚刚开发出来MVPManager的时候，我也写了篇文章介绍 这个AS插件能帮你快速管理MVP<a href="post/xmvp-framework#刚刚开发出来MVPManager的时候，我也写了篇文章介绍-这个AS插件能帮你快速管理MVP"></a></h4><hr><blockquote><p>就这样，第二阶段结束了。其主要目的就是为了解决MVP重复逻辑的代码量问题</p></blockquote><h2 id="实践中的更新">实践中的更新<a href="post/xmvp-framework#实践中的更新"></a></h2><p>在不断的实践运用中也发现了很多没有考虑到或者忽略的问题，其中最映像深刻的不过于有次上线应用的时候，混淆居然会导致无法创建Presenter熬夜找了很久。</p><p>还有就是忽略了Fragment有app包和v4包两个地方，框架中只写了一个，考虑的都比较片面。</p><p>只有在实践中才能真正的考验，一直以来大概就我和少数的小伙伴在使用。虽然用的比较少，但是写出来后就要对它负责嘛！</p><h4 id="使用中的一些个人技巧">使用中的一些个人技巧<a href="post/xmvp-framework#使用中的一些个人技巧"></a></h4><p><strong>1.</strong> 很多时候，Activity和Presenter，更或者Model都有共用的地方，此时我们需要作出提取抽象。于是我们就需要继承<code>XBaseActivity</code>、<code>XBaseFragment</code>、<code>XBasePresenter</code>再做一层抽象，这样如果以后不想用<code>XMVP</code>框架有更好的选择也更好替换哈。如下所示：</p><blockquote><p>BaseActivity.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">XBasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">XBaseActivity</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInitCircle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onInitCircle();</span><br><span class="line">    ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BasePresenter.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">View</span>, <span class="title">E</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">Model</span>&gt; <span class="keyword">extends</span> <span class="title">XBasePresenter</span>&lt;<span class="title">T</span>, <span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> CompositeDisposable mCompositeDisposable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.end();</span><br><span class="line">        <span class="keyword">if</span> (mCompositeDisposable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mCompositeDisposable.clear();</span><br><span class="line">            mCompositeDisposable = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向上面这样，我们通过一个中间层，处理一些我们需要统一调用的或处理的一些东西</p><p><strong>2.</strong> 对于Presenter回调Model处理后返回的数据监听，我们可以定义一个通用监听接口，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">int</span> code, String err)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>并且，我们可以对这个接口进行实现，我们可以统一对错误信息做些提示或处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericListenerImp</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">GenericListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">GenericListenerImp</span><span class="params">(<span class="comment">/*可以传入进来base view或base presenter，如果有错误可以调用对应方法统一处理*/</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(<span class="keyword">int</span> code, String err)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对错误做出统一处理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.</strong> 我们最常用的就是刷新加载列表了，几乎所有app中都需要，并且在同一个应用中的加载逻辑都是一样的，于是我们可以将其抽象出来，使用的时候会非常方便。</p><blockquote><p>首先定义一个基础刷新契约，每一个有刷新的view的接口都直接从这里继承</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseRefreshContract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 请求数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">requestLoadListData</span><span class="params">(<span class="keyword">int</span> page)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 请求更新列表数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">requestUpdateListData</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> &lt;<span class="title">X</span>&gt; <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新列表成功</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">updateListSuccess</span><span class="params">(List&lt;X&gt; datas, <span class="keyword">boolean</span> isEnd)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新失败</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">updateListFail</span><span class="params">(String err)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加载数据成功</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadListDataSuccess</span><span class="params">(List&lt;X&gt; datas, <span class="keyword">int</span> currentPage, <span class="keyword">boolean</span> isEnd)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 加载数据失败</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> err</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadListDataFail</span><span class="params">(String err)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数据已经被加载完</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">loadListDateOver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后抽象View，这里以Activity为例，Fragment一致。我使用了<code>SwipeRefreshLayout</code>作为刷新，<code>BaseRecyclerViewAdapterHelper</code>处理填充数据和加载数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRefreshActivity</span>&lt;<span class="title">E</span> ,<span class="title">X</span> <span class="keyword">extends</span> <span class="title">BaseQuickAdapter</span>&lt;<span class="title">E</span>, <span class="title">BaseViewHolder</span>&gt;, <span class="title">T</span> <span class="keyword">extends</span> <span class="title">XBasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">BaseRefreshContract</span>.<span class="title">View</span>&lt;<span class="title">E</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">BaseQuickAdapter</span>.<span class="title">RequestLoadMoreListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">SwipeRefreshLayout</span>.<span class="title">OnRefreshListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> currentPage;<span class="comment">//当前的页面</span></span><br><span class="line">    <span class="keyword">protected</span> X mAdapter;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isEnd;</span><br><span class="line">    <span class="keyword">protected</span> SwipeRefreshLayout swipeLayout;</span><br><span class="line">    <span class="keyword">protected</span> RecyclerView mRecyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInitCircle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onInitCircle();</span><br><span class="line">        mAdapter = getAdapter();</span><br><span class="line">        mRecyclerView = getRecyclerView();</span><br><span class="line">        swipeLayout = getSwipeLayout();</span><br><span class="line">        swipeLayout.setOnRefreshListener(<span class="keyword">this</span>);</span><br><span class="line">        mAdapter.setOnLoadMoreListener(<span class="keyword">this</span>, mRecyclerView);</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> X <span class="title">getAdapter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> SwipeRefreshLayout <span class="title">getSwipeLayout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> RecyclerView <span class="title">getRecyclerView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新列表成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateListSuccess</span><span class="params">(List&lt;E&gt; datas, <span class="keyword">boolean</span> isEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isEnd = isEnd;</span><br><span class="line">        currentPage = <span class="number">1</span>;</span><br><span class="line">        mAdapter.setNewData(datas);</span><br><span class="line">        swipeLayout.setRefreshing(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (isEnd) &#123;</span><br><span class="line">            loadListDateOver();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mAdapter.setEnableLoadMore(<span class="keyword">true</span>);</span><br><span class="line">            mAdapter.loadMoreComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateListFail</span><span class="params">(String err)</span> </span>&#123;</span><br><span class="line">        swipeLayout.setRefreshing(<span class="keyword">false</span>);</span><br><span class="line">        mAdapter.setEnableLoadMore(<span class="keyword">true</span>);</span><br><span class="line">        ToastUtil.getInstance().showLongT(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载数据成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadListDataSuccess</span><span class="params">(List&lt;E&gt; datas, <span class="keyword">int</span> currentPage, <span class="keyword">boolean</span> isEnd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="keyword">this</span>.isEnd = isEnd;</span><br><span class="line">        mAdapter.addData(datas);</span><br><span class="line">        swipeLayout.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        mAdapter.loadMoreComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载数据失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> err</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadListDataFail</span><span class="params">(String err)</span> </span>&#123;</span><br><span class="line">        swipeLayout.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        mAdapter.loadMoreFail();</span><br><span class="line">        ToastUtil.getInstance().showLongT(err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据已经被加载完</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadListDateOver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mAdapter.loadMoreEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!swipeLayout.isRefreshing())</span><br><span class="line">        &#123;</span><br><span class="line">            swipeLayout.setRefreshing(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        getPresenter().requestUpdateListData();</span><br><span class="line">        mAdapter.setEnableLoadMore(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadMoreRequested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEnd) &#123;</span><br><span class="line">            loadListDateOver();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        swipeLayout.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        getPresenter().requestLoadListData(++currentPage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BaseRefreshContract.<span class="function">Presenter <span class="title">getPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (presenter <span class="keyword">instanceof</span> BaseRefreshContract.Presenter) &#123;</span><br><span class="line">            <span class="keyword">return</span>  (BaseRefreshContract.Presenter) presenter;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"presenter please extends BaseRefreshContract.Presenter"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用：定义一个列表页面的契约</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleDetailContract</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseRefreshContract</span>.<span class="title">View</span>&lt;<span class="title">CircleMsgEntity</span>.<span class="title">CommentBean</span>&gt; </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BaseRefreshContract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Model</span> <span class="keyword">extends</span> <span class="title">XContract</span>.<span class="title">Model</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">catArticleDetails</span><span class="params">(<span class="keyword">int</span> articleId, <span class="keyword">int</span> page, CompositeDisposable cd, NetRequestListener&lt;Result&lt;CircleMsgEntity&gt;&gt; listener)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用：View实现层，由于这是一个公司项目中的类，省略的所有的无关代码<br><code>CircleMsgEntity.CommentBean</code> 是一个Adapter(ArticleCommentAdapter)填充的实体类<br><code>ArticleCommentAdapter</code> 是一个继承BaseRecyclerViewAdapterHelper框架中的<code>BaseQuickAdapter</code>的类，并且该类是这样的：<code>public class ArticleCommentAdapter extends BaseQuickAdapter&lt;CircleMsgEntity.CommentBean, BaseViewHolder&gt;</code> 必须保证Activity第一个泛型和Adapter的第一个泛型类型一致</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailActivity</span> <span class="keyword">extends</span> <span class="title">BaseRefreshActivity</span>&lt;<span class="title">CircleMsgEntity</span>.<span class="title">CommentBean</span>, <span class="title">ArticleCommentAdapter</span>, <span class="title">ArticleDetailPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">ArticleDetailContract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.recycler)</span><br><span class="line">    RecyclerView recycler;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.refresh)</span><br><span class="line">    SwipeRefreshLayout refresh;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInitCircle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onInitCircle();</span><br><span class="line">        onRefresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">layoutId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_article_detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ArticleCommentAdapter <span class="title">getAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArticleCommentAdapter(ArticleCommentAdapter.TYPE_NORMAL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SwipeRefreshLayout <span class="title">getSwipeLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        refresh.setColorSchemeResources(R.color.yellow);</span><br><span class="line">        <span class="keyword">return</span> refresh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RecyclerView <span class="title">getRecyclerView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        recycler.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> recycler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用： Presenter实现层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">ArticleDetailContract</span>.<span class="title">View</span>,<span class="title">ArticleDetailModel</span>&gt; <span class="keyword">implements</span> <span class="title">ArticleDetailContract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.start();</span><br><span class="line">        mCompositeDisposable = <span class="keyword">new</span> CompositeDisposable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestLoadListData</span><span class="params">(<span class="keyword">int</span> page)</span> </span>&#123;</span><br><span class="line">        model.catArticleDetails(view.getArticleId(), page, mCompositeDisposable, <span class="keyword">new</span> NetRequestListener&lt;Result&lt;CircleMsgEntity&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(Result&lt;CircleMsgEntity&gt; circleMsgEntityResult)</span> </span>&#123;</span><br><span class="line">                ResultListBean&lt;List&lt;CircleMsgEntity.CommentBean&gt;&gt; resultListBean = circleMsgEntityResult.getData().getCommentList();</span><br><span class="line">                view.loadListDataSuccess(resultListBean.getList(), resultListBean.getPage(), resultListBean.getPage() &gt;= resultListBean.getPagecount());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String err)</span> </span>&#123;</span><br><span class="line">                view.loadListDataFail(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestUpdateListData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        model.catArticleDetails(view.getArticleId(), <span class="number">1</span>, mCompositeDisposable, <span class="keyword">new</span> NetRequestListener&lt;Result&lt;CircleMsgEntity&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(Result&lt;CircleMsgEntity&gt; circleMsgEntityResult)</span> </span>&#123;</span><br><span class="line">                ResultListBean&lt;List&lt;CircleMsgEntity.CommentBean&gt;&gt; resultListBean = circleMsgEntityResult.getData().getCommentList();</span><br><span class="line">                view.updateListSuccess(resultListBean.getList(), resultListBean.getPage() &gt;= resultListBean.getPagecount());</span><br><span class="line">                view.displayArticleDetail(circleMsgEntityResult.getData());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String err)</span> </span>&#123;</span><br><span class="line">                view.updateListFail(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Model层，去请求列表数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDetailModel</span> <span class="keyword">implements</span> <span class="title">ArticleDetailContract</span>.<span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catArticleDetails</span><span class="params">(<span class="keyword">int</span> articleId, <span class="keyword">int</span> page, CompositeDisposable cd, NetRequestListener&lt;Result&lt;CircleMsgEntity&gt;&gt; listener)</span> </span>&#123;</span><br><span class="line">        Observer&lt;Result&lt;CircleMsgEntity&gt;&gt; observer = ModelHelper.getObserver(cd, listener, <span class="keyword">true</span>); <span class="comment">// 对rxjava返回的数据进行统一处理</span></span><br><span class="line">        Http.getInstance().getArticleDetails(articleId, page, observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以不断的复用<code>BaseRefreshActivity</code>、<code>ArticleDetailContract</code>来让刷新加载统一，当然在您实际的使用过程中肯定还需要调整。这里只给我了我自己的一些思路和实现方式。</p><blockquote><p>如果我们需要其他的抽象时，只需要注意像刷新一样将泛型继承关系标准上就可以啦。如果Model也可以抽取出来，复用时只需要继承抽象出来的Model。</p></blockquote><h2 id="目前">目前<a href="post/xmvp-framework#目前"></a></h2><p>目前XMVP框架已更新到<code>1.2.2</code>，废弃了一些以前的方法（当然现在还能用）。添加了更多View层的辅助方法，为了偷个懒，就直接展示新增的方法代码啦！</p><blockquote><p>基本周期</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: xujiaji</span></span><br><span class="line"><span class="comment"> * created on: 2018/9/4 10:57</span></span><br><span class="line"><span class="comment"> * description: 定义View相关周期 &lt;br /&gt; Define View related Cycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">XViewCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 super &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(Bundle)&#125;之前被调用              &lt;br /&gt;  will be called before super class &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(Bundle)&#125; called</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBeforeCreateCircle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 super &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(Bundle)&#125;之前被调用，并且有Bundle &lt;br /&gt;  will be called before super class &#123;<span class="doctag">@link</span> android.app.Activity#onCreate(Bundle)&#125; called</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> savedInstanceState 该参数不可能为null                                  &lt;br /&gt; this parameter cannot be null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBundleHandle</span><span class="params">(@NonNull Bundle savedInstanceState)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取布局的id                                &lt;br /&gt; get layout id</span></span><br><span class="line"><span class="comment">     * 在 &#123;<span class="doctag">@link</span> #onBeforeCreateCircle &#125;之后被调用 &lt;br /&gt; will be called after &#123;<span class="doctag">@link</span> #onBeforeCreateCircle &#125; called</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> xml布局id                         &lt;br /&gt; xml layout id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">layoutId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  在这里面进行初始化                    &lt;br /&gt; initialize here</span></span><br><span class="line"><span class="comment">     *  在 &#123;<span class="doctag">@link</span> #layoutId()&#125; 之后被调用   &lt;br /&gt; will be called after &#123;<span class="doctag">@link</span> #layoutId()&#125; called</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInitCircle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里面写监听事件                       &lt;br /&gt; write listens event here</span></span><br><span class="line"><span class="comment">     * 在 &#123;<span class="doctag">@link</span> #onInitCircle()&#125; 之后被调用 &lt;br /&gt; will be called after &#123;<span class="doctag">@link</span> #onInitCircle()&#125; called</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onListenerCircle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Activiy中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: xujiaji</span></span><br><span class="line"><span class="comment"> * created on: 2018/9/11 15:05</span></span><br><span class="line"><span class="comment"> * description: 定义Activity View相关周期 &lt;br /&gt; Define Activity View related Cycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">XActivityCycle</span> <span class="keyword">extends</span> <span class="title">XViewCycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理上个页面传递过来的数据 &lt;br /&gt; Handle the data passed from the previous page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onIntentHandle</span><span class="params">(@NonNull Intent intent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Fragment中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: xujiaji</span></span><br><span class="line"><span class="comment"> * created on: 2018/9/4 10:57</span></span><br><span class="line"><span class="comment"> * description: 定义Fragment View相关周期 &lt;br /&gt; Define Fragment View related Cycle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">XFragViewCycle</span> <span class="keyword">extends</span> <span class="title">XViewCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理&#123;<span class="doctag">@link</span> Fragment#getArguments()&#125; 的值，如果有才会调用  &lt;br /&gt; Handle the value of &#123;<span class="doctag">@link</span> Fragment#getArguments()&#125; , if it is there, it will be called</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bundle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onArgumentsHandle</span><span class="params">(@NonNull Bundle bundle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onVisible</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLazyLoad</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略&#123;<span class="doctag">@link</span> #isFirstLoad() &#125;的值，强制刷新数据，但仍要满足 &#123;<span class="doctag">@link</span> #isFragmentVisible()&#125; &amp;&amp; &#123;<span class="doctag">@link</span> #isPrepared()&#125; &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * Ignore the value of &#123;<span class="doctag">@link</span> #isFirstLoad() &#125; to force refresh data, but still satisfy &#123;<span class="doctag">@link</span> #isFragmentVisible()&#125; &amp;&amp; &#123;<span class="doctag">@link</span> #isPrepared()&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setForceLoad</span><span class="params">(<span class="keyword">boolean</span> forceLoad)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isForceLoad</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrepared</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFirstLoad</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isFragmentVisible</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是在ViewPager中，默认为true</span></span><br><span class="line"><span class="comment">     * whether in ViewPager, default is true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isInViewPager</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Fragment中定义的方法是比较多的，因为由于懒加载比较常用，新增了懒加载。我们如果需要加载数据，可直接在<code>onLazyLoad()</code>方法中进行。</p><blockquote><p>需要注意：如果Fragment不是和ViewPager结合，需要将<code>isInViewPager</code>返回false，默认返回的true。如果不这样，可能会导致通过FragmentManger提交的Fragment无法调用到<code>onLazyLoad</code>方法。</p></blockquote><h2 id="最后">最后<a href="post/xmvp-framework#最后"></a></h2><p>通过写这个框架学到了思考很多东西，并且后期也会继续更新，我自己写项目中也在使用。可能有些地方考虑的不充足，谢谢大家也可以提建议。当然这只是MVP的一种实现思路，其他的还是有很多的，这里大家也许都有一定了解哈。</p><p>XMVP地址：<a href="https://github.com/xujiaji/XMVP" target="_blank" rel="noopener">https://github.com/xujiaji/XMVP</a></p><p>欢迎大家Star、Fork、PR (〃’▽’〃)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;XMVP框架是我的第一个框架，刚从Android起步第一次了解MVP模式时决心写一个自己的东西框架，到现在已运用在我写的多个项目中。虽然两年了，但核心的思路没有改变，到现在变换也不是太多，精简了一些代码，添加了一些功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://blog.xujiaji.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="Library" scheme="https://blog.xujiaji.com/tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>iOS Objective-C Learn Note</title>
    <link href="https://blog.xujiaji.com/post/iOS-Objective-C-Learn/index.html"/>
    <id>https://blog.xujiaji.com/post/iOS-Objective-C-Learn/index.html</id>
    <published>2018-09-05T10:11:24.000Z</published>
    <updated>2018-11-02T07:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源代码文件扩展名对比">源代码文件扩展名对比<a href="post/iOS-Objective-C-Learn#源代码文件扩展名对比"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left"></th><th>头文件</th><th>实现文件</th></tr></thead><tbody><tr><td style="text-align:left">c语言</td><td>.h</td><td>.c</td></tr><tr><td style="text-align:left">c++语言</td><td>.h</td><td>.cpp</td></tr><tr><td style="text-align:left">oc语言</td><td>.h</td><td>.m</td></tr><tr><td style="text-align:left">oc&amp;c++</td><td>.h</td><td>.mm</td></tr></tbody></table></div></div><h2 id="类的定义">类的定义<a href="post/iOS-Objective-C-Learn#类的定义"></a></h2><blockquote><p>定义一个<code>SimpleClass</code>类</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SimpleClass</span>: <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="类的属性申明">类的属性申明<a href="post/iOS-Objective-C-Learn#类的属性申明"></a></h2><blockquote><p>通过<code>@property</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *firstName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSString</span> *lastName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针类型，是一个对象</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSNumber</span> *yearOfBirth;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础类型，是一个值类型</span></span><br><span class="line"><span class="keyword">@property</span> <span class="keyword">int</span> yearOfBirth;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个只读的属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSString</span> *firstName;</span><br></pre></td></tr></table></figure><h2 id="减号方法和加号方法（本质就是一个函数）">减号方法和加号方法（本质就是一个函数）<a href="post/iOS-Objective-C-Learn#减号方法和加号方法（本质就是一个函数）"></a></h2><ol><li>减号方法（普通方法又称对象方法）</li><li>加号方法（类方法，又称静态方法）</li></ol><h2 id="完整的例子">完整的例子<a href="post/iOS-Objective-C-Learn#完整的例子"></a></h2><blockquote><p>接口<code>XYZPerson.h</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XYZPerson</span>: <span class="title">NSObject</span></span></span><br><span class="line">-(<span class="keyword">void</span>)sayHello;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>实现<code>XYZPerson.m</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"XYZPerson.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XYZPerson</span></span></span><br><span class="line">-(<span class="keyword">void</span>)sayHello &#123;</span><br><span class="line">  <span class="comment">// 加了@符号，表示是OC类型的字符串。不加表示是纯C语言的字符数组</span></span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"Hello, World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="简单的程序">简单的程序<a href="post/iOS-Objective-C-Learn#简单的程序"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// insert code here...</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Hello, World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本数据类型">基本数据类型<a href="post/iOS-Objective-C-Learn#基本数据类型"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th>类型</th><th style="text-align:right">进制位</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td>int</td><td style="text-align:right">32位</td><td style="text-align:right">int a = 0;</td></tr><tr><td>float</td><td style="text-align:right">32位</td><td style="text-align:right">float f = 1.0;</td></tr><tr><td>double</td><td style="text-align:right">64位</td><td style="text-align:right">double num;</td></tr><tr><td>char</td><td style="text-align:right">8位</td><td style="text-align:right">char c = ‘A’;</td></tr></tbody></table></div></div><h2 id="其他类型">其他类型<a href="post/iOS-Objective-C-Learn#其他类型"></a></h2><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>NSString</td><td>@”hello world”</td></tr><tr><td>“hello world”</td><td>C语言字符串类型</td></tr></tbody></table></div></div><h2 id="限定词">限定词<a href="post/iOS-Objective-C-Learn#限定词"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th>限定词</th><th style="text-align:right">例子</th><th>描述</th></tr></thead><tbody><tr><td>long</td><td style="text-align:right">long a;</td><td>//完整写法为：long int a;其实现在int已经32位了就相当于int a;</td></tr><tr><td>long long</td><td style="text-align:right">long long int a;</td><td></td></tr><tr><td>short</td><td style="text-align:right">short int a; short a;</td><td>// 16位整型</td></tr><tr><td>unsigned</td><td style="text-align:right">unsigned int a;</td><td>// 无符号</td></tr><tr><td>signed</td><td style="text-align:right">signed int a;</td><td>// 有符号</td></tr></tbody></table></div></div><h2 id="算术表达式与运算符">算术表达式与运算符<a href="post/iOS-Objective-C-Learn#算术表达式与运算符"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:right">名称</th><th style="text-align:left">表示</th></tr></thead><tbody><tr><td style="text-align:right">赋值</td><td style="text-align:left"><code>=</code></td></tr><tr><td style="text-align:right">一元运算符</td><td style="text-align:left"><code>++</code> <code>--</code></td></tr><tr><td style="text-align:right">二元运算符</td><td style="text-align:left"><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></td></tr><tr><td style="text-align:right">三目运算符</td><td style="text-align:left">2 &gt; 3 <code>?</code> YES <code>:</code> NO</td></tr></tbody></table></div></div><h2 id="if语句（非0就是真）">if语句（非0就是真）<a href="post/iOS-Objective-C-Learn#if语句（非0就是真）"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:right"></th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:right">真</td><td style="text-align:left"><code>YES</code> <code>所有非0的值</code></td></tr><tr><td style="text-align:right">假</td><td style="text-align:left"><code>NO</code> <code>0</code></td></tr></tbody></table></div></div><blockquote><p>简单例子</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"这句话是真的"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"这句话是假的 %hhd"</span>, <span class="literal">NO</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="goto-跳转语句，跳转的前面定义的标签处">goto 跳转语句，跳转的前面定义的标签处<a href="post/iOS-Objective-C-Learn#goto-跳转语句，跳转的前面定义的标签处"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义标签a</span></span><br><span class="line">    a:</span><br><span class="line">        i ++;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"i的值为%d"</span>, i);</span><br><span class="line"><span class="comment">//        if(i &lt; 5) goto a;</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> a; <span class="comment">// 跳转到标签a</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">goto</span> b; <span class="comment">// 跳转到标签b</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"============"</span>); <span class="comment">// 由于上面直接跳转到了b标签，因此该语句得不到执行</span></span><br><span class="line"></span><br><span class="line">    b:&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"跳到b了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 2018-09-05 22:23:53.800654+0800 les1[971:104767] i的值为1</span></span><br><span class="line"><span class="comment">// 2018-09-05 22:23:53.800827+0800 les1[971:104767] i的值为2</span></span><br><span class="line"><span class="comment">// 2018-09-05 22:23:53.800858+0800 les1[971:104767] i的值为3</span></span><br><span class="line"><span class="comment">// 2018-09-05 22:23:53.800876+0800 les1[971:104767] i的值为4</span></span><br><span class="line"><span class="comment">// 2018-09-05 22:23:53.800889+0800 les1[971:104767] i的值为5</span></span><br><span class="line"><span class="comment">// 2018-09-05 22:23:53.800902+0800 les1[971:104767] 跳到b了</span></span><br></pre></td></tr></table></figure><h2 id="while-循环语句">while 循环语句<a href="post/iOS-Objective-C-Learn#while-循环语句"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Hello world! i = %d"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// Hello world! i = 1</span></span><br><span class="line"><span class="comment">// Hello world! i = 2</span></span><br><span class="line"><span class="comment">// Hello world! i = 3</span></span><br><span class="line"><span class="comment">// Hello world! i = 4</span></span><br><span class="line"><span class="comment">// Hello world! i = 5</span></span><br></pre></td></tr></table></figure><h2 id="do-while-循环，至少执行一次">do while 循环，至少执行一次<a href="post/iOS-Objective-C-Learn#do-while-循环，至少执行一次"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hello!"</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// hello!</span></span><br></pre></td></tr></table></figure><h2 id="for-循环">for 循环<a href="post/iOS-Objective-C-Learn#for-循环"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"i = %d"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// i = 1</span></span><br><span class="line"><span class="comment">// i = 2</span></span><br><span class="line"><span class="comment">// i = 3</span></span><br><span class="line"><span class="comment">// i = 4</span></span><br><span class="line"><span class="comment">// i = 5</span></span><br></pre></td></tr></table></figure><h2 id="循环控制break、continue">循环控制break、continue<a href="post/iOS-Objective-C-Learn#循环控制break、continue"></a></h2><ul><li>break： 终止循环</li><li>continue: 跳过当前循环</li></ul><h2 id="switch分支语句">switch分支语句<a href="post/iOS-Objective-C-Learn#switch分支语句"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"i = 0"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"i = 1"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"i = 2"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"i = 3"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"NO"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数的基本写法">函数的基本写法<a href="post/iOS-Objective-C-Learn#函数的基本写法"></a></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 求面积的函数</span></span><br><span class="line"><span class="comment"> * 传入值，计算并返回面积值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参无返回的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NSLog(@<span class="string">"this is a test!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        NSLog(@<span class="string">"value = %f"</span>, area(<span class="number">5.0</span>, <span class="number">3.0</span>));</span><br><span class="line">        show();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main函数中的默认参数">main函数中的默认参数<a href="post/iOS-Objective-C-Learn#main函数中的默认参数"></a></h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"argc = %d"</span>, argc);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%s"</span>, argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>终端运行</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l</span><br><span class="line">total 56</span><br><span class="line">-rwxr-xr-x@ 1 username  staff  27984  9  5 23:21 les1</span><br><span class="line"></span><br><span class="line">$ ./les1</span><br><span class="line">2018-09-05 23:28:27.313 les1[1369:176584] argc = 1</span><br><span class="line">2018-09-05 23:28:27.313 les1[1369:176584] ./les1</span><br><span class="line"></span><br><span class="line">$ ./les1 -a -b -c</span><br><span class="line">2018-09-05 23:28:39.782 les1[1370:176617] argc = 4</span><br><span class="line">2018-09-05 23:28:39.782 les1[1370:176617] ./les1</span><br><span class="line">2018-09-05 23:28:39.782 les1[1370:176617] -a</span><br><span class="line">2018-09-05 23:28:39.782 les1[1370:176617] -b</span><br><span class="line">2018-09-05 23:28:39.782 les1[1370:176617] -c</span><br></pre></td></tr></table></figure><h2 id="创建类">创建类<a href="post/iOS-Objective-C-Learn#创建类"></a></h2><blockquote><p>头文件<code>People.h</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">People</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>实现文件<code>People.m</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">People</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="实例化对象">实例化对象<a href="post/iOS-Objective-C-Learn#实例化对象"></a></h2><ol><li>导入类的头文件</li><li><code>[]</code>中写函数的调用</li><li><code>alloc</code> 函数为对象分配内存空间</li><li><code>init</code> 函数进行初始化操作</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span> // 导入类头文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// 实例化对象</span></span><br><span class="line">        <span class="comment">// [] 函数的调用</span></span><br><span class="line">        <span class="comment">// [类名 方法名]</span></span><br><span class="line">        <span class="comment">// [对象名 方法名]</span></span><br><span class="line">        <span class="comment">// alloc - 为对象分配内存空间</span></span><br><span class="line">        <span class="comment">// init - 进行初始化操作</span></span><br><span class="line">        People * p1 = [[People alloc] init];</span><br><span class="line">        People * p2 = [[People alloc] init];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性和成员变量">属性和成员变量<a href="post/iOS-Objective-C-Learn#属性和成员变量"></a></h2><ol><li>类内使用成员变量、类外使用属性</li><li>定义成员变量，此时外部无法访问。如果要让外部可访问需要加上（不建议）：@public</li><li>属性是为了让类外可以访问成员变量</li><li>属性就是成员变量的外部接口</li><li>可将属性拆开，写成<code>get</code>和<code>set</code>两部分</li></ol><blockquote><p>People.h</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类内使用成员变量、类外使用属性</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">People</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义成员变量，此时外部无法访问。如果要让外部可访问需要加上：@public</span></span><br><span class="line">    <span class="comment">// @public</span></span><br><span class="line">    <span class="comment">// NSString * _peopleName; // 如果定义了该成员变量的属性，那么可以不写。编译器会为我们自动生成一个叫_peopleName的成员变量</span></span><br><span class="line">    <span class="keyword">int</span> _peopleAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性是为了让类外可以访问成员变量</span></span><br><span class="line"><span class="comment">// 属性就是成员变量的外部接口</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSString</span> * peopleName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将属性拆开</span></span><br><span class="line">- (<span class="keyword">void</span>) setAge:(<span class="keyword">int</span>) age;</span><br><span class="line">- (<span class="keyword">int</span>) getAge;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>People.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> _peopleSex; <span class="comment">// 也可以将成员变量定义在m文件中，没什么区别</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">People</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _peopleName = <span class="string">@"张三"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) setAge:(<span class="keyword">int</span>) age</span><br><span class="line">&#123;</span><br><span class="line">    _peopleAge = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) getAge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _peopleAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>main.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        People * p1 = [[People alloc] init];</span><br><span class="line">        p1.peopleName = <span class="string">@"李四"</span>; <span class="comment">// 通过属性设置名字</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1 name %@"</span>, [p1 peopleName]); <span class="comment">// 通过属性获取名字</span></span><br><span class="line">        [p1 setAge:<span class="number">23</span>]; <span class="comment">// 通过函数设置年龄</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"p1 age %d"</span>, [p1 getAge]); <span class="comment">// 通过函数获取年龄</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数">函数<a href="post/iOS-Objective-C-Learn#函数"></a></h2><ol><li>调用方法是用中括号</li><li><code>-</code>、<code>+</code> 方法的类型（减号代表对象方法，加号代表类方法）</li><li>加号方法和减号方法之间的相互调用逻辑和java一样</li><li>方法名：去掉方法类型和参数类型就是方法名</li><li><code>(int)</code> 返回值类型<code>int</code></li><li><code>:(int) x</code>     代表方法有参数，参数类型<code>int</code>，参数名<code>x</code></li></ol><blockquote><p>People.h</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">People</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 申明方法</span></span><br><span class="line"><span class="comment"> -、+ 方法的类型（减号代表对象方法，加号代表类方法）</span></span><br><span class="line"><span class="comment"> 加号方法和减号方法之间的相互调用逻辑和java一样</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(int) 返回值类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> :(int) x     代表方法有参数，参数类型int，参数名x</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 方法名：去掉方法类型和参数类型就是方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">int</span>) report;</span><br><span class="line">+ (<span class="keyword">void</span>) report1;</span><br><span class="line">- (<span class="keyword">int</span>) showWithA:(<span class="keyword">int</span>) a;</span><br><span class="line">- (<span class="keyword">int</span>) showWithA:(<span class="keyword">int</span>) a andB:(<span class="keyword">int</span>) b;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>People.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">People</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *_name1;</span><br><span class="line">- (<span class="keyword">int</span>)report</span><br><span class="line">&#123;</span><br><span class="line">    _name = <span class="string">@"abc"</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"-号方法:report"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">&#125;</span><br><span class="line">+ (<span class="keyword">void</span>)report1</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//     _name = @"abc"; 编译错误，+号方法相当于java中的静态方法</span></span><br><span class="line">    _name1 = <span class="string">@"abc"</span>;<span class="comment">//静态方法可调用静态变量</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"+号方法：report1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) showWithA:(<span class="keyword">int</span>) a</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>) showWithA:(<span class="keyword">int</span>) a andB:(<span class="keyword">int</span>) b&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>main.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="comment">// [] 调用方法</span></span><br><span class="line">        People *p1 = [[People alloc] init];</span><br><span class="line"><span class="comment">//        NSLog(@"return value %d", [p1 report]);</span></span><br><span class="line"><span class="comment">//        [People report1];</span></span><br><span class="line">        <span class="keyword">int</span> a1 = [p1 showWithA:<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"a1 = %d"</span>, a1);</span><br><span class="line">        <span class="keyword">int</span> a2 = [p1 showWithA:<span class="number">10</span> andB:<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"a2 = %d"</span>, a2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初始化函数">初始化函数<a href="post/iOS-Objective-C-Learn#初始化函数"></a></h2><blockquote><p>People.h</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">People</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line"><span class="comment">//- (id) init;//任意类型</span></span><br><span class="line"><span class="comment">//虽然上面的也可以但是推荐下面</span></span><br><span class="line">- (<span class="keyword">instancetype</span>) init; <span class="comment">// 当前类型，当前是People类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义初始化方法</span></span><br><span class="line">- (<span class="keyword">instancetype</span>) initPeople:(<span class="built_in">NSString</span> *) name age:(<span class="keyword">int</span>) age;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>People.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">People</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> _age;</span><br><span class="line">    <span class="keyword">int</span> _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重写初始化方法</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _age = <span class="number">23</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"age = %d"</span>, _age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initPeople:(<span class="built_in">NSString</span> *)name age:(<span class="keyword">int</span>)age</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _age = age;</span><br><span class="line">        _name = name;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"age = %d, name = %@"</span>, _age, name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>main.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"People.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        People *p1 = [[People alloc] init];</span><br><span class="line">        People * p2 = [[People alloc] initPeople:<span class="string">@"xu"</span> age:<span class="number">24</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = 23</span><br><span class="line">age = 24, name = xu</span><br></pre></td></tr></table></figure><h2 id="封装">封装<a href="post/iOS-Objective-C-Learn#封装"></a></h2><blockquote><p>访问修饰符</p></blockquote><div class="article-bounded"><div class="article-table"><table><thead><tr><th>声明</th><th>作用</th></tr></thead><tbody><tr><td><code>@public</code></td><td>公有的， 在类中和类外都可以使用并且可以被继承</td></tr><tr><td><code>@private</code></td><td>私有的，在类中可以使用，类外无法调用，不可以被继承</td></tr><tr><td><code>@protected</code></td><td>受保护的（默认），在类中可以使用，类外无法调用，但是可以被继承</td></tr><tr><td><code>@package</code></td><td>框架权限，在框架内相当于受保护，在框架外相当于私有</td></tr></tbody></table></div></div><blockquote><p>方法是没有访问修饰符的同c语言一样，如果不想让外部访问，去掉<code>.h</code>中的方法定义就可以了。</p></blockquote><blockquote><p>MyClass.h</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">@public</span></span><br><span class="line">    <span class="keyword">int</span> _classInt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> * className;</span><br><span class="line">-(<span class="keyword">void</span>) report;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>MyClass.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line">- (<span class="keyword">void</span>)report</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"class name = %@"</span>, _className);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"class name = %d"</span>, _classInt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>main.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        MyClass *c = [[MyClass alloc] init];</span><br><span class="line">        c.className = <span class="string">@"My Class"</span>;</span><br><span class="line">        <span class="comment">// 使用指向来调用类中的公有成员变量</span></span><br><span class="line">        c-&gt;_classInt = <span class="number">22</span>;</span><br><span class="line">        [c report];</span><br><span class="line">    &#125;ß</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承">继承<a href="post/iOS-Objective-C-Learn#继承"></a></h2><blockquote><p>interface 时候 冒号 代表继承</p></blockquote><blockquote><p>父类</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> _claseInt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> * name;</span><br><span class="line">- (<span class="keyword">void</span>) report;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line">- (<span class="keyword">void</span>)report</span><br><span class="line">&#123;</span><br><span class="line">    _claseInt = <span class="number">23</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"name = %@, value = %d"</span>, _name, _claseInt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>子类</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></span><br><span class="line"><span class="comment">// interface 时候 冒号 代表继承</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MySubClass</span> : <span class="title">MyClass</span></span></span><br><span class="line">-(<span class="keyword">void</span>) show;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"MySubClass.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MySubClass</span></span></span><br><span class="line">- (<span class="keyword">void</span>)show</span><br><span class="line">&#123;</span><br><span class="line">    _claseInt = <span class="number">100</span>;</span><br><span class="line">    [<span class="keyword">self</span> report];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>main.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"MyClass.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"MySubClass.h"</span></span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        MyClass *c = [[MyClass alloc] init];</span><br><span class="line">        c.name = <span class="string">@"xu"</span>;</span><br><span class="line">        [c report];</span><br><span class="line"></span><br><span class="line">        MySubClass *sc = [[MySubClass alloc] init];</span><br><span class="line">        sc.name = <span class="string">@"xu"</span>;</span><br><span class="line"><span class="comment">//        [sc report];</span></span><br><span class="line">        [sc show];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = xu, value = <span class="number">23</span></span><br><span class="line">name = xu, value = <span class="number">23</span></span><br></pre></td></tr></table></figure><h2 id="多态">多态<a href="post/iOS-Objective-C-Learn#多态"></a></h2><blockquote><p>父类<code>Printer.h</code>  <code>Printer.m</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Printer</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>) print;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"Printer.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Printer</span></span></span><br><span class="line">- (<span class="keyword">void</span>)print</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"我是一个打印机"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>子类<code>ColorPrinter.h</code>  <code>ColorPrinter.m</code></p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"Printer.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ColorPrinter</span> : <span class="title">Printer</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ColorPrinter.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ColorPrinter</span></span></span><br><span class="line">- (<span class="keyword">void</span>)print</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> print]; <span class="comment">// 子类中调用父类的方法</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"我是一个彩色打印机"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>main.m</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ColorPrinter.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        ColorPrinter *cp = [[ColorPrinter alloc] init];</span><br><span class="line">        [cp print];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父类可以引用子类型</span></span><br><span class="line">        Printer * p = [[ColorPrinter alloc] init];</span><br><span class="line">        [p print];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是一个打印机</span><br><span class="line">我是一个彩色打印机</span><br><span class="line">我是一个打印机</span><br><span class="line">我是一个彩色打印机</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;源代码文件扩展名对比&quot;&gt;源代码文件扩展名对比&lt;a href=&quot;post/iOS-Objective-C-Learn#源代码文件扩展名对比&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class=&quot;article-bounded&quot;&gt;&lt;div class=&quot;article-tabl
      
    
    </summary>
    
      <category term="iOS" scheme="https://blog.xujiaji.com/categories/iOS/"/>
    
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="iOS" scheme="https://blog.xujiaji.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://blog.xujiaji.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Git Commit Standard</title>
    <link href="https://blog.xujiaji.com/post/Git-Commit-Standard/index.html"/>
    <id>https://blog.xujiaji.com/post/Git-Commit-Standard/index.html</id>
    <published>2018-09-05T02:21:44.000Z</published>
    <updated>2019-04-08T06:55:24.990Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下Git的提交规范，方便以后查阅</p><a id="more"></a><h2 id="提交命令">提交命令<a href="post/Git-Commit-Standard#提交命令"></a></h2><ol><li><code>git commit -m &quot;提交修改信息&quot;</code>，这样这只能有一行信息</li><li><code>git commit</code>，会进入<code>vi</code>文本编辑器，可写多行。</li></ol><h2 id="提交信息的格式">提交信息的格式<a href="post/Git-Commit-Standard#提交信息的格式"></a></h2><blockquote><p>每次提交信息都包括三个部分：Header、Body和Footer。其中，Header 是必需的，Body 和 Footer 可以省略。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;body&gt;</span><br><span class="line">// 空一行</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><blockquote><p>文字描述</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 标题行：50个字符以内，描述主要变更内容</span><br><span class="line">#</span><br><span class="line"># 主体内容：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:</span><br><span class="line">#</span><br><span class="line"># * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等</span><br><span class="line"># * 他如何解决这个问题? 具体描述解决问题的步骤</span><br><span class="line"># * 是否存在副作用、风险?</span><br><span class="line">#</span><br><span class="line"># 尾部：如果需要的化可以添加一个链接到issue地址或者其它文档，或者关闭某个issue。</span><br></pre></td></tr></table></figure><h2 id="lt-type-gt">&lt;type&gt;<a href="post/Git-Commit-Standard#lt-type-gt"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">feat</td><td style="text-align:left">feature新功能</td></tr><tr><td style="text-align:left">fix</td><td style="text-align:left">修复bug</td></tr><tr><td style="text-align:left">doc</td><td style="text-align:left">仅仅修改了文档，比如README, CHANGELOG, CONTRIBUTE等等</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">代码格式改变，不改变代码逻辑</td></tr><tr><td style="text-align:left">refactor</td><td style="text-align:left">代码重构，没有加新功能或者修复bug</td></tr><tr><td style="text-align:left">perf</td><td style="text-align:left">优化相关，比如提升性能、体验</td></tr><tr><td style="text-align:left">test</td><td style="text-align:left">测试用例，包括单元测试、集成测试等</td></tr><tr><td style="text-align:left">chore</td><td style="text-align:left">改变构建流程、或者增加依赖库、工具等</td></tr><tr><td style="text-align:left">revert</td><td style="text-align:left">回滚到上一个版本</td></tr></tbody></table></div></div><h2 id="lt-scope-gt">&lt;scope&gt;<a href="post/Git-Commit-Standard#lt-scope-gt"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">Value</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">all</td><td style="text-align:left">表示影响面大 ，如修改了网络框架  会对真个程序产生影响</td></tr><tr><td style="text-align:left">loation</td><td style="text-align:left">表示影响小，某个小小的功能</td></tr><tr><td style="text-align:left">module</td><td style="text-align:left">表示会影响某个模块 如登录模块、首页模块 、用户管理模块等等</td></tr></tbody></table></div></div><h2 id="lt-subject-gt">&lt;subject&gt;<a href="post/Git-Commit-Standard#lt-subject-gt"></a></h2><ol><li>subject是 commit 目的的简短描述，不超过50个字符。</li><li>以动词开头，第一个字母小写，使用第一人称现在时，比如change，而不是changed或changes<br>第一个字母小写</li><li>结尾不加句号”.”</li></ol><h2 id="lt-body-gt">&lt;body&gt;<a href="post/Git-Commit-Standard#lt-body-gt"></a></h2><p>对本次 commit 的详细描述，可以分成多行。</p><h2 id="lt-footer-gt">&lt;footer&gt;<a href="post/Git-Commit-Standard#lt-footer-gt"></a></h2><ol><li><p>并联Issue，本次提交如果和摸个issue有关系则需要写上这个，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Issue #1, #2, #3</span><br></pre></td></tr></table></figure></li><li><p>关闭 Issue，如果当前提交信息解决了某个issue，那么可以在 Footer 部分关闭这个 issue，关闭的格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Close #1, #2, #3</span><br></pre></td></tr></table></figure></li></ol><h2 id="完整例子">完整例子<a href="post/Git-Commit-Standard#完整例子"></a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">feat(all): add login</span><br><span class="line"></span><br><span class="line">add login in project</span><br><span class="line"></span><br><span class="line">- qq login</span><br><span class="line">- weixin login</span><br><span class="line">- sina login</span><br><span class="line"></span><br><span class="line">Issue #1, #2</span><br><span class="line">Close #1, #2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下Git的提交规范，方便以后查阅&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://blog.xujiaji.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://blog.xujiaji.com/tags/Git/"/>
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS用UISegmentedControl设计一个顶部分页导航-Swift（翻译文）</title>
    <link href="https://blog.xujiaji.com/post/ios-uisegmented-design/index.html"/>
    <id>https://blog.xujiaji.com/post/ios-uisegmented-design/index.html</id>
    <published>2018-07-23T06:36:32.000Z</published>
    <updated>2019-04-08T06:55:47.295Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文：《<a href="https://www.codementor.io/kevinfarst/designing-a-button-bar-style-uisegmentedcontrol-in-swift-cg6cf0dok" target="_blank" rel="noopener">Designing a Button Bar-Style UISegmentedControl in Swift</a>》</p></blockquote><a id="more"></a><p>我正在做一个项目，项目里面我想用<code>UISegmentedControl</code>做一个简洁的“底部条形样式”的设计。它没有边框，所选下方有一个小长条，当你选择一个元素后他会相应的移动过去。我找到几个非常好的第三方库来处理这个问题，但是我在这些类库上遇到了一些麻烦，于是我尝试自己做。我以自动布局约束，以swift代码方式构建视图，并为了简单起见，将所有主题内联完成。</p><h2 id="准备开始">准备开始<a href="post/ios-uisegmented-design#准备开始"></a></h2><p>我们在Swift playground中做这些事情，因此让我们从基本的东西开始，创建一个新的UIView并且添加一个带有3个片段的UISegmentedControl，另外需要注意，我构建约束的方式是假设所有片段长度想等的情况。如果不是的话，会导致底部长条在相应的位置上变得太宽或不够宽。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="keyword">import</span> PlaygroundSupport</span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器View</span></span><br><span class="line"><span class="keyword">let</span> view = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">400</span>, height: <span class="number">100</span>))</span><br><span class="line">view.backgroundColor = .white</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> segmentedControl = <span class="type">UISegmentedControl</span>()</span><br><span class="line"><span class="comment">// 添加片段</span></span><br><span class="line">segmentedControl.insertSegment(withTitle: <span class="string">"One"</span>, at: <span class="number">0</span>, animated: <span class="literal">true</span>)</span><br><span class="line">segmentedControl.insertSegment(withTitle: <span class="string">"Two"</span>, at: <span class="number">1</span>, animated: <span class="literal">true</span>)</span><br><span class="line">segmentedControl.insertSegment(withTitle: <span class="string">"Three"</span>, at: <span class="number">2</span>, animated: <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 让第一个片段默认选中</span></span><br><span class="line">segmentedControl.selectedSegmentIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置为false，我们才能使用自动布局约束</span></span><br><span class="line">segmentedControl.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加UISegmentedControl到容器View</span></span><br><span class="line">view.addSubview(segmentedControl)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约束到容器的顶部</span></span><br><span class="line">segmentedControl.topAnchor.constraint(equalTo: view.topAnchor).isActive = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 限制为容器view的宽度</span></span><br><span class="line">segmentedControl.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 设置高度</span></span><br><span class="line">segmentedControl.heightAnchor.constraint(equalToConstant: <span class="number">40</span>).isActive = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView = view</span><br></pre></td></tr></table></figure><p>此时实时窗口已经为我们展示了基本的<code>UISegmentedControl</code>。不要忘记将<code>isActive</code>属性附加到每个自动布局约束，其值为true，否则他们将不起作用。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-uisegmented-design/basic-uisegmentedcontrol.png" alt="Basic UISegmentedControl"></p><h2 id="颜色、字体和边框Oh-My！">颜色、字体和边框Oh My！<a href="post/ios-uisegmented-design#颜色、字体和边框Oh-My！"></a></h2><p>接下来，让我们删除掉<code>backgroundColor</code>和<code>tintColor</code>，删除后边框和已选择的片段背景颜色将会消失。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将下面的代码添加到 selectedSegmentIndex下面</span></span><br><span class="line">segmentedControl.backgroundColor = .clear</span><br><span class="line">segmentedControl.tintColor = .clear</span><br></pre></td></tr></table></figure></p><p>如果你看实时窗口，我们删除了<code>tintColor</code>后，<code>UISegmentedControl</code>已经消失，现在没有颜色了。要恢复标签，让我们更改所选片段和未选片段的字体、文本颜色和大小。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加这些代码到 segmentedControl.tintColor = .clear 后</span></span><br><span class="line">segmentedControl.setTitleTextAttributes([</span><br><span class="line">    <span class="type">NSAttributedStringKey</span>.font: <span class="type">UIFont</span>(name: <span class="string">"DINCondensed-Bold"</span>, size: <span class="number">18</span>)!,</span><br><span class="line">    <span class="type">NSAttributedStringKey</span>.foregroundColor: <span class="type">UIColor</span>.lightGray</span><br><span class="line">    ], <span class="keyword">for</span>: .normal)</span><br><span class="line"></span><br><span class="line">segmentedControl.setTitleTextAttributes([</span><br><span class="line">    <span class="type">NSAttributedStringKey</span>.font : <span class="type">UIFont</span>(name: <span class="string">"DINCondensed-Bold"</span>, size: <span class="number">18</span>)!,</span><br><span class="line">    <span class="type">NSAttributedStringKey</span>.foregroundColor: <span class="type">UIColor</span>.orange</span><br><span class="line">    ], <span class="keyword">for</span>: .selected)</span><br></pre></td></tr></table></figure></p><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-uisegmented-design/change-color-font.png" alt="change-color-font"><br>到这儿差不多了！现在我们必须在所选段下方添加一个长条栏。</p><h2 id="为选定片段底部添加长条">为选定片段底部添加长条<a href="post/ios-uisegmented-design#为选定片段底部添加长条"></a></h2><p>这个长条只是一个简单的UIView，然后将其<code>backgroundColor</code>与其所选片段字体的颜色相匹配。我们将选择的片段字体颜色和长条都设置为橙色。并且我们要为长条设置<code>translatesAutoresizingMaskIntoConstraints</code>为false。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buttonBar = <span class="type">UIView</span>()</span><br><span class="line"><span class="comment">// 设置为false，我们才能使用自动布局约束</span></span><br><span class="line">buttonBar.translatesAutoresizingMaskIntoConstraints = <span class="literal">false</span></span><br><span class="line">buttonBar.backgroundColor = <span class="type">UIColor</span>.orange</span><br></pre></td></tr></table></figure></p><p>接下来，将<code>buttonBar</code>作为子View添加到容器view中<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加到 view.addSubview(segmentedControl)之后</span></span><br><span class="line">view.addSubview(buttonBar)</span><br></pre></td></tr></table></figure></p><p>最终，我们需要给它个宽度、高度和位置，在<code>segmentedControl</code>之后添加这些约束<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约束它的顶部位置在片段的底部位置</span></span><br><span class="line">buttonBar.topAnchor.constraint(equalTo: segmentedControl.bottomAnchor).isActive = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 设置长条的高度</span></span><br><span class="line">buttonBar.heightAnchor.constraint(equalToConstant: <span class="number">5</span>).isActive = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 约束它的左侧和片段的左侧重合</span></span><br><span class="line">buttonBar.leftAnchor.constraint(equalTo: segmentedControl.leftAnchor).isActive = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 约束它的宽度 = 片段容器宽度 / 片段个数</span></span><br><span class="line">buttonBar.widthAnchor.constraint(equalTo: segmentedControl.widthAnchor, multiplier: <span class="number">1</span> / <span class="type">CGFloat</span>(segmentedControl.numberOfSegments)).isActive = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>正如最后那条注释所说，我们需要长条的宽度为<code>segmentedControl</code>的宽度除以片段个个数。这保证了长条宽度将与单个片段的宽度完全匹配，同样这里是假设所有的段都是想等的宽度。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-uisegmented-design/added-bar.png" alt="added-bar"><br>初始视图现在已完成！最后一步，我们需要让长条随所选的片段移动。</p><h2 id="长条栏动画">长条栏动画<a href="post/ios-uisegmented-design#长条栏动画"></a></h2><p>当所选片段发生改变时，<code>segmentedControl</code>需要调用一个函数来处理长条栏在x轴上的位置转换，使其跑到选择的片段下方。定义个<code>Responder</code>类，并添加方法，然后在<code>segmentedControl</code>变量上添加回调，<code>segmentedControl</code>的值改变时会触发。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在import声明下方</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Responder</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">segmentedControlValueChanged</span><span class="params">(<span class="number">_</span> sender: UISegmentedControl)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> responder = <span class="type">Responder</span>()</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 在PlaygroundPage.current.liveView = view声明的上方</span></span><br><span class="line">segmentedControl.addTarget(responder, action: #selector(responder.segmentedControlValueChanged(<span class="number">_</span>:)), <span class="keyword">for</span>: <span class="type">UIControlEvents</span>.valueChanged)</span><br></pre></td></tr></table></figure></p><p>一定要确保<code>sender</code>作为方法参数类型，因为我们需要在调用函数时访问它。最后让我们来完成最后一块拼图，<code>buttonBar</code>在x轴的移动，它将移动到被选中的片段下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">segmentedControlValueChanged</span><span class="params">(<span class="number">_</span> sender: UISegmentedControl)</span></span> &#123;</span><br><span class="line">  <span class="type">UIView</span>.animate(withDuration: <span class="number">0.3</span>) &#123;</span><br><span class="line">      buttonBar.frame.origin.x = (segmentedControl.frame.width / <span class="type">CGFloat</span>(segmentedControl.numberOfSegments)) * <span class="type">CGFloat</span>(segmentedControl.selectedSegmentIndex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>长条因该去的x轴位置 = (<code>segmentedControl</code>的宽度 / 片段个数) * 当前片段的下标</p><p>瞧瞧！我们的动画按钮栏出来了<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-uisegmented-design/display.gif" alt="finished"></p><h2 id="结论">结论<a href="post/ios-uisegmented-design#结论"></a></h2><p>我希望这篇文章所提供的信息，能作为你在看了许多类库或iOS应用后的一个DIY解决方案。你可以将这里的<code>UISegmentedControl</code>连接到<code>UIPageViewController</code>或<code>UIScrollView</code>作为分段内容直接移动的方式。你这可以在<a href="https://gist.github.com/kfarst/9f8a1eb59cce2004b15f0b682c92eeed" target="_blank" rel="noopener">这里</a>找到playgroud代码在Github Gist，祝您iOS开发顺利！</p><hr><blockquote><p>补充说明：下面链接到的是我在练习的时候写的代码，供参考！</p></blockquote><p><a href="https://github.com/xujiaji/Learn-iOS/blob/master/TabSegmentedControl.playground/Contents.swift" target="_blank" rel="noopener">https://github.com/xujiaji/Learn-iOS/blob/master/TabSegmentedControl.playground/Contents.swift</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文：《&lt;a href=&quot;https://www.codementor.io/kevinfarst/designing-a-button-bar-style-uisegmentedcontrol-in-swift-cg6cf0dok&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Designing a Button Bar-Style UISegmentedControl in Swift&lt;/a&gt;》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.xujiaji.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://blog.xujiaji.com/tags/iOS/"/>
    
      <category term="UI" scheme="https://blog.xujiaji.com/tags/UI/"/>
    
      <category term="Swift" scheme="https://blog.xujiaji.com/tags/Swift/"/>
    
      <category term="翻译" scheme="https://blog.xujiaji.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发-零碎笔记</title>
    <link href="https://blog.xujiaji.com/post/ios-study-note/index.html"/>
    <id>https://blog.xujiaji.com/post/ios-study-note/index.html</id>
    <published>2018-07-16T00:08:16.000Z</published>
    <updated>2019-04-08T06:55:42.227Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些iOS学习过程中的笔记<br><a id="more"></a></p><h1 id="iOS开发-零碎笔记">iOS开发-零碎笔记<a href="post/ios-study-note#iOS开发-零碎笔记"></a></h1><h2 id="创建项目目录结构">创建项目目录结构<a href="post/ios-study-note#创建项目目录结构"></a></h2><ol><li>AppDelegate.swift:生命周期及变量的定义</li><li>ViewController.swift: MVC的C</li><li>Assets.xcasset:放资源文件，如图片等</li><li>info.plist：配置文件</li><li>xxxTest: 单元测试</li><li>Products:生成的文件</li><li>Main.storyboard: 视图</li></ol><h2 id="快捷添加注释">快捷添加注释<a href="post/ios-study-note#快捷添加注释"></a></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option + command + /</span><br></pre></td></tr></table></figure><h2 id="关闭软键盘">关闭软键盘<a href="post/ios-study-note#关闭软键盘"></a></h2><blockquote><p>关闭代码</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textField.resignFirstResponder()</span><br></pre></td></tr></table></figure><blockquote><p>关闭方式1：<br>在Controller中重写touchesEnded()方法，然后在这里面关闭软件盘，意思是点击空白处关闭</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesEnded</span><span class="params">(<span class="number">_</span> touches: Set&lt;UITouch&gt;, with event: UIEvent?)</span></span> &#123;</span><br><span class="line">    name.resignFirstResponder()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关闭方式2：<br>点击下一步时，关闭软键盘；<br>Controller实现UITextFieldDelegate协议；<br>实现UITextFieldDelegate协议中的textFieldShouldReturn方法；</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textFieldShouldReturn</span><span class="params">(<span class="number">_</span> textField: UITextField)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    textField.resignFirstResponder()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIDatePicker选择时间后计算年龄">UIDatePicker选择时间后计算年龄<a href="post/ios-study-note#UIDatePicker选择时间后计算年龄"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calAge</span><span class="params">(by datePicker: UIDatePicker)</span></span> -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">let</span> gregorian = <span class="type">NSCalendar</span>(calendarIdentifier: .gregorian)</span><br><span class="line">    <span class="keyword">let</span> now = <span class="type">Date</span>()</span><br><span class="line">    <span class="keyword">let</span> components = gregorian?.components(<span class="type">NSCalendar</span>.<span class="type">Unit</span>.year, from: datePicker.date, to: now, options: <span class="type">NSCalendar</span>.<span class="type">Options</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> components?.year</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面跳转，传递数据">页面跳转，传递数据<a href="post/ios-study-note#页面跳转，传递数据"></a></h2><p>有两个Controller：ViewController和GalleryViewController。从ViewController跳转到GalleryViewController。<br>ViewController重写方法：prepare，该方法在页面跳转时会被调用，我们需要在里面判断是跳转到哪个页面。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">(<span class="keyword">for</span> segue: UIStoryboardSegue, sender: <span class="keyword">Any</span>?)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 需要给Segue取名</span></span><br><span class="line">    <span class="keyword">if</span> segue.identifier == <span class="string">"GoToGallery"</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = beautyPicker.selectedRow(inComponent: <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">var</span> imageName: <span class="type">String</span>?</span><br><span class="line">        <span class="keyword">switch</span> index &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            imageName = <span class="string">"fangbingbing"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            imageName = <span class="string">"libingbing"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            imageName = <span class="string">"wangfei"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            imageName = <span class="string">"yangmi"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            imageName = <span class="string">"zhouxu"</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            imageName = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到下一个页面的Controller</span></span><br><span class="line">        <span class="keyword">let</span> vc = segue.destination <span class="keyword">as</span>! <span class="type">GalleryViewController</span></span><br><span class="line">        vc.imageName = imageName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过图片文件名设置图片">通过图片文件名设置图片<a href="post/ios-study-note#通过图片文件名设置图片"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beautyImage.image = <span class="type">UIImage</span>(named: imageName)</span><br></pre></td></tr></table></figure><h2 id="unwind-segue关闭页面">unwind segue关闭页面<a href="post/ios-study-note#unwind-segue关闭页面"></a></h2><p>关闭页面后，Controller可以获得上个页面传回来的值<br>该方法写在前一个页面<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">closedPrePage</span><span class="params">(segue: UIStoryboardSegue)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"closed"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="TableView下移一个状态栏的高度解决">TableView下移一个状态栏的高度解决<a href="post/ios-study-note#TableView下移一个状态栏的高度解决"></a></h2><ol><li><p>方法一</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">11.0</span>, *) &#123;</span><br><span class="line">    tableView.contentInsetAdjustmentBehavior = .never</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二，内容上部分区域向上偏移一个状态栏的高度</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collectionView?.contentInset.top = -<span class="type">UIApplication</span>.shared.statusBarFrame.height</span><br></pre></td></tr></table></figure></li></ol><h2 id="TableView-添加刷新">TableView 添加刷新<a href="post/ios-study-note#TableView-添加刷新"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> refreshControl = <span class="type">UIRefreshControl</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化刷新</span></span><br><span class="line">refreshControl.backgroundColor = <span class="type">UIColor</span>.blue <span class="comment">//设置刷新的背景颜色</span></span><br><span class="line">refreshControl.attributedTitle = <span class="type">NSAttributedString</span>(string: <span class="string">"刷新一下：\(Data())"</span>, attributes: [<span class="type">NSAttributedStringKey</span>.foregroundColor: <span class="type">UIColor</span>.white]) <span class="comment">// 设置字体颜色</span></span><br><span class="line">refreshControl.tintColor = <span class="type">UIColor</span>.green <span class="comment">// 加载菊花颜色</span></span><br><span class="line">refreshControl.tintAdjustmentMode = .dimmed <span class="comment">// 色彩调整模式</span></span><br><span class="line">refreshControl.addTarget(<span class="keyword">self</span>, action: #selector(addcount), <span class="keyword">for</span>: .valueChanged) <span class="comment">//添加方法目标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加该刷新</span></span><br><span class="line">tableView.refreshControl = refreshControl</span><br></pre></td></tr></table></figure><p>刷新方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">addcount</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dataArrary.append(contentsOf: dataArrary)</span><br><span class="line">    tableView.reloadData()</span><br><span class="line">    refreshControl.endRefreshing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向项目添加字体">向项目添加字体<a href="post/ios-study-note#向项目添加字体"></a></h2><p><a href="https://developer.apple.com/documentation/uikit/text_display_and_fonts/adding_a_custom_font_to_your_app" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/text_display_and_fonts/adding_a_custom_font_to_your_app</a></p><p>由于iOS的用的字体名称并不是文件名称，而是字体本身名称。<br>下面代码搜索所有字体，然后我们在控制台，找到多出来的名称。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> family: <span class="type">String</span> <span class="keyword">in</span> <span class="type">UIFont</span>.familyNames</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(family)"</span>)</span><br><span class="line">    <span class="keyword">for</span> names: <span class="type">String</span> <span class="keyword">in</span> <span class="type">UIFont</span>.fontNames(forFamilyName: family)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"== \(names)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置tabbar-字体和字体大小">设置tabbar 字体和字体大小<a href="post/ios-study-note#设置tabbar-字体和字体大小"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    <span class="keyword">let</span> appearance = <span class="type">UITabBarItem</span>.appearance()</span><br><span class="line">    appearance.setTitleTextAttributes([<span class="type">NSAttributedStringKey</span>.font: <span class="type">UIFont</span>(name: <span class="string">"Ubuntu-Light"</span>, size: <span class="number">9</span>)!], <span class="keyword">for</span>: .normal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIButton-相关">UIButton 相关<a href="post/ios-study-note#UIButton-相关"></a></h2><h3 id="UIButton-isEnabled-false后图片按钮的背景图片被改变">UIButton.isEnabled = false后图片按钮的背景图片被改变<a href="post/ios-study-note#UIButton-isEnabled-false后图片按钮的背景图片被改变"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIButton</span>.adjustsImageWhenDisabled = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="扩展添加圆角、边框、边框颜色">扩展添加圆角、边框、边框颜色<a href="post/ios-study-note#扩展添加圆角、边框、边框颜色"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBDesignable</span> <span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> borderWidth: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            layer.borderWidth = newValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> layer.borderWidth</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> cornerRadius: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            layer.cornerRadius = newValue</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> layer.cornerRadius</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> borderColor: <span class="type">UIColor</span>? &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> uiColor = newValue <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">            layer.borderColor = uiColor.cgColor</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> color = layer.borderColor <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">UIColor</span>(cgColor: color)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展图片在上，文字在下">扩展图片在上，文字在下<a href="post/ios-study-note#扩展图片在上，文字在下"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIButton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">alignVertical</span><span class="params">(spacing: CGFloat = <span class="number">6.0</span>, imageBottom: CGFloat = <span class="number">0.0</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> imageSize = <span class="keyword">self</span>.imageView?.image?.size,</span><br><span class="line">            <span class="keyword">let</span> text = <span class="keyword">self</span>.titleLabel?.text,</span><br><span class="line">            <span class="keyword">let</span> font = <span class="keyword">self</span>.titleLabel?.font</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">self</span>.titleEdgeInsets = <span class="type">UIEdgeInsets</span>(top: <span class="number">0.0</span>, <span class="keyword">left</span>: -imageSize.width, bottom: -(imageSize.height + spacing), <span class="keyword">right</span>: <span class="number">0.0</span>)</span><br><span class="line">        <span class="keyword">let</span> labelString = <span class="type">NSString</span>(string: text)</span><br><span class="line">        <span class="keyword">let</span> titleSize = labelString.size(withAttributes: [<span class="type">NSAttributedStringKey</span>.font: font])</span><br><span class="line">        <span class="keyword">self</span>.imageEdgeInsets = <span class="type">UIEdgeInsets</span>(top: -(titleSize.height + spacing), <span class="keyword">left</span>: <span class="number">0.0</span>, bottom: imageBottom, <span class="keyword">right</span>: -titleSize.width)</span><br><span class="line">        <span class="keyword">let</span> edgeOffset = <span class="built_in">abs</span>(titleSize.height - imageSize.height) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">self</span>.contentEdgeInsets = <span class="type">UIEdgeInsets</span>(top: edgeOffset, <span class="keyword">left</span>: <span class="number">0.0</span>, bottom: edgeOffset, <span class="keyword">right</span>: <span class="number">0.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UITableView或UICollectionView被TabBar遮盖">UITableView或UICollectionView被TabBar遮盖<a href="post/ios-study-note#UITableView或UICollectionView被TabBar遮盖"></a></h2><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-note/note-screen1.png" alt="" data-zoomable=""></p></div><h2 id="UITableView调用reloadData导致移动到列表顶部失效">UITableView调用reloadData导致移动到列表顶部失效<a href="post/ios-study-note#UITableView调用reloadData导致移动到列表顶部失效"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">0</span>, animations: &#123;</span><br><span class="line">    <span class="keyword">self</span>.tableView.contentOffset = <span class="type">CGPoint</span>.zero</span><br><span class="line">&#125;, completion: &#123; <span class="number">_</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="NavigationBar导致CollectionViewCell或TableViewCell偏移">NavigationBar导致CollectionViewCell或TableViewCell偏移<a href="post/ios-study-note#NavigationBar导致CollectionViewCell或TableViewCell偏移"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.collectionView?.contentInsetAdjustmentBehavior = .automatic</span><br></pre></td></tr></table></figure><h2 id="获取app版本">获取app版本<a href="post/ios-study-note#获取app版本"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 获取版本名</span></span><br><span class="line"><span class="keyword">let</span> appVersion = <span class="type">Bundle</span>.main.infoDictionary![<span class="string">"CFBundleShortVersionString"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 获取版本号</span></span><br><span class="line"><span class="keyword">let</span> versionNumber = <span class="type">Bundle</span>.main.infoDictionary![<span class="string">"CFBundleVersion"</span>] <span class="keyword">as</span>? <span class="type">String</span></span><br></pre></td></tr></table></figure><h2 id="清理缓存">清理缓存<a href="post/ios-study-note#清理缓存"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clearCache</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出cache文件夹目录 缓存文件都在这个目录下</span></span><br><span class="line">    <span class="keyword">let</span> cachePath = <span class="type">NSSearchPathForDirectoriesInDomains</span>(<span class="type">FileManager</span>.<span class="type">SearchPathDirectory</span>.cachesDirectory, <span class="type">FileManager</span>.<span class="type">SearchPathDomainMask</span>.userDomainMask, <span class="literal">true</span>).first</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出文件夹下所有文件数组</span></span><br><span class="line">    <span class="keyword">let</span> fileArr = <span class="type">FileManager</span>.<span class="keyword">default</span>.subpaths(atPath: cachePath!)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历删除</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> fileArr! &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> path = cachePath?.appendingFormat(<span class="string">"/\(file)"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.fileExists(atPath: path!) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> <span class="type">FileManager</span>.<span class="keyword">default</span>.removeItem(atPath: path!)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打开网页本软件的appstore">打开网页本软件的appstore<a href="post/ios-study-note#打开网页本软件的appstore"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App Store URL.</span></span><br><span class="line"><span class="keyword">let</span> appStoreLink = <span class="string">"https://itunes.apple.com/cn/app/id1144351773?mt=8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* First create a URL, then check whether there is an installed app that can</span></span><br><span class="line"><span class="comment"> open it on the device. */</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: appStoreLink), <span class="type">UIApplication</span>.shared.canOpenURL(url) &#123;</span><br><span class="line">    <span class="comment">// Attempt to open the URL.</span></span><br><span class="line">    <span class="type">UIApplication</span>.shared.<span class="keyword">open</span>(url, options: [:], completionHandler: &#123;(success: <span class="type">Bool</span>) <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">if</span> success &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Launching \(url) was successful"</span>)</span><br><span class="line">        &#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置圆形展示图像">设置圆形展示图像<a href="post/ios-study-note#设置圆形展示图像"></a></h2><ol><li>设置<code>UIImageView</code>宽度和高度，假如设置为60*60</li><li>设置运行时属性，设置圆弧为30（正方形边长度一半）<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-note/20181102144521.png" alt=""></li><li>勾选<code>Clip to Bounds</code>，<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-note/20181102145029.png" alt=""></li></ol><h2 id="UIScrollView填充到顶部（去掉状态栏到空白间距）">UIScrollView填充到顶部（去掉状态栏到空白间距）<a href="post/ios-study-note#UIScrollView填充到顶部（去掉状态栏到空白间距）"></a></h2><ol><li><code>Content Insets</code> 选择<code>Never</code></li><li>去掉选中的<code>Safe Area Relative Margins</code><br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-note/20181225153159.png" alt=""></li></ol><h2 id="UIImage-高斯模糊扩展">UIImage 高斯模糊扩展<a href="post/ios-study-note#UIImage-高斯模糊扩展"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">blurred</span><span class="params">(radius: CGFloat)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ciContext = <span class="type">CIContext</span>(options: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> cgImage = cgImage <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> inputImage = <span class="type">CIImage</span>(cgImage: cgImage)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> ciFilter = <span class="type">CIFilter</span>(name: <span class="string">"CIGaussianBlur"</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        ciFilter.setValue(inputImage, forKey: kCIInputImageKey)</span><br><span class="line">        ciFilter.setValue(radius, forKey: <span class="string">"inputRadius"</span>)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> resultImage = ciFilter.value(forKey: kCIOutputImageKey) <span class="keyword">as</span>? <span class="type">CIImage</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> cgImage2 = ciContext.createCGImage(resultImage, from: inputImage.extent) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIImage</span>(cgImage: cgImage2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个UIImage-合并扩展">两个UIImage 合并扩展<a href="post/ios-study-note#两个UIImage-合并扩展"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">overlayWith</span><span class="params">(image: UIImage, posX: CGFloat, posY: CGFloat)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newWidth = size.width &lt; posX + image.size.width ? posX + image.size.width : size.width</span><br><span class="line">    <span class="keyword">let</span> newHeight = size.height &lt; posY + image.size.height ? posY + image.size.height : size.height</span><br><span class="line">    <span class="keyword">let</span> newSize = <span class="type">CGSize</span>(width: newWidth, height: newHeight)</span><br><span class="line"></span><br><span class="line">    <span class="type">UIGraphicsBeginImageContextWithOptions</span>(newSize, <span class="literal">false</span>, <span class="number">0.0</span>)</span><br><span class="line">    draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>.zero, size: size))</span><br><span class="line">    image.draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x: posX, y: posY), size: image.size))</span><br><span class="line">    <span class="keyword">let</span> newImage = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()!</span><br><span class="line">    <span class="type">UIGraphicsEndImageContext</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newImage</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SDWebImageView-下载图片">SDWebImageView 下载图片<a href="post/ios-study-note#SDWebImageView-下载图片"></a></h2><ol><li><p>方式一</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img.sd_setImage(with: <span class="type">URL</span>(string: <span class="string">"http://url"</span>),</span><br><span class="line">  placeholderImage: #imageLiteral(resourceName: <span class="string">"default_square"</span>)) &#123; image, error, cacheType, url <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式二</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SDWebImageDownloader</span></span><br><span class="line">  .shared()</span><br><span class="line">  .downloadImage(with: <span class="type">URL</span>(string: <span class="string">"http://url"</span>),</span><br><span class="line">    options: <span class="type">SDWebImageDownloaderOptions</span>.<span class="keyword">init</span>(rawValue: <span class="number">0</span>),</span><br><span class="line">    progress: <span class="literal">nil</span>,</span><br><span class="line">    completed: &#123; image, data, error, finished <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> finished &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="AVPlayerViewController-视频播放">AVPlayerViewController 视频播放<a href="post/ios-study-note#AVPlayerViewController-视频播放"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AVKit</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">playVideoByUrl</span><span class="params">(string: String)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> videoURL = <span class="type">URL</span>(string: string)</span><br><span class="line">    <span class="keyword">let</span> player = <span class="type">AVPlayer</span>(url: videoURL!)</span><br><span class="line">    <span class="keyword">let</span> playerViewController = <span class="type">AVPlayerViewController</span>()</span><br><span class="line">    playerViewController.player = player</span><br><span class="line">    <span class="keyword">self</span>.present(playerViewController, animated: <span class="literal">true</span>) &#123;</span><br><span class="line">        playerViewController.player!.play()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为UIImageView添加的点击手势无效">为UIImageView添加的点击手势无效<a href="post/ios-study-note#为UIImageView添加的点击手势无效"></a></h2><ol><li>勾选上<code>User Interaction Enabled</code><br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/ios-note/20181226174028.png" alt=""></li><li>代码中设置<code>uiimageview.userInteractionEnabled = true</code></li></ol><h2 id="PHAsset获取文件路径">PHAsset获取文件路径<a href="post/ios-study-note#PHAsset获取文件路径"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PHAsset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getURL</span><span class="params">(completionHandler : @escaping <span class="params">(<span class="params">(<span class="number">_</span> responseURL : URL?)</span></span></span></span> -&gt; <span class="type">Void</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.mediaType == .image &#123;</span><br><span class="line">            <span class="keyword">let</span> options: <span class="type">PHContentEditingInputRequestOptions</span> = <span class="type">PHContentEditingInputRequestOptions</span>()</span><br><span class="line">            options.canHandleAdjustmentData = &#123;(adjustmeta: <span class="type">PHAdjustmentData</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">self</span>.requestContentEditingInput(with: options, completionHandler: &#123;(contentEditingInput: <span class="type">PHContentEditingInput</span>?, info: [<span class="type">AnyHashable</span> : <span class="type">Any</span>]) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                completionHandler(contentEditingInput!.fullSizeImageURL <span class="keyword">as</span> <span class="type">URL</span>?)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">self</span>.mediaType == .video &#123;</span><br><span class="line">            <span class="keyword">let</span> options: <span class="type">PHVideoRequestOptions</span> = <span class="type">PHVideoRequestOptions</span>()</span><br><span class="line">            options.version = .original</span><br><span class="line">            <span class="type">PHImageManager</span>.<span class="keyword">default</span>().requestAVAsset(forVideo: <span class="keyword">self</span>, options: options, resultHandler: &#123;(asset: <span class="type">AVAsset</span>?, audioMix: <span class="type">AVAudioMix</span>?, info: [<span class="type">AnyHashable</span> : <span class="type">Any</span>]?) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> urlAsset = asset <span class="keyword">as</span>? <span class="type">AVURLAsset</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> localVideoUrl: <span class="type">URL</span> = urlAsset.url <span class="keyword">as</span> <span class="type">URL</span></span><br><span class="line">                    completionHandler(localVideoUrl)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    completionHandler(<span class="literal">nil</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIView-相关">UIView 相关<a href="post/ios-study-note#UIView-相关"></a></h2><h3 id="通过UIView获取父UIViewController">通过UIView获取父UIViewController<a href="post/ios-study-note#通过UIView获取父UIViewController"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> parentViewController: <span class="type">UIViewController</span>? &#123;</span><br><span class="line">        <span class="keyword">var</span> parentResponder: <span class="type">UIResponder</span>? = <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">while</span> parentResponder != <span class="literal">nil</span> &#123;</span><br><span class="line">            parentResponder = parentResponder!.next</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> viewController = parentResponder <span class="keyword">as</span>? <span class="type">UIViewController</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> viewController</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-相关">String 相关<a href="post/ios-study-note#String-相关"></a></h2><h3 id="html的字符串，将代码转成对应效果">html的字符串，将代码转成对应效果<a href="post/ios-study-note#html的字符串，将代码转成对应效果"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> htmlToAttributedString: <span class="type">NSAttributedString</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> data = data(using: .utf8) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="type">NSAttributedString</span>() &#125;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> <span class="type">NSAttributedString</span>(data: data, options: [.documentType: <span class="type">NSAttributedString</span>.<span class="type">DocumentType</span>.html, .characterEncoding:<span class="type">String</span>.<span class="type">Encoding</span>.utf8.rawValue], documentAttributes: <span class="literal">nil</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSAttributedString</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> htmlToString: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> htmlToAttributedString?.string ?? <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则表达式匹配">正则表达式匹配<a href="post/ios-study-note#正则表达式匹配"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 正则表达式匹配</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">matchingStrings</span><span class="params">(regex: String)</span></span> -&gt; [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> regex = <span class="keyword">try</span> <span class="type">NSRegularExpression</span>(pattern: regex)</span><br><span class="line">            <span class="keyword">let</span> results = regex.matches(<span class="keyword">in</span>: <span class="keyword">self</span>,</span><br><span class="line">                                        range: <span class="type">NSRange</span>(<span class="keyword">self</span>.startIndex..., <span class="keyword">in</span>: <span class="keyword">self</span>))</span><br><span class="line">            <span class="keyword">return</span> results.<span class="built_in">map</span> &#123;</span><br><span class="line">                <span class="type">String</span>(<span class="keyword">self</span>[<span class="type">Range</span>($<span class="number">0</span>.range, <span class="keyword">in</span>: <span class="keyword">self</span>)!])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"invalid regex: \(error.localizedDescription)"</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Data拼接数据">Data拼接数据<a href="post/ios-study-note#Data拼接数据"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> string: String, using encoding: String.Encoding = .utf8)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data = string.data(using: encoding) &#123;</span><br><span class="line">            append(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打乱数组顺序">打乱数组顺序<a href="post/ios-study-note#打乱数组顺序"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span></span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">randamArray</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">self</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;list.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> newIndex = <span class="type">Int</span>(arc4random_uniform(<span class="type">UInt32</span>(list.<span class="built_in">count</span>-index))) + index</span><br><span class="line">            <span class="keyword">if</span> index != newIndex &#123;</span><br><span class="line">                list.swapAt(index, newIndex)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span> = list</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIImage相关">UIImage相关<a href="post/ios-study-note#UIImage相关"></a></h2><h3 id="高斯模糊图片">高斯模糊图片<a href="post/ios-study-note#高斯模糊图片"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">blurred</span><span class="params">(radius: CGFloat)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ciContext = <span class="type">CIContext</span>(options: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> cgImage = cgImage <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> inputImage = <span class="type">CIImage</span>(cgImage: cgImage)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> ciFilter = <span class="type">CIFilter</span>(name: <span class="string">"CIGaussianBlur"</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        ciFilter.setValue(inputImage, forKey: kCIInputImageKey)</span><br><span class="line">        ciFilter.setValue(radius, forKey: <span class="string">"inputRadius"</span>)</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> resultImage = ciFilter.value(forKey: kCIOutputImageKey) <span class="keyword">as</span>? <span class="type">CIImage</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> cgImage2 = ciContext.createCGImage(resultImage, from: inputImage.extent) <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIImage</span>(cgImage: cgImage2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两张图片叠加成一张图片">两张图片叠加成一张图片<a href="post/ios-study-note#两张图片叠加成一张图片"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">overlayWith</span><span class="params">(image: UIImage, posX: CGFloat, posY: CGFloat)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> newWidth = size.width &lt; posX + image.size.width ? posX + image.size.width : size.width</span><br><span class="line">        <span class="keyword">let</span> newHeight = size.height &lt; posY + image.size.height ? posY + image.size.height : size.height</span><br><span class="line">        <span class="keyword">let</span> newSize = <span class="type">CGSize</span>(width: newWidth, height: newHeight)</span><br><span class="line"></span><br><span class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(newSize, <span class="literal">false</span>, <span class="number">0.0</span>)</span><br><span class="line">        draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>.zero, size: size))</span><br><span class="line">        image.draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x: posX, y: posY), size: image.size))</span><br><span class="line">        <span class="keyword">let</span> newImage = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()!</span><br><span class="line">        <span class="type">UIGraphicsEndImageContext</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newImage</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缩放图片">缩放图片<a href="post/ios-study-note#缩放图片"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scaled</span><span class="params">(withSize size: CGSize)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">false</span>, <span class="number">0.0</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123; <span class="type">UIGraphicsEndImageContext</span>() &#125;</span><br><span class="line">        draw(<span class="keyword">in</span>: <span class="type">CGRect</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>, width: size.width, height: size.height))</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>()!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Json相关">Json相关<a href="post/ios-study-note#Json相关"></a></h2><h3 id="Json编码">Json编码<a href="post/ios-study-note#Json编码"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">JSONEncoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 将实体类转换成Json数据</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJson</span>&lt;T: Encodable&gt;<span class="params">(<span class="number">_</span> entity: T)</span></span> -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> encodedData = <span class="keyword">try</span>? encode(entity) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">String</span>(data: encodedData, encoding: .utf8)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Json解码">Json解码<a href="post/ios-study-note#Json解码"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">JSONDecoder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">from</span>&lt;T: Decodable&gt;<span class="params">(<span class="number">_</span> type: T.<span class="keyword">Type</span>, json: String)</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">try</span> decode(type, from: json.data(using: .utf8)!)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求字段编码为字符串，形式如：key-value-amp-key-value-amp-key-value">请求字段编码为字符串，形式如：key=value&amp;key=value&amp;key=value<a href="post/ios-study-note#请求字段编码为字符串，形式如：key-value-amp-key-value-amp-key-value"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">percentEscaped</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span> &#123; (key, value) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> escapedKey = <span class="string">"\(key)"</span>.addingPercentEncoding(withAllowedCharacters: .urlQueryValueAllowed) ?? <span class="string">""</span></span><br><span class="line">            <span class="keyword">let</span> escapedValue = <span class="string">"\(value)"</span>.addingPercentEncoding(withAllowedCharacters: .urlQueryValueAllowed) ?? <span class="string">""</span></span><br><span class="line">            <span class="keyword">return</span> escapedKey + <span class="string">"="</span> + escapedValue</span><br><span class="line">            &#125;</span><br><span class="line">            .joined(separator: <span class="string">"&amp;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CharacterSet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> urlQueryValueAllowed: <span class="type">CharacterSet</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> generalDelimitersToEncode = <span class="string">":#[]@"</span> <span class="comment">// does not include "?" or "/" due to RFC 3986 - Section 3.4</span></span><br><span class="line">        <span class="keyword">let</span> subDelimitersToEncode = <span class="string">"!$&amp;'()*+,;="</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> allowed = <span class="type">CharacterSet</span>.urlQueryAllowed</span><br><span class="line">        allowed.remove(charactersIn: <span class="string">"\(generalDelimitersToEncode)\(subDelimitersToEncode)"</span>)</span><br><span class="line">        <span class="keyword">return</span> allowed</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIViewController-相关">UIViewController 相关<a href="post/ios-study-note#UIViewController-相关"></a></h2><h3 id="添加子UIViewController">添加子UIViewController<a href="post/ios-study-note#添加子UIViewController"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 添加子ViewController</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addSubController</span><span class="params">(child: UIViewController, to: UIView? = <span class="literal">nil</span>)</span></span> &#123;</span><br><span class="line">        addChildViewController(child)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> to = to &#123;</span><br><span class="line">            child.view.frame = to.frame</span><br><span class="line">            to.addSubview(child.view)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            child.view.frame = view.frame</span><br><span class="line">            view.addSubview(child.view)</span><br><span class="line">        &#125;</span><br><span class="line">        child.didMove(toParentViewController: <span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除子UIViewController">移除子UIViewController<a href="post/ios-study-note#移除子UIViewController"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 移除子ViewController</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">removeSubController</span><span class="params">(child: UIViewController)</span></span> &#123;</span><br><span class="line">        child.willMove(toParentViewController: <span class="literal">nil</span>)</span><br><span class="line">        child.removeFromParentViewController()</span><br><span class="line">        child.view.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭页面">关闭页面<a href="post/ios-study-note#关闭页面"></a></h3><h4 id="关闭当前页面">关闭当前页面<a href="post/ios-study-note#关闭当前页面"></a></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 关闭当前页面</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">closePage</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关闭所有页面，除开最下级的那个页面">关闭所有页面，除开最下级的那个页面<a href="post/ios-study-note#关闭所有页面，除开最下级的那个页面"></a></h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">closeAllPage</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//获取根VC</span></span><br><span class="line">        <span class="keyword">var</span> rootVC = <span class="keyword">self</span>.presentingViewController</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> parent = rootVC?.presentingViewController &#123;</span><br><span class="line">            rootVC = parent</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放所有下级视图</span></span><br><span class="line">        rootVC?.dismiss(animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示和关闭菊花等待加载">显示和关闭菊花等待加载<a href="post/ios-study-note#显示和关闭菊花等待加载"></a></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">displaySpinner</span>(<span class="title">onView</span> : <span class="title">UIView</span>) -&gt; <span class="title">UIView</span> </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> spinnerView = <span class="type">UIView</span>.<span class="keyword">init</span>(frame: onView.bounds)</span><br><span class="line">        spinnerView.backgroundColor = <span class="type">UIColor</span>.<span class="keyword">init</span>(red: <span class="number">0.5</span>, green: <span class="number">0.5</span>, blue: <span class="number">0.5</span>, alpha: <span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">let</span> ai = <span class="type">UIActivityIndicatorView</span>.<span class="keyword">init</span>(activityIndicatorStyle: .whiteLarge)</span><br><span class="line">        ai.startAnimating()</span><br><span class="line">        ai.center = spinnerView.center</span><br><span class="line"></span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            spinnerView.addSubview(ai)</span><br><span class="line">            onView.addSubview(spinnerView)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> spinnerView</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">removeSpinner</span>(<span class="title">spinner</span> :<span class="title">UIView</span>) </span>&#123;</span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            spinner.removeFromSuperview()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>显示</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sp = <span class="type">UIViewController</span>.displaySpinner(onView: <span class="keyword">self</span>.view)</span><br></pre></td></tr></table></figure><blockquote><p>关闭</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIViewController</span>.removeSpinner(spinner: sp)</span><br></pre></td></tr></table></figure><h2 id="IAP-内购">IAP 内购<a href="post/ios-study-note#IAP-内购"></a></h2><blockquote><p>使用</p></blockquote><ol><li>除代码外的内购准备工序已OK</li><li>获取产品数据：通过<code>IAPHelper.shared.fetchAvailableProducts</code>从苹果服务器获取所有传入的产品id的产品信息，传入的参数是产品的id字符串数组</li><li><p>支付：<code>IAPHelper.shared.purchase(id: id)</code>，id是产品id</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IAPHelper</span>.shared.purchase(id: selectItem!.product_id) &#123;alert, product, transaction <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">if</span> alert == .purchased &#123; <span class="comment">//购买成功</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> receiptUrl = <span class="type">Bundle</span>.main.appStoreReceiptURL, <span class="keyword">let</span> receiptData = <span class="type">NSData</span>(contentsOf: receiptUrl) &#123;</span><br><span class="line">          <span class="keyword">let</span> receiptString = receiptData.base64EncodedString(options: <span class="type">NSData</span>.<span class="type">Base64EncodingOptions</span>(rawValue: <span class="number">0</span>))</span><br><span class="line">          <span class="comment">// 对receiptString加密字符串进行验证</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> alert == .restored &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> alert == .purchasing &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>IAPHelper 代码</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> StoreKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IAPHelperAlertType</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> disabled</span><br><span class="line">    <span class="keyword">case</span> restored</span><br><span class="line">    <span class="keyword">case</span> purchased</span><br><span class="line">    <span class="keyword">case</span> purchasing</span><br><span class="line">    <span class="keyword">case</span> setProductIds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">message</span><span class="params">()</span></span> -&gt; <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .setProductIds: <span class="keyword">return</span> <span class="string">"未设置产品id，请调用 fetchAvailableProducts()"</span></span><br><span class="line">        <span class="keyword">case</span> .disabled: <span class="keyword">return</span> <span class="string">"购买已取消"</span></span><br><span class="line">        <span class="keyword">case</span> .restored: <span class="keyword">return</span> <span class="string">"您已成功恢复购买"</span></span><br><span class="line">        <span class="keyword">case</span> .purchased: <span class="keyword">return</span> <span class="string">"您已成功购买此商品"</span></span><br><span class="line">        <span class="keyword">case</span> .purchasing: <span class="keyword">return</span> <span class="string">"正在购买..."</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IAPHelper</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">IAPHelper</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> productID = <span class="string">""</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> productsRequest = <span class="type">SKProductsRequest</span>()</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> productDict = [<span class="type">String</span>:<span class="type">SKProduct</span>]()</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> fetchProductCompletion: (([<span class="type">SKProduct</span>])-&gt;<span class="type">Void</span>)?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> productToPurchase: <span class="type">SKProduct</span>?</span><br><span class="line">    <span class="keyword">var</span> purchaseProductCompletion: ((<span class="type">IAPHelperAlertType</span>, <span class="type">SKProduct</span>?, <span class="type">SKPaymentTransaction</span>?) -&gt; <span class="type">Void</span>)?</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - 购买产品</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canMakePurchases</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;  <span class="keyword">return</span> <span class="type">SKPaymentQueue</span>.canMakePayments()  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">purchase</span><span class="params">(id: String, completion: @escaping <span class="params">(<span class="params">(IAPHelperAlertType, SKProduct?, SKPaymentTransaction?)</span></span></span></span>-&gt;<span class="type">Void</span>)) &#123;</span><br><span class="line">        <span class="keyword">self</span>.purchaseProductCompletion = completion</span><br><span class="line">        <span class="keyword">self</span>.productToPurchase = productDict[id]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> product = <span class="keyword">self</span>.productToPurchase <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="type">IAPHelperAlertType</span>.setProductIds.message())</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="type">IAPHelperAlertType</span>.setProductIds.message())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.canMakePurchases() &#123;</span><br><span class="line">            <span class="keyword">let</span> payment = <span class="type">SKPayment</span>(product: product)</span><br><span class="line">            <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().add(<span class="keyword">self</span>)</span><br><span class="line">            <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().add(payment)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"采购产品: \(product.productIdentifier)"</span>)</span><br><span class="line">            productID = product.productIdentifier</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            completion(.disabled, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - 恢复购买</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">restorePurchase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().add(<span class="keyword">self</span>)</span><br><span class="line">        <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().restoreCompletedTransactions()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK: - 获取可用的iap产品</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fetchAvailableProducts</span><span class="params">(by ids: [String], completion: @escaping <span class="params">(<span class="params">([SKProduct])</span></span></span></span>-&gt;<span class="type">Void</span>))&#123;</span><br><span class="line">        <span class="keyword">self</span>.fetchProductCompletion = completion</span><br><span class="line">        <span class="comment">// 把您的IAP产品id放到这里面</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> !ids.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"没有设置产品id"</span>)</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="type">IAPHelperAlertType</span>.setProductIds.message())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        productsRequest = <span class="type">SKProductsRequest</span>(productIdentifiers: <span class="type">Set</span>(ids))</span><br><span class="line">        productsRequest.delegate = <span class="keyword">self</span></span><br><span class="line">        productsRequest.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">IAPHelper</span>: <span class="title">SKProductsRequestDelegate</span>, <span class="title">SKPaymentTransactionObserver</span></span>&#123;</span><br><span class="line">    <span class="comment">// MARK: - 请求IAP产品</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">productsRequest</span> <span class="params">(<span class="number">_</span> request:SKProductsRequest, didReceive response:SKProductsResponse)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.products.<span class="built_in">count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> product <span class="keyword">in</span> response.products &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"product.productIdentifier = \(product.productIdentifier)"</span>)</span><br><span class="line">                <span class="keyword">self</span>.productDict[product.productIdentifier] = product</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">self</span>.fetchProductCompletion?(response.products)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentQueueRestoreCompletedTransactionsFinished</span><span class="params">(<span class="number">_</span> queue: SKPaymentQueue)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.purchaseProductCompletion?(.restored, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MARK:- IAP付款队列</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentQueue</span><span class="params">(<span class="number">_</span> queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction])</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"调用了几次啊！！！"</span>)</span><br><span class="line">        <span class="keyword">for</span> transaction:<span class="type">AnyObject</span> <span class="keyword">in</span> transactions &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> trans = transaction <span class="keyword">as</span>? <span class="type">SKPaymentTransaction</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> trans.transactionState &#123;</span><br><span class="line">                <span class="keyword">case</span> .purchased:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"产品已购买"</span>)</span><br><span class="line">                    <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().finishTransaction(transaction <span class="keyword">as</span>! <span class="type">SKPaymentTransaction</span>)</span><br><span class="line">                    <span class="keyword">self</span>.purchaseProductCompletion?(.purchased, <span class="keyword">self</span>.productToPurchase, trans)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> .failed:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"产品购买失败\(trans.error.debugDescription)"</span>)</span><br><span class="line">                    <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().finishTransaction(transaction <span class="keyword">as</span>! <span class="type">SKPaymentTransaction</span>)</span><br><span class="line">                    <span class="keyword">self</span>.purchaseProductCompletion?(.disabled, <span class="keyword">self</span>.productToPurchase, trans)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> .purchasing:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"正在购买..."</span>)</span><br><span class="line">                    <span class="keyword">self</span>.purchaseProductCompletion?(.purchasing, <span class="keyword">self</span>.productToPurchase, trans)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> .restored:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">"产品已恢复购买"</span>)</span><br><span class="line">                    <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().finishTransaction(transaction <span class="keyword">as</span>! <span class="type">SKPaymentTransaction</span>)</span><br><span class="line">                    <span class="keyword">self</span>.purchaseProductCompletion?(.restored, <span class="keyword">self</span>.productToPurchase, trans)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些iOS学习过程中的笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://blog.xujiaji.com/categories/iOS/"/>
    
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="iOS" scheme="https://blog.xujiaji.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://blog.xujiaji.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift学习笔记</title>
    <link href="https://blog.xujiaji.com/post/swift-study-note/index.html"/>
    <id>https://blog.xujiaji.com/post/swift-study-note/index.html</id>
    <published>2018-07-09T13:21:34.000Z</published>
    <updated>2018-12-25T15:23:05.699Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些swift的基本特性，以便使用的时候方便查阅。<br><a id="more"></a></p><p>学习地址：<a href="https://www.imooc.com/t/108955" target="_blank" rel="noopener">https://www.imooc.com/t/108955</a></p><h2 id="元组">元组<a href="post/swift-study-note#元组"></a></h2><blockquote><p>定义：可放入各种类型数据，元组长度自由</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = (<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> httpResponse = (<span class="number">404</span>, <span class="string">"Not Found"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可先预定类型来定义</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point2: (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> httpResponse2: (<span class="type">Int</span>, <span class="type">String</span>) = (<span class="number">200</span>, <span class="string">"OK"</span>)</span><br><span class="line"><span class="keyword">let</span> point4: (x: <span class="type">Int</span>, y: <span class="type">Int</span>) = (<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p>取值</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"><span class="keyword">var</span> point = (<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span>(xx, yy) = point</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line">point.<span class="number">0</span></span><br><span class="line">point.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式</span></span><br><span class="line"><span class="keyword">let</span> point3 = (x: <span class="number">3</span>, y: <span class="number">2</span>)</span><br><span class="line">point3.x</span><br><span class="line">point3.y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四种方式（只取相关数据 是否登录）</span></span><br><span class="line"><span class="keyword">let</span> loginResult = (<span class="literal">true</span>, <span class="string">"xujiaji"</span>)</span><br><span class="line"><span class="keyword">let</span> (isLoginSuccess, <span class="number">_</span> ) = loginResult</span><br></pre></td></tr></table></figure><h2 id="print打印">print打印<a href="post/swift-study-note#print打印"></a></h2><blockquote><p>正常情况下</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"a message"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>拼接，（结果：1 2 3 4）</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>插值：在拼接的中间插入值，默认是空格</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果：1-2-3-4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, separator:<span class="string">"-"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>结尾：默认是回车“<code>\n</code>”</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果：1 -- 2 -- 3 -- 4:)hello</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, separator:<span class="string">" -- "</span>, terminator:<span class="string">":)"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>另一种拼接方式：<code>\()</code></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>, z = <span class="number">4</span></span><br><span class="line"><span class="comment">// 结果：2 * 4 = 8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\(y) * \(z) = \(y*z)"</span>)</span><br></pre></td></tr></table></figure><h2 id="if条件判断">if条件判断<a href="post/swift-study-note#if条件判断"></a></h2><blockquote><p>基本用法，条件必须是Bool类型，可写表达式，但结果必须是Bool</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imTrue:<span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> imFalse = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> imFalse &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I'm True"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I'm False"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>支持三目运算符</p></blockquote><h2 id="for循环">for循环<a href="post/swift-study-note#for循环"></a></h2><blockquote><p>基本用法</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从2打印到10</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">2</span>...<span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前闭后开，经常用于循环数组</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从0打印到9</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下划线忽略值</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>反向遍历</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果：从10打印到1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>...<span class="number">10</span>).reversed() &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>stride，<code>from</code>开始数，<code>to</code>结尾数（不包括结尾数），<code>through</code>结尾数（包括结尾数），<code>by</code>每次循环的跨度(可以是浮点数)</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果： 0 2 4 6 8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, to: <span class="number">10</span>, by: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：0 2 4 6 8 10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>, through: <span class="number">10</span>, by: <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：从10遍历到1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">10</span>, to: <span class="number">0</span>, by: -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while循环">while循环<a href="post/swift-study-note#while循环"></a></h2><blockquote><p>和java没什么区别，只是没有小括号</p></blockquote><blockquote><p>至少执行一次循环，相当于java中的do while</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">  语句</span><br><span class="line">&#125; <span class="keyword">while</span> 条件</span><br></pre></td></tr></table></figure><h2 id="switch">switch<a href="post/swift-study-note#switch"></a></h2><p><strong>1.</strong> 注意switch case中不用写<code>break</code>， <code>case</code>后可以匹配多个值逗号隔开<br><strong>2.</strong> 不可以穷举（是否知道所有可能性），必须加上<code>default:</code>如果没有语句可以用<code>break</code>显示跳出或<code>()</code>表示空语句<br><strong>3.</strong> 可以用字符串，浮点数，布尔等swift基础数据结构<br><strong>4.</strong> <code>case</code>后面可以跟区间，如 <code>1 ..&lt; 60</code><br><strong>5.</strong> <code>case</code>还可以对元组进行判断，并且元组可以通过<code>_</code>进行忽略；元组中还可以用区间，如<code>case (-2...2, -2...2):</code>；还可以和元组解包一起用，如<code>case (let x, let y):</code><br><strong>6.</strong> 语句结束后加上<code>fallthrough</code>关键字，可让条件向下判断<br><strong>7.</strong> <code>case</code>中用<code>where</code>可以加上条件判断进行限制<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point = (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">switch</span> point &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y) <span class="keyword">where</span> x == y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"It's on the line x == y!"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y) <span class="keyword">where</span> x == -y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"It's on the line x == -y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span>(x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"It's just an ordinary point."</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The point is (\(x), \(y)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>8.</strong> switch case还可以用if case 来简化代码<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">19</span></span><br><span class="line"><span class="keyword">switch</span> age &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>...<span class="number">19</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You're a teenage."</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You're not a teenage."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 if case 简化后</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="number">10</span>...<span class="number">19</span> = age &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You're a teenage."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以加上where条件判断，where可直接省略通过逗号隔开</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="number">10</span>...<span class="number">19</span> = age, age &gt;= <span class="number">18</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You're a teenage and in a college"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>9.</strong> <code>case</code>关键字还可以用于for<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">100</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用case来写</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">100</span> <span class="keyword">where</span> i%<span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="控制转移">控制转移<a href="post/swift-study-note#控制转移"></a></h2><blockquote><p>给循环起名字</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示如果得到结果，不仅break内部循环，也结束外部循环</span></span><br><span class="line">findAnswer: <span class="keyword">for</span> m <span class="keyword">in</span> <span class="number">1</span>...<span class="number">300</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="number">1</span>...<span class="number">300</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> m*m*m*m - n*n == <span class="number">15</span>*m*n &#123;</span><br><span class="line">            <span class="built_in">print</span>(m, n)</span><br><span class="line">            <span class="keyword">break</span> findAnswer</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="guard">guard<a href="post/swift-study-note#guard"></a></h2><blockquote><p>守卫，如果条件不成立，那么将会执行else</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fun</span><span class="params">(money:Int, price: Int, capacity:Int, volume: Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> money &gt;= price <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Not enough money"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">guard</span> capacity &gt;= volume <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Not enough capacity"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I can buy it"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串">字符串<a href="post/swift-study-note#字符串"></a></h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello, playground"</span></span><br></pre></td></tr></table></figure><p><strong>1.</strong> 判断是否为空<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyString = <span class="string">""</span></span><br><span class="line">emptyString.isEmpty</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 插值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"xujiaji"</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">24</span></span><br><span class="line"><span class="keyword">let</span> height = <span class="number">1.7</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">"My name is \(name). I'm \(age) years old. I'm \(height) meters tall."</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 循环字符串<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> str &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 声明字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mark: <span class="type">Character</span> = <span class="string">"!"</span></span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 拼接字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.append(mark)</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 字符串长度<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">count</span></span><br></pre></td></tr></table></figure></p><p><strong>7.</strong> 得到字符串开头下标： <code>str.startIndex</code> ；得到末尾下标：<code>str.endIndex</code><br><strong>8.</strong> 得到字符串前5个字符（<code>offsetBy</code>表示偏移量）<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[str.index(str.startIndex, offsetBy: <span class="number">5</span>)]</span><br></pre></td></tr></table></figure></p><p><strong>9.</strong> 得到字符串某下标的前一个字符或后一个字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> spaceIndex = str.index(str.startIndex, offsetBy: <span class="number">6</span>)</span><br><span class="line">str[str.index(before: spaceIndex)]</span><br><span class="line">str[str.index(after: spaceIndex)]</span><br></pre></td></tr></table></figure></p><p><strong>10.</strong> 得到开始到<code>spaceIndex</code>下标之间的字符串<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str[str.startIndex..&lt;spaceIndex]</span><br></pre></td></tr></table></figure></p><p><strong>11.</strong> 得到一个下标范围<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  range = startIndex..&lt;str.index(before: spaceIndex)</span><br></pre></td></tr></table></figure></p><p><strong>12.</strong> 将上面范围替换成Hi<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replaceSubrange(range, with: <span class="string">"Hi"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>13.</strong> 末尾插入问号<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.insert(<span class="string">"?"</span>, at: str.endIndex)</span><br></pre></td></tr></table></figure></p><p><strong>14.</strong> 移除对应下标的字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.remove(at: str.index(before: str.endIndex))</span><br></pre></td></tr></table></figure></p><p><strong>15.</strong> 移除某个下标范围字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.removeSubrange(str.index(str.endIndex, offsetBy:-<span class="number">2</span>)..&lt;str.endIndex)</span><br></pre></td></tr></table></figure></p><p><strong>16.</strong> 大小写转换<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转大写</span></span><br><span class="line">str.uppercased()</span><br><span class="line"><span class="comment">// 转小写</span></span><br><span class="line">str.lowercased()</span><br><span class="line"><span class="comment">// 首字大写</span></span><br><span class="line">str.capitalized</span><br></pre></td></tr></table></figure></p><p><strong>17.</strong> 是否包含<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否包含Hi</span></span><br><span class="line">str.<span class="built_in">contains</span>(<span class="string">"Hi"</span>)</span><br><span class="line"><span class="comment">// 前缀是否是Hi</span></span><br><span class="line">str.hasPrefix(<span class="string">"Hi"</span>)</span><br><span class="line"><span class="comment">// 后缀是否是!!</span></span><br><span class="line">str.hasSuffix(<span class="string">"!!"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>18.</strong> 格式化字符串<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结果： 0.33333...</span></span><br><span class="line"><span class="keyword">let</span> ss0 = <span class="string">"one third is \(1.0/3.0)"</span></span><br><span class="line"><span class="comment">// 结果： 0.33</span></span><br><span class="line"><span class="keyword">let</span> ss1 = <span class="type">String</span>(format: <span class="string">"one third is %.2f"</span>, <span class="number">1.0</span>/<span class="number">3.0</span>)</span><br><span class="line"><span class="comment">// 结果： 0.33</span></span><br><span class="line"><span class="keyword">let</span> ss2 = <span class="type">NSString</span>(format: <span class="string">"one third is %.2f"</span>, <span class="number">1.0</span>/<span class="number">3.0</span>) <span class="keyword">as</span> <span class="type">String</span></span><br></pre></td></tr></table></figure></p><p><strong>19.</strong> 字符串截取<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ss3:<span class="type">NSString</span> = <span class="string">"one third is 0.33"</span></span><br><span class="line"><span class="comment">// 从下标4开始截取到最后</span></span><br><span class="line">ss3.substring(from: <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 从开始截取到下标3</span></span><br><span class="line">ss3.substring(to: <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 截取下标从4开始，截取5个长度</span></span><br><span class="line">ss3.substring(with: <span class="type">NSMakeRange</span>(<span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></p><p><strong>20.</strong> String 和 NSString的区别</p><blockquote><p>有一个表情的时候String长度为1， NSString长度为2</p></blockquote><p><strong>21.</strong> 去除前后多余无效字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s6 = <span class="string">"   --- Hello -----    "</span> <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"><span class="comment">// 去除前后空格和下划线</span></span><br><span class="line">s6.trimmingCharacters(<span class="keyword">in</span>: <span class="type">CharacterSet</span>(charactersIn: <span class="string">" -"</span>))</span><br></pre></td></tr></table></figure></p><h2 id="Optional">Optional<a href="post/swift-study-note#Optional"></a></h2><p><strong>1.</strong> 定义可选型<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> errorCode: <span class="type">Int</span>? = <span class="number">404</span></span><br><span class="line">errorCode = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">var</span> imOptional: <span class="type">String</span>? = <span class="literal">nil</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 具体类型可以赋值给可选项型，但反过来可选型是不能赋值给具体类型的。<br><strong>3.</strong> 强制解包，但不能为<code>nil</code>否则会抛出异常<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> errorCode: <span class="type">Int</span>? = <span class="literal">nil</span></span><br><span class="line">errorCode = <span class="number">404</span></span><br><span class="line"><span class="comment">// errorCode! 强制解包</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"code"</span>, errorCode!)</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 加上<code>nil</code>判断<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">var</span> errorCode: <span class="type">String</span>? = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> errorCode != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="string">"The errorCode is "</span> + errorCode!</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="string">"No error"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法（简化），用两个问号</span></span><br><span class="line"><span class="string">"The errorCode is \(errorCode ?? "</span>no error<span class="string">")"</span></span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 可选型解包<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> errorCode: <span class="type">String</span>? = <span class="string">"404"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode &#123;</span><br><span class="line">    <span class="string">"The errorCode is "</span> + errorCode</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="string">"No error"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> errorMessage: <span class="type">String</span>? = <span class="string">"Not found"</span></span><br><span class="line"><span class="comment">// errorCode有值，并且errorMessage有值</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode, <span class="keyword">let</span> errorMessage = errorMessage &#123;</span><br><span class="line">    <span class="string">"The errorCode is "</span> + errorCode + <span class="string">"\nThe errorMessage is "</span> + errorMessage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// errorCode有值，并且errorMessage有值，并且errorCode等于404</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode, <span class="keyword">let</span> <span class="number">_</span> = errorMessage, errorCode == <span class="string">"404"</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Page not found"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 可选型调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> errorMessage: <span class="type">String</span>? = <span class="string">"Not Found"</span></span><br><span class="line"><span class="comment">// 普通判断调用</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorMessage = errorMessage &#123;</span><br><span class="line">    errorMessage.uppercased()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?. 方式调用，和上面效果是一样的</span></span><br><span class="line">errorMessage?.uppercased()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义不用写“? =”方式，可选型的调用的结果也是可选型的</span></span><br><span class="line"><span class="keyword">var</span> uppercaseErrorMessage = errorMessage?.uppercased()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以调用后，如果存在使用该对象</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorMessage = errorMessage?.uppercased() &#123;</span><br><span class="line">    errorMessage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 实际运用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ageInput: <span class="type">String</span> = <span class="string">"16"</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="type">Int</span>(ageInput) <span class="comment">// 返回的是：Int?</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> age = <span class="type">Int</span>(ageInput), age &lt; <span class="number">20</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You're a teenage"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>7.</strong> 隐式可选类型，运用在能肯定的表示有值的情况下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后面跟！表示是隐式可选类型</span></span><br><span class="line"><span class="keyword">var</span> errorMessage: <span class="type">String</span>! = <span class="literal">nil</span></span><br><span class="line">errorMessage = <span class="string">"Not Found"</span></span><br><span class="line"><span class="string">"The message is "</span> + errorMessage</span><br><span class="line"></span><br><span class="line">errorMessage = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 会抛出异常，所以隐式可选类型危险的</span></span><br><span class="line"><span class="comment">//"The message is " + errorMessage</span></span><br></pre></td></tr></table></figure></p><h2 id="Array">Array<a href="post/swift-study-note#Array"></a></h2><p><strong>1.</strong> 空数组的定义<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有数据时的定义， 注意类型必须统一</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> vowels = [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]</span><br><span class="line"><span class="comment">// 定义的时确定好类型</span></span><br><span class="line"><span class="comment">//var numbers: [Int] = [0,1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义空数组</span></span><br><span class="line"><span class="keyword">var</span> emptyArr1:[<span class="type">Int</span>] = []</span><br><span class="line"><span class="keyword">var</span> emptyArr2:<span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = []</span><br><span class="line"><span class="keyword">var</span> emptyArr3 = [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">var</span> emptyArr4 = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义时统一赋值</span></span><br><span class="line"><span class="keyword">var</span> allZeros = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;(repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">5</span>) <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="keyword">var</span> allZeros2 = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: <span class="number">5</span>) <span class="comment">// [0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 数组查询基本使用方式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> vowels = [<span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span>, <span class="string">"O"</span>, <span class="string">"U"</span>]</span><br><span class="line"><span class="keyword">var</span> emptyArr = [<span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line">vowels.<span class="built_in">count</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为空</span></span><br><span class="line">numbers.isEmpty <span class="comment">// false</span></span><br><span class="line">emptyArr.isEmpty <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取首元素或末元素</span></span><br><span class="line">vowels.first <span class="comment">// "A"</span></span><br><span class="line">vowels.last <span class="comment">// "U"</span></span><br><span class="line">emptyArr.first <span class="comment">// nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选型解包</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> firstVomel = vowels.first &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The first vowel is "</span> + firstVomel)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制解包，由自己保证安全</span></span><br><span class="line">vowels.first!</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组的最大值或最小值</span></span><br><span class="line">numbers.<span class="built_in">min</span>()</span><br><span class="line">numbers.<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从原数组中取出子数组</span></span><br><span class="line">numbers[<span class="number">2</span>..&lt;<span class="number">4</span>] <span class="comment">// [3, 4]</span></span><br><span class="line">numbers[<span class="number">2</span>..&lt;numbers.<span class="built_in">count</span>] <span class="comment">// [3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含</span></span><br><span class="line">vowels.<span class="built_in">contains</span>(<span class="string">"A"</span>) <span class="comment">// true</span></span><br><span class="line">vowels.<span class="built_in">contains</span>(<span class="string">"B"</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取下标</span></span><br><span class="line">vowels.index(of: <span class="string">"E"</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> index = vowels.index(of: <span class="string">"E"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"E is vowel in position \(index+1)."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"E is not a vowel."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过下标遍历</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;numbers.<span class="built_in">count</span> &#123;</span><br><span class="line">    numbers[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接遍历元素</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时遍历下标和元素</span></span><br><span class="line"><span class="keyword">for</span> (i, vowel) <span class="keyword">in</span> vowels.enumerated() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(i + 1): \(vowel)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较，与java不同，swift比较的是元素</span></span><br><span class="line"><span class="keyword">var</span> oneToFive = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">numbers == oneToFive <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于比较数组时与元素的顺序有关，所以下方结果为false</span></span><br><span class="line"><span class="keyword">var</span> oneToFive2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">numbers == oneToFive2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 数组插入值的基本操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> courses = [<span class="string">"A course"</span>, <span class="string">"B course"</span>, <span class="string">"C course"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">courses.append(<span class="string">"D course"</span>) <span class="comment">//["A course", "B course", "C course", "D course"]</span></span><br><span class="line"></span><br><span class="line">courses += [<span class="string">"E course"</span>] <span class="comment">//["A course", "B course", "C course", "D course", "E course"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据位置插入元素</span></span><br><span class="line">courses.insert(<span class="string">"a course"</span>, at: <span class="number">1</span>) <span class="comment">//["A course", "a course", "B course", "C course", "D course", "E course"]</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 数组删除元素的基本操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> courses = [<span class="string">"A course"</span>, <span class="string">"B course"</span>, <span class="string">"C course"</span>, <span class="string">"D course"</span>]</span><br><span class="line"><span class="comment">// 删除最后一个元素</span></span><br><span class="line">courses.removeLast() <span class="comment">//"D course"</span></span><br><span class="line"><span class="comment">// 删除第一个元素</span></span><br><span class="line">courses.removeFirst() <span class="comment">//"A course"</span></span><br><span class="line">courses <span class="comment">// ["B course", "C course"]</span></span><br><span class="line"><span class="comment">// 从下标0开始删除1个</span></span><br><span class="line">courses.removeSubrange(<span class="number">0</span>..&lt;<span class="number">1</span>) <span class="comment">//["C course"]</span></span><br><span class="line"><span class="comment">// 删除所有元素</span></span><br><span class="line">courses.removeAll()</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 修改元素的基本操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> courses = [<span class="string">"A course"</span>, <span class="string">"B course"</span>, <span class="string">"C course"</span>, <span class="string">"D course"</span>]</span><br><span class="line"><span class="comment">// 修改下标为0的元素</span></span><br><span class="line">courses[<span class="number">0</span>] = <span class="string">"1 course"</span></span><br><span class="line">courses <span class="comment">// ["1 course", "B course", "C course", "D course"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改下标1到2的元素</span></span><br><span class="line">courses[<span class="number">1</span>...<span class="number">2</span>] = [<span class="string">"2 course"</span>, <span class="string">"3 course"</span>]</span><br><span class="line">courses <span class="comment">// ["1 course", "2 course", "3 course", "D course"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并并修改0到2的元素</span></span><br><span class="line">courses[<span class="number">0</span>...<span class="number">2</span>] = [<span class="string">"A course"</span>]</span><br><span class="line">courses <span class="comment">// ["A course", "D course"]</span></span><br></pre></td></tr></table></figure></p><h2 id="NSArray">NSArray<a href="post/swift-study-note#NSArray"></a></h2><p><strong>1.</strong> NSArray是一个类，Array是一个结构<br><strong>2.</strong> NSArray里可以放不同类型的元素，如：<code>var arr: NSArray = [1, &quot;Hello&quot;, 3.0]</code></p><h2 id="Dict">Dict<a href="post/swift-study-note#Dict"></a></h2><p><strong>1.</strong> 字典的初始化和查询的基本使用方式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个有数据的字典</span></span><br><span class="line"><span class="keyword">var</span> dict = [<span class="string">"swift"</span>: <span class="string">"雨燕；快速"</span>, <span class="string">"python"</span>: <span class="string">"大蟒"</span>, <span class="string">"java"</span>:<span class="string">"爪哇岛"</span>, <span class="string">"groovy"</span>: <span class="string">"绝妙的；时髦的"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空字典</span></span><br><span class="line"><span class="keyword">var</span> emptyDict1: [<span class="type">String</span>:<span class="type">Int</span>] = [:]</span><br><span class="line"><span class="keyword">var</span> emptyDict2: <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">String</span>&gt; = [:]</span><br><span class="line"><span class="keyword">var</span> emptyDict3 = [<span class="type">String</span>:<span class="type">String</span>]()</span><br><span class="line"><span class="keyword">var</span> emptyDict4 = <span class="type">Dictionary</span>&lt;<span class="type">Int</span>, <span class="type">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过key获取字典数据</span></span><br><span class="line">dict[<span class="string">"swift"</span>] <span class="comment">// "雨燕；快速"</span></span><br><span class="line">dict[<span class="string">"C++"</span>] <span class="comment">// nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选型解包</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> value = dict[<span class="string">"swift"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"swift 的意思是：\(value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字典数据的数量</span></span><br><span class="line">dict.<span class="built_in">count</span> <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">dict.isEmpty <span class="comment">// false</span></span><br><span class="line">emptyDict1.isEmpty <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历所有key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict.keys &#123;</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有value</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> dict.values &#123;</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历key和value</span></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> dict &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(key): \(value)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个字典对比：比较的key和对应的value，由于字典是无序的，因此下方等式也成立</span></span><br><span class="line"><span class="keyword">let</span> dict1 = [<span class="number">1</span>: <span class="string">"A"</span>, <span class="number">2</span>: <span class="string">"B"</span>, <span class="number">3</span>: <span class="string">"C"</span>]</span><br><span class="line"><span class="keyword">let</span> dict2 = [<span class="number">1</span>: <span class="string">"A"</span>, <span class="number">3</span>: <span class="string">"C"</span>, <span class="number">2</span>: <span class="string">"B"</span>]</span><br><span class="line">dict1 == dict2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 字典的修改和删除<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let的字典不可修改</span></span><br><span class="line"><span class="keyword">var</span> user = [<span class="string">"name"</span>: <span class="string">"xujiaji"</span>, <span class="string">"password"</span>: <span class="string">"123456"</span>, <span class="string">"occupation"</span>: <span class="string">"programmer"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改值</span></span><br><span class="line">user[<span class="string">"occupation"</span>] = <span class="string">"freelancer"</span></span><br><span class="line"><span class="comment">// 调用方法修改值会返回之前的值</span></span><br><span class="line">user.updateValue(<span class="string">"abcdefg"</span>, forKey: <span class="string">"password"</span>) <span class="comment">// "123456"</span></span><br><span class="line">user <span class="comment">//["name": "xujiaji", "password": "abcdefg", "occupation": "freelancer"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> oldPassword = user.updateValue(<span class="string">"abcdefg"</span>, forKey: <span class="string">"password"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> oldPassword = oldPassword, <span class="keyword">let</span> newPassword = user[<span class="string">"password"</span>], oldPassword == newPassword &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"注意：修改后的密码和之前的一样，可能导致安全问题"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接添加新的key和value</span></span><br><span class="line">user[<span class="string">"email"</span>] = <span class="string">"jiajixu@qq.com"</span></span><br><span class="line">user <span class="comment">// ["name": "xujiaji", "occupation": "freelancer", "email": "jiajixu@qq.com", "password": "abcdefg"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过方法添加新的key和value</span></span><br><span class="line">user.updateValue(<span class="string">"https://blog.xujiaji.com"</span>, forKey: <span class="string">"website"</span>) <span class="comment">// nil</span></span><br><span class="line">user <span class="comment">// ["name": "xujiaji", "occupation": "freelancer", "email": "jiajixu@qq.com", "password": "abcdefg", "website": "https://blog.xujiaji.com"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除key和value</span></span><br><span class="line">user[<span class="string">"website"</span>] = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用方法删除key和value</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> email = user.removeValue(forKey: <span class="string">"email"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"电子邮箱\(email)删除成功"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除所有数据</span></span><br><span class="line">user.removeAll()</span><br></pre></td></tr></table></figure></p><h2 id="Set">Set<a href="post/swift-study-note#Set"></a></h2><p><strong>1.</strong> 初始化和基本使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个有数据的Set集合，和数组定义方式差不多，但是加上了类型申明</span></span><br><span class="line"><span class="keyword">var</span> skillsOfA: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"swift"</span>, <span class="string">"OC"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空Set集合</span></span><br><span class="line"><span class="keyword">var</span> emptySet1: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = []</span><br><span class="line"><span class="keyword">var</span> emptySet2 = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//集合是无序的，并且没有重复</span></span><br><span class="line"><span class="keyword">var</span> vowels = <span class="type">Set</span>([<span class="string">"A"</span>, <span class="string">"E"</span>, <span class="string">"I"</span>, <span class="string">"O"</span>, <span class="string">"U"</span>, <span class="string">"U"</span>]) <span class="comment">//&#123;"O", "A", "I", "U", "E"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> skillsOfB: <span class="type">Set</span> = [<span class="string">"HTML"</span>, <span class="string">"CSS"</span>, <span class="string">"JavaScript"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合元素个数</span></span><br><span class="line">skillsOfA.<span class="built_in">count</span> <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span>: <span class="type">Set</span> = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">set</span>.<span class="built_in">count</span> <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合是否为空</span></span><br><span class="line">skillsOfB.isEmpty <span class="comment">// false</span></span><br><span class="line">emptySet1.isEmpty <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速获取集合中的第一个元素</span></span><br><span class="line">skillsOfA.first <span class="comment">// "swift"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含</span></span><br><span class="line">skillsOfA.<span class="built_in">contains</span>(<span class="string">"swift"</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> skillsOfB &#123;</span><br><span class="line">    <span class="built_in">print</span>(skill)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较的值，和顺序无关</span></span><br><span class="line"><span class="keyword">let</span> setA: <span class="type">Set</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> setB: <span class="type">Set</span> = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">setA == setB <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 元素的插入和删除<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> skillsOfA: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"swift"</span>, <span class="string">"OC"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfB: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"HTML"</span>, <span class="string">"CSS"</span>, <span class="string">"Javacript"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfC: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">skillsOfC.insert(<span class="string">"swift"</span>)</span><br><span class="line">skillsOfC.insert(<span class="string">"HTML"</span>)</span><br><span class="line">skillsOfC.insert(<span class="string">"CSS"</span>)</span><br><span class="line">skillsOfC <span class="comment">//&#123;"swift", "CSS", "HTML"&#125;</span></span><br><span class="line"><span class="comment">// 重复添加</span></span><br><span class="line">skillsOfC.insert(<span class="string">"CSS"</span>)</span><br><span class="line">skillsOfC <span class="comment">//&#123;"swift", "CSS", "HTML"&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">skillsOfC.remove(<span class="string">"CSS"</span>)</span><br><span class="line">skillsOfC <span class="comment">//&#123;"swift", "HTML"&#125;</span></span><br><span class="line"><span class="comment">// 删除没有的元素</span></span><br><span class="line">skillsOfC.remove(<span class="string">"Javascript"</span>) <span class="comment">//nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="number">_</span> = skillsOfC.remove(<span class="string">"HTML"</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"HTML is removed"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 集合之间的操作：并集、交集、减集、异或<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> skillsOfA: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"swift"</span>, <span class="string">"OC"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfB: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"HTML"</span>, <span class="string">"CSS"</span>, <span class="string">"Javacript"</span>, <span class="string">"Java"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfC: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"swift"</span>, <span class="string">"Java"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line">skillsOfA.union(skillsOfC) <span class="comment">//&#123;"swift", "OC", "Java"&#125;</span></span><br><span class="line">skillsOfA <span class="comment">//&#123;"swift", "OC"&#125;</span></span><br><span class="line"><span class="comment">// 并集操作后改变skillsOfA的值</span></span><br><span class="line">skillsOfA.formUnion(skillsOfC) <span class="comment">//&#123;"swift", "OC", "Java"&#125;</span></span><br><span class="line">skillsOfA <span class="comment">//&#123;"swift", "OC", "Java"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line">skillsOfB.intersection(skillsOfC) <span class="comment">// &#123;"Java"&#125;</span></span><br><span class="line">skillsOfB <span class="comment">// &#123;"Java", "HTML", "CSS", "Javacript"&#125;</span></span><br><span class="line">skillsOfB.formIntersection(skillsOfC) <span class="comment">// &#123;"Java"&#125;</span></span><br><span class="line">skillsOfB <span class="comment">// &#123;"Java"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 减集</span></span><br><span class="line">skillsOfA.subtracting(skillsOfC)</span><br><span class="line">skillsOfA <span class="comment">// &#123;"swift", "OC", "Java"&#125;</span></span><br><span class="line">skillsOfA.subtract(skillsOfC)</span><br><span class="line">skillsOfA <span class="comment">// &#123;"OC"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异或</span></span><br><span class="line">skillsOfA.symmetricDifference(skillsOfC)</span><br><span class="line">skillsOfA <span class="comment">// &#123;"OC"&#125;</span></span><br><span class="line">skillsOfA.formSymmetricDifference(skillsOfC)</span><br><span class="line">skillsOfA <span class="comment">// &#123;"OC", "swift", "Java"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可操作数组</span></span><br><span class="line">skillsOfA.union([<span class="string">"Java"</span>, <span class="string">"Android"</span>])</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 集合中的子集，超集合相离的判断<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> skillsOfA: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"swift"</span>, <span class="string">"OC"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfB: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"HTML"</span>, <span class="string">"CSS"</span>, <span class="string">"Javacript"</span>, <span class="string">"Java"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfC: <span class="type">Set</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"swift"</span>, <span class="string">"Java"</span>]</span><br><span class="line"><span class="keyword">var</span> skillsOfD: <span class="type">Set</span> = [<span class="string">"swift"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否是子集（D是否包含A）</span></span><br><span class="line">skillsOfD.isSubset(of: skillsOfA) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 是否是真子集 （D是否包含A，并且D != A）</span></span><br><span class="line">skillsOfD.isStrictSubset(of: skillsOfA) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否是超集（与子集相反）</span></span><br><span class="line">skillsOfA.isSuperset(of: skillsOfD) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 是否是真超集</span></span><br><span class="line">skillsOfA.isStrictSuperset(of: skillsOfD) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断相离(两集合没有共有元素)</span></span><br><span class="line">skillsOfA.isDisjoint(with: skillsOfB) <span class="comment">// true</span></span><br><span class="line">skillsOfA.isDisjoint(with: skillsOfC) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h2 id="Function">Function<a href="post/swift-study-note#Function"></a></h2><h3 id="参数部分">参数部分<a href="post/swift-study-note#参数部分"></a></h3><p><strong>1.</strong> 方法的基本定义<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  函数的基本构建</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHelloTo</span><span class="params">(name: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">sayHelloTo(name: <span class="string">"xujiaji"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过添加下划线，调用的时候可以省略参数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHelloTo</span><span class="params">(<span class="number">_</span> name: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello "</span> + name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHelloTo(<span class="string">"xujiaji"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数中包含可选型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHelloTo</span><span class="params">(name: String?)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello "</span> + (name ?? <span class="string">"Guest"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nickname: <span class="type">String</span>? = <span class="literal">nil</span></span><br><span class="line">sayHelloTo(name: nickname)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数与没有返回值的参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printHello</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示的说明没有返回值</span></span><br><span class="line"><span class="comment">//func printHello() -&gt; () &#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">// Void = ()</span></span><br><span class="line"><span class="comment">//func printHello() -&gt; Void &#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 写一个得到数组中最大和最小值的方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxAndMin</span><span class="params">(numbers: [Int])</span></span> -&gt; (<span class="built_in">max</span>: <span class="type">Int</span>, <span class="built_in">min</span>: <span class="type">Int</span>)? &#123;</span><br><span class="line">    <span class="keyword">guard</span> !numbers.isEmpty <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> minValue = numbers[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">var</span> maxValue = numbers[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        minValue = <span class="built_in">min</span>(minValue, number)</span><br><span class="line">        maxValue = <span class="built_in">max</span>(maxValue, number)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (maxValue, minValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scores: [<span class="type">Int</span>]? = [<span class="number">202</span>, <span class="number">1234</span>, <span class="number">5678</span>, <span class="number">334</span>, <span class="number">982</span>, <span class="number">555</span>]</span><br><span class="line">scores = scores ?? []</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> result = findMaxAndMin(numbers: scores!) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The max value is \(result.max)"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The min value is \(result.min)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 方法的外部参数名和内部参数名<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般写法，内部参数名同时也是外部参数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHelloTo</span><span class="params">(name: String, greeting: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(greeting), \(name)"</span></span><br><span class="line">&#125;</span><br><span class="line">sayHelloTo(name: <span class="string">"Playground"</span>, greeting: <span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为参数提供外部参数名，让语义更加的明确</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(to name: String, withGreetingWord greeting: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(greeting), \(name)"</span></span><br><span class="line">&#125;</span><br><span class="line">sayHello(to: <span class="string">"Playground"</span>, withGreetingWord: <span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个计算乘法的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mutiply</span><span class="params">(num1: Int, x num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br><span class="line">mutiply(num1: <span class="number">4</span>, x: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下方乘法虽语义明确但是，确显得复杂，直接传入两个值会更加得当。于是我们可以通过下划线忽略参数名</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mutiply</span><span class="params">(<span class="number">_</span> num1: Int, <span class="number">_</span> num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br><span class="line">mutiply(<span class="number">4</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 默认参数和可变参数<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认参数的使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(to name: String = <span class="string">"Playground"</span>, withGreetingWord greeting: String = <span class="string">"Hello"</span>, punctuation: String = <span class="string">"!"</span>)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(greeting), \(name)\(punctuation)"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHello() <span class="comment">// "Hello, Playground!"</span></span><br><span class="line">sayHello(to: <span class="string">"Bob"</span>) <span class="comment">// "Hello, Bob!"</span></span><br><span class="line">sayHello(to: <span class="string">"Bob"</span>, withGreetingWord: <span class="string">"Bye"</span>) <span class="comment">//"Bye, Bob!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数的使用</span></span><br><span class="line"><span class="comment">// 计算平局值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mean</span><span class="params">(<span class="number">_</span> numbers: Double ... )</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum: <span class="type">Double</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        sum += number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / <span class="type">Double</span>(numbers.<span class="built_in">count</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mean(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.4</span>, <span class="number">7.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// print是一个非常好的有默认参数和可变参数的函数，可变参数不一定放在最后</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, separator: <span class="string">","</span>, terminator: <span class="string">"."</span>) <span class="comment">// "Hello,1,2,3."</span></span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 常量参数、变量参数<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数默认都是不可变的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">toBinary</span><span class="params">(<span class="number">_</span> num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="comment">// 让传入的参数num称为可变参数</span></span><br><span class="line">    <span class="keyword">var</span> num = num</span><br><span class="line">    <span class="keyword">var</span> res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">repeat</span> &#123;</span><br><span class="line">        res = <span class="type">String</span>(num%<span class="number">2</span>) + res</span><br><span class="line">        num /= <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">while</span> num != <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toBinary(<span class="number">12</span>) <span class="comment">// "1100"</span></span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> inout<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 参数是值传递，不能延续到函数体外面</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span></span><br><span class="line">toBinary(x)</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要延续到外面</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoInt</span><span class="params">(a: <span class="keyword">inout</span> Int, b: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line"><span class="comment">//    let t: Int = a</span></span><br><span class="line"><span class="comment">//    a = b</span></span><br><span class="line"><span class="comment">//    b = t</span></span><br><span class="line"><span class="comment">// 通过元组可直接交换值</span></span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入a和b的引用</span></span><br><span class="line">swapTwoInt(a: &amp;a, b: &amp;b)</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="comment">// swift提供的交换方法</span></span><br><span class="line"><span class="built_in">swap</span>(&amp;a, &amp;b)</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure></p><h3 id="类型部分">类型部分<a href="post/swift-study-note#类型部分"></a></h3><p><strong>1.</strong> 函数类型的基本概念<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法也可以赋值</span></span><br><span class="line"><span class="keyword">let</span> anotherAdd = add</span><br><span class="line"><span class="comment">// 也可以声明类型</span></span><br><span class="line"><span class="comment">// let anotherAdd: (Int,Int)-&gt;Int = add</span></span><br><span class="line">anotherAdd(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(to name: String)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, \(name)!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherSayHello1 = sayHello</span><br><span class="line"><span class="keyword">let</span> anotherSayHello2: (<span class="type">String</span>) -&gt; () = sayHello</span><br><span class="line"><span class="keyword">let</span> anotherSayHello3: (<span class="type">String</span>) -&gt; <span class="type">Void</span> = sayHello</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 如何使用函数类型？<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr: [<span class="type">Int</span>] = []</span><br><span class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">100</span> &#123;</span><br><span class="line">    arr.append(<span class="type">Int</span>(arc4random() % <span class="number">1000</span>))</span><br><span class="line">&#125;</span><br><span class="line">arr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认排序</span></span><br><span class="line">arr.<span class="built_in">sort</span>()</span><br><span class="line">arr</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在排序中使用函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">biggerNumberFirst</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 排序使用我们自己定义的规则</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: biggerNumberFirst)</span><br><span class="line">arr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmpByNumberString</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>(a) &lt; <span class="type">String</span>(b)</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="built_in">sort</span>(by: cmpByNumberString)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">near500</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a - <span class="number">500</span>) &lt; <span class="built_in">abs</span>(b - <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回排序结果，排序不会影响arr的顺序</span></span><br><span class="line">arr.sorted(by: near500)</span><br><span class="line">arr</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 定义函数类型参数<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeScores</span><span class="params">(<span class="number">_</span> scores: <span class="keyword">inout</span> [Int], by changeScore: <span class="params">(Int)</span></span></span>-&gt;<span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i, score) <span class="keyword">in</span> scores.enumerated() &#123;</span><br><span class="line">        <span class="comment">// 不需要知道方法的具体定义</span></span><br><span class="line">        scores[i] = changeScore(score)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change1</span><span class="params">(score: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>(sqrt(<span class="type">Double</span>(score)) * <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change2</span><span class="params">(score: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> score + <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scores1 = [<span class="number">36</span>, <span class="number">61</span>, <span class="number">78</span>, <span class="number">89</span>, <span class="number">99</span>]</span><br><span class="line">changeScores(&amp;scores1, by: change1) <span class="comment">// [60, 78, 88, 94, 99]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> scores2 = [<span class="number">88</span>, <span class="number">101</span>, <span class="number">124</span>, <span class="number">137</span>, <span class="number">150</span>]</span><br><span class="line">changeScores(&amp;scores2, by: change2) <span class="comment">// [91, 104, 127, 140, 153]</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 高阶函数map、filter、reduce<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">65</span>, <span class="number">91</span>, <span class="number">45</span>, <span class="number">89</span>, <span class="number">99</span>]</span><br><span class="line"><span class="comment">// map</span></span><br><span class="line">numbers.<span class="built_in">map</span>(change) <span class="comment">//[67, 93, 47, 91, 101]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPassOrFail</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num &lt; <span class="number">60</span> ? <span class="string">"Fail"</span> : <span class="string">"Pass"</span></span><br><span class="line">&#125;</span><br><span class="line">numbers.<span class="built_in">map</span>(isPassOrFail) <span class="comment">//["Pass", "Pass", "Fail", "Pass", "Pass"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fail</span><span class="params">(num: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num &lt; <span class="number">60</span></span><br><span class="line">&#125;</span><br><span class="line">numbers.<span class="built_in">filter</span>(fail) <span class="comment">//[45]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(num1: Int, num2: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line">numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, add) <span class="comment">//389</span></span><br><span class="line">numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, +) <span class="comment">//389</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">concatenate</span><span class="params">(str: String, num: Int)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str + <span class="type">String</span>(num) + <span class="string">" "</span></span><br><span class="line">&#125;</span><br><span class="line">numbers.<span class="built_in">reduce</span>(<span class="string">""</span>, concatenate) <span class="comment">//"65 91 45 89 99 "</span></span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 函数作为函数的返回类型<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tier1MailFee</span><span class="params">(weight: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> * weight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tier2MailFee</span><span class="params">(weight: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * weight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">feeByUnitPrice</span><span class="params">(price: Int, weight: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// 函数作为函数的返回类型</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chooseMailFee</span><span class="params">(by weight: Int)</span></span> -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight &lt;= <span class="number">10</span> ? tier1MailFee : tier2MailFee</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mailFeeByWeight = chooseMailFee(by: weight)</span><br><span class="line">    <span class="keyword">return</span> mailFeeByWeight(weight) + price * weight</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">feeByUnitPrice(price: <span class="number">50</span>, weight: <span class="number">8</span>)</span><br></pre></td></tr></table></figure></p><h2 id="闭包">闭包<a href="post/swift-study-note#闭包"></a></h2><p><strong>1.</strong> 基本使用方式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bigger</span><span class="params">(a: Int, b: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="built_in">sort</span>(by: bigger) <span class="comment">// [8, 5, 4, 3, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包的写法</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a &gt;  b</span><br><span class="line">&#125;) <span class="comment">// [8, 5, 4, 3, 2]</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 上面的代码可简写<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果闭包只有一行代码，可放在同一行</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &#123; (a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> a &gt; b &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于自动会得到参数和返回值类型， 可这样写</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &#123; a, b <span class="keyword">in</span> <span class="keyword">return</span> a &gt; b&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于知道需要return，可简写为</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &#123; a, b <span class="keyword">in</span> a &gt; b&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于参数是一个元组，元组有标识，可简写为</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于“&gt;”本身就是一个函数</span></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &gt;)</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 结尾闭包的使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">arr.<span class="built_in">sort</span>(by: &#123; a, b <span class="keyword">in</span> <span class="keyword">return</span> a &gt; b &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果函数参数在最后，我们可以是使用结尾闭包</span></span><br><span class="line">arr.<span class="built_in">sort</span>() &#123; a, b <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有其他参数，可将小括号夜省略了</span></span><br><span class="line">arr.<span class="built_in">sort</span> &#123; a, b <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组中的十进制数字全部改为二进制</span></span><br><span class="line">arr.<span class="built_in">map</span>&#123; number -&gt; <span class="type">String</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 将number的不可变改为可变</span></span><br><span class="line">    <span class="keyword">var</span> number = number</span><br><span class="line">    <span class="keyword">var</span> res = <span class="string">""</span></span><br><span class="line">    <span class="keyword">repeat</span> &#123;</span><br><span class="line">        res = <span class="type">String</span>(number % <span class="number">2</span>) + res</span><br><span class="line">        number /= <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">while</span> number != <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 尾闭包在IOS动画中的运用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> showView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">300</span>, height: <span class="number">300</span>))</span><br><span class="line"><span class="keyword">let</span> rectangle = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">50</span>, height: <span class="number">50</span>))</span><br><span class="line">rectangle.center = showView.center</span><br><span class="line">rectangle.backgroundColor = <span class="type">UIColor</span>.red</span><br><span class="line">showView.addSubview(rectangle)</span><br><span class="line"></span><br><span class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">2.0</span>) &#123;</span><br><span class="line">    rectangle.backgroundColor = <span class="type">UIColor</span>.blue</span><br><span class="line">    rectangle.frame = showView.frame</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PlaygroundSupport</span><br><span class="line"><span class="type">PlaygroundPage</span>.current.liveView = showView</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 闭包，内容捕获<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值捕获</span></span><br><span class="line"><span class="comment">// 申明变量</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">300</span></span><br><span class="line">arr.<span class="built_in">sort</span>&#123; a , b <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">abs</span>(a-num) &lt; <span class="built_in">abs</span>(b-num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 闭包和函数是引用类型<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runningMetersWithMetersPerDay</span><span class="params">(<span class="number">_</span> metersPerDay: Int)</span></span> -&gt; () -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> totalMeters = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        totalMeters += metersPerDay</span><br><span class="line">        <span class="keyword">return</span> totalMeters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> planA = runningMetersWithMetersPerDay(<span class="number">2000</span>)</span><br><span class="line"><span class="comment">// 注意每次都不是从0开始相加，因为返回的是闭包的引用</span></span><br><span class="line">planA() <span class="comment">//2000</span></span><br><span class="line">planA() <span class="comment">//4000</span></span><br><span class="line">planA() <span class="comment">//6000</span></span><br></pre></td></tr></table></figure></p><h2 id="enum">enum<a href="post/swift-study-note#enum"></a></h2><p><strong>1.</strong> 枚举的基本使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义枚举类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">January</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">February</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">March</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">April</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">May</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">June</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">July</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">August</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">September</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">October</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">November</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">December</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义枚举也可以写成一行</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Spring</span>, <span class="type">Summer</span>, <span class="type">Autumn</span>, <span class="type">Winter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果确定了枚举类型，则可以省略枚举名字，如：Month.March 写成 .March</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">season</span><span class="params">(month: Month)</span></span> -&gt; <span class="type">Season</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> month &#123;</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">March</span>, .<span class="type">April</span>, .<span class="type">May</span>:</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Spring</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="type">June</span>, .<span class="type">July</span>, .<span class="type">August</span>:</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Summer</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="type">September</span>, .<span class="type">October</span>, .<span class="type">November</span>:</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Autumn</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="type">December</span>, .<span class="type">January</span>, .<span class="type">February</span>:</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Spring</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">season(month: <span class="type">Month</span>.<span class="type">April</span>) <span class="comment">//Spring</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 枚举的原始值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enum Month: Int 表名Month的原始值是int类型的，并且原始值会自动递增</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Month</span>: <span class="title">Int</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">January</span> = <span class="number">1</span>, <span class="type">Febuary</span>, <span class="type">March</span>, <span class="type">April</span>, <span class="type">May</span>, <span class="type">June</span>, <span class="type">July</span>, <span class="type">August</span>, <span class="type">September</span>, <span class="type">October</span>, <span class="type">November</span>, <span class="type">December</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回距离新的一年还有多少个月，rawValue得到原始值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">monthBeforeNewYear</span><span class="params">(month: Month)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span> - month.rawValue</span><br><span class="line">&#125; <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过原始值获取到对应的枚举值</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> theMonth = <span class="type">Month</span>(rawValue: <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(monthBeforeNewYear(month: theMonth)) months before New Year!"</span>) <span class="comment">//4 months before New Year!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// raw value为整型的枚举类型，如果不显示给出整型值，则从0开始</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Grade</span>: <span class="title">Int</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">F</span>,<span class="type">E</span>,<span class="type">D</span>,<span class="type">C</span>,<span class="type">B</span>,<span class="type">A</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举类型的raw value值不一定是顺序的</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span>: <span class="title">Int</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Penny</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Nickel</span> = <span class="number">5</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Dime</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Quarter</span> = <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> coin: <span class="type">Coin</span> = .<span class="type">Quarter</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"It's \(coin.rawValue) cents"</span>) <span class="comment">//It's 25 cents</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用String作为raw value，如果我们没有确定原始值，那么swift会自动以枚举值的名字作为原始值</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ProgrammingLanguage2</span>: <span class="title">String</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Swift</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">ObjectiveC</span> = <span class="string">"Objective-C"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">C</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Java</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myFavoriteLanguage2: <span class="type">ProgrammingLanguage2</span> = .<span class="type">Swift</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">"\(myFavoriteLanguage2.rawValue) is my favorite language."</span>) <span class="comment">//Swift is my favorite language.</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 并联值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Associate Value 和 Raw value 只能存在一个</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ATMStatus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Success</span>(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Error</span>(<span class="type">String</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Waiting</span> <span class="comment">// 也可以没有Associate Value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 余额</span></span><br><span class="line"><span class="keyword">var</span> balance = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取ATMStatus</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">withdraw</span><span class="params">(amount: Int)</span></span> -&gt; <span class="type">ATMStatus</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> balance &gt;= amount &#123;</span><br><span class="line">        balance -= amount</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Success</span>(balance)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Error</span>(<span class="string">"Not enough money"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解包相应的 Associate Value，也可忽略，就像.Waiting那样就行了</span></span><br><span class="line"><span class="keyword">switch</span> withdraw(amount: <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Success</span>(newBlance):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(newBlance) Yuan left in your account"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Error</span>(errorMesssage):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Error:\(errorMesssage)"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Waiting</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Waiting for processing"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 有多个并联值的情况<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Associate value其实只有一个，其实下面表示的是一个元组，并且为元组类型取了个名字</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Square</span>(side: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Rectangle</span>(width: <span class="type">Double</span>, height: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Circle</span>(centerx: <span class="type">Double</span>, centery: <span class="type">Double</span>, radius: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Point</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一些图形</span></span><br><span class="line"><span class="keyword">let</span> square = <span class="type">Shape</span>.<span class="type">Square</span>(side: <span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> rectangle = <span class="type">Shape</span>.<span class="type">Rectangle</span>(width: <span class="number">20</span>, height: <span class="number">30</span>)</span><br><span class="line"><span class="keyword">let</span> circle = <span class="type">Shape</span>.<span class="type">Circle</span>(centerx: <span class="number">0</span>, centery: <span class="number">0</span>, radius: <span class="number">15</span>)</span><br><span class="line"><span class="keyword">let</span> point = <span class="type">Shape</span>.<span class="type">Point</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算表面积</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">area</span><span class="params">(shape: Shape)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> shape &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Square</span>(side):</span><br><span class="line">        <span class="keyword">return</span> side * side</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Rectangle</span>(width, height):</span><br><span class="line">        <span class="keyword">return</span> width * height</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Circle</span>(<span class="number">_</span>, <span class="number">_</span>, r): <span class="comment">// 通过下划线忽略不用的参数</span></span><br><span class="line">        <span class="keyword">return</span> .pi * r * r</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Point</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得出表面积的结果</span></span><br><span class="line">area(shape: square)</span><br><span class="line">area(shape: rectangle)</span><br><span class="line">area(shape: circle)</span><br><span class="line">area(shape: point)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====================================================================</span></span><br><span class="line"><span class="comment">// enum可以有方法</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Square</span>(side: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Rectangle</span>(width: <span class="type">Double</span>, height: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Circle</span>(centerx: <span class="type">Double</span>, centery: <span class="type">Double</span>, radius: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Point</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">area</span><span class="params">()</span></span> -&gt; <span class="type">Double</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Square</span>(side):</span><br><span class="line">            <span class="keyword">return</span> side*side</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Rectangle</span>( width , height ):</span><br><span class="line">            <span class="keyword">return</span> width * height</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Circle</span>( <span class="number">_</span> , <span class="number">_</span> , r ):</span><br><span class="line">            <span class="comment">//swift 2: return M_PI*r*r</span></span><br><span class="line">            <span class="comment">//swift3中PI放在了Double类下。这样是不是更方便记忆？</span></span><br><span class="line">            <span class="keyword">return</span> .pi*r*r      <span class="comment">//swift 3</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Point</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">let</span> square = <span class="type">Shape</span>.<span class="type">Square</span>(side: <span class="number">10</span>)</span><br><span class="line">square.area()</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 可选型实际上是枚举类型<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age: <span class="type">Int</span>? = <span class="number">17</span></span><br><span class="line"><span class="built_in">print</span>(age!)</span><br><span class="line">age = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 可以看到可选类型可以通过枚举的方式赋值</span></span><br><span class="line">age = .some(<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> website: <span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="type">Optional</span>.some(<span class="string">"blog.xujiaji.com"</span>)</span><br><span class="line">website = .<span class="keyword">none</span> <span class="comment">// nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以enum的角度来进行解包</span></span><br><span class="line"><span class="keyword">switch</span> website &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="keyword">none</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No website"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .some(website):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The website is \(website)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以Optional的方式解包</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> website = website &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The website is \(website)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No website"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 枚举的递归调用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举递归，使用indirect关键字。也可以直接加在enum关键字后面（如：enum indirect ArithmeticExpression），此时case关键字前面就不必加了</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Number</span>(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> <span class="type">Addition</span>(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> <span class="type">Multiplication</span>(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 (5 + 4) * 2</span></span><br><span class="line"><span class="keyword">let</span> five = <span class="type">ArithmeticExpression</span>.<span class="type">Number</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four = <span class="type">ArithmeticExpression</span>.<span class="type">Number</span>(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> sum = <span class="type">ArithmeticExpression</span>.<span class="type">Addition</span>(five, four)</span><br><span class="line"><span class="keyword">let</span> two = <span class="type">ArithmeticExpression</span>.<span class="type">Number</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> prouct = <span class="type">ArithmeticExpression</span>.<span class="type">Multiplication</span>(sum, two)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">evaluate</span><span class="params">(<span class="number">_</span> expression: ArithmeticExpression)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> expression &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Number</span>(value):</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Addition</span>(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">        <span class="keyword">return</span> evaluate(<span class="keyword">left</span>) + evaluate(<span class="keyword">right</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">Multiplication</span>(<span class="keyword">left</span>, <span class="keyword">right</span>):</span><br><span class="line">        <span class="keyword">return</span> evaluate(<span class="keyword">left</span>) * evaluate(<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算结果</span></span><br><span class="line">evaluate(prouct)</span><br></pre></td></tr></table></figure></p><p><strong>7.</strong> 枚举是值类型</p><h2 id="struct">struct<a href="post/swift-study-note#struct"></a></h2><p><strong>1.</strong> 结构体的基本使用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明一个结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> latitude: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> longitude: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化结构体</span></span><br><span class="line"><span class="keyword">let</span> appleHeadQuarterLocation = <span class="type">Location</span>(latitude: <span class="number">37.3230</span>, longitude: -<span class="number">122.0322</span>)</span><br><span class="line"><span class="keyword">let</span> googleHeadQuarterLocation: <span class="type">Location</span> = <span class="type">Location</span>(latitude: <span class="number">37.4220</span>, longitude: -<span class="number">122.0841</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性值</span></span><br><span class="line">appleHeadQuarterLocation.latitude</span><br><span class="line">googleHeadQuarterLocation.longitude</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体中有结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Place</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> location: <span class="type">Location</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> googleHeadQuarter = <span class="type">Place</span>(location: googleHeadQuarterLocation, name: <span class="string">"Google"</span>)</span><br><span class="line"><span class="comment">// 因为声明的是var，所以可修改</span></span><br><span class="line">googleHeadQuarter.name = <span class="string">"G"</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 结构体的初始化<br>结构体重定义的常量或变量都必须初始化。可选型可以不用初始化，因为默认初始值为<code>nil</code>，试了下可选型需要是var，如果是let，则必须直接赋值。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> latitude: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> longitude: <span class="type">Double</span></span><br><span class="line">    <span class="comment">// 自定义构造， 当自己写了构造函数后就没有了默认的构造函数</span></span><br><span class="line">    <span class="keyword">init</span>(coordinateString: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> commaIndex = coordinateString.range(of: <span class="string">","</span>)!.lowerBound <span class="comment">//得到逗号的下标</span></span><br><span class="line">        <span class="keyword">let</span> firstElement = coordinateString[..&lt;commaIndex]</span><br><span class="line">        <span class="keyword">let</span> secondElement = coordinateString[coordinateString.index(after: commaIndex)...]</span><br><span class="line">        latitude = <span class="type">Double</span>(firstElement)!</span><br><span class="line">        longitude = <span class="type">Double</span>(secondElement)!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当没有默认的构造的时候，我们可以自己添加这个构造</span></span><br><span class="line">    <span class="keyword">init</span>(latitude: <span class="type">Double</span>, longitude: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.latitude = latitude</span><br><span class="line">        <span class="keyword">self</span>.longitude = longitude</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        latitude = <span class="number">0.0</span></span><br><span class="line">        longitude = <span class="number">0.0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认初始值为nil</span></span><br><span class="line">    <span class="keyword">var</span> placeName: <span class="type">String</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(latitude: <span class="type">Double</span>, longitude: <span class="type">Double</span>, placeName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.latitude = latitude</span><br><span class="line">        <span class="keyword">self</span>.longitude = longitude</span><br><span class="line">        <span class="keyword">self</span>.placeName = placeName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> location = <span class="type">Location</span>(coordinateString: <span class="string">"111.1234,222.3333"</span>)</span><br><span class="line">location.latitude <span class="comment">// 111.1234</span></span><br><span class="line">location.placeName <span class="comment">// nil</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 失败的构造函数</p><ul><li>就是说构造函数可以是失败的，当我们<code>return nil</code>时候。也就是说我们初始化结构体的时候得到的是可选型</li><li>用guard可以轻松简化if else嵌套的判断代码</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> latitude: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> longitude: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(coordinateString: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> commaIndex = coordinateString.range(of: <span class="string">","</span>)?.lowerBound <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> firstElement = <span class="type">Double</span>(coordinateString[..&lt;commaIndex]) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> secondElement = <span class="type">Double</span>(coordinateString[coordinateString.index(after: commaIndex)...]) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        latitude = firstElement</span><br><span class="line">        longitude = secondElement</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>guard还可以将上面的代码优化</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> latitude: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> longitude: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(coordinateString: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> commaIndex = coordinateString.range(of: <span class="string">","</span>)?.lowerBound,</span><br><span class="line">            <span class="keyword">let</span> firstElement = <span class="type">Double</span>(coordinateString[..&lt;commaIndex]),</span><br><span class="line">            <span class="keyword">let</span> secondElement = <span class="type">Double</span>(coordinateString[coordinateString.index(after: commaIndex)...])</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        latitude = firstElement</span><br><span class="line">        longitude = secondElement</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.</strong> 结构体中可定义方法， 这里直接在上面代码中添加方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Location</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printLocation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"The Location is \(self.latitude), \(self.longitude)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isNorth</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.latitude &gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isSouth</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">self</span>.isNorth()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">distanceTo</span><span class="params">(location: Location)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(pow(<span class="keyword">self</span>.latitude - location.latitude, <span class="number">2</span>) + pow(<span class="keyword">self</span>.longitude - location.longitude, <span class="number">2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 结构体是值类型的，就是当做值来出来，赋值即是拷贝<br><strong>6.</strong> Int, Float, Double, Bool, String, Array, Dictionary, Set 等都是结构体</p><h2 id="class">class<a href="post/swift-study-note#class"></a></h2><p><strong>1.</strong> 类的基本使用方式<br>类不像结构体一样，类不能自动初始化，因此我们需要自己为变量赋值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> lastName: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.firstName = firstName</span><br><span class="line">        <span class="keyword">self</span>.lastName = lastName</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类和结构体一样，也可以定义可以失败的构造</span></span><br><span class="line">    <span class="keyword">init</span>?(fullName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> spaceIndex = fullName.range(of: <span class="string">" "</span>)?.lowerBound <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        firstName = <span class="type">String</span>(fullName[..&lt;spaceIndex])</span><br><span class="line">        lastName = <span class="type">String</span>(fullName[fullName.index(after: spaceIndex)...])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fullName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\(self.firstName) \(self.lastName)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="type">Person</span>(firstName: <span class="string">"Alexander"</span>, lastName: <span class="string">"Hamilton"</span>)</span><br><span class="line">person1.fullName() <span class="comment">// "Alexander Hamilton"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="type">Person</span>(fullName: <span class="string">"Jiaji Xu"</span>)</span><br><span class="line">person2?.firstName <span class="comment">//"Jiaji"</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 类是引用类型<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="type">Person</span>(name: <span class="string">"Tom"</span>)</span><br><span class="line">person1.name <span class="comment">// Tom</span></span><br><span class="line"><span class="keyword">let</span> person2 = person1</span><br><span class="line">person2.name = <span class="string">"Bob"</span></span><br><span class="line">person2.name <span class="comment">// Bob</span></span><br><span class="line">person1.name <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 方法的可变和不可变</p><ul><li>类的方法中可改变变量的值</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> career: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, career: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.career = career</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(career: String)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.career = career</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="type">Person</span>(name: <span class="string">"Bob"</span>, career: <span class="string">"Developer"</span>)</span><br><span class="line">person.change(career: <span class="string">"Teacher"</span>)</span><br></pre></td></tr></table></figure><ul><li>结构体由于是值传递，所以不可改变变量的值，像上面写会报错，提示immutable（不可变）。但是可以为方法加上关键字<code>mutating</code>，每次改变都会创建一个新的副本覆盖旧的值</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Switch</span></span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">On</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Off</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">click</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span>&#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">On</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">Off</span></span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Off</span>:</span><br><span class="line">            <span class="keyword">self</span> = .<span class="type">On</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button = <span class="type">Switch</span>.<span class="type">Off</span></span><br><span class="line">button.click()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button2 = <span class="type">Switch</span>.<span class="type">On</span></span><br><span class="line"></span><br><span class="line">button == button2</span><br></pre></td></tr></table></figure><p><strong>4.</strong> 类与类之间的等价，比较两个变量是否指向的同一个东西<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="type">Person</span>(name: <span class="string">"Bob"</span>)</span><br><span class="line"><span class="keyword">let</span> person2 = person1</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能使用“==”判断：</span></span><br><span class="line"><span class="comment">// person1 == person2</span></span><br><span class="line">person1 === person2 <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person3 = <span class="type">Person</span>(name: <span class="string">"Bob"</span>)</span><br><span class="line">person1 === person3 <span class="comment">// false</span></span><br><span class="line">person1 !== person3 <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 什么时候用类什么时候用结构体</p><ul><li>把结构体看作是值<ul><li>位置 （经纬度）</li><li>坐标 （二维，三维坐标）</li><li>温度</li><li>…</li></ul></li><li>把类看作是物体<ul><li>人</li><li>车</li><li>动物</li><li>…</li></ul></li><li>如果不希望每次传递都创建一个新的副本，那么就用类，否则用结构体</li><li>类可以被继承</li><li>结构体比类更加“轻量级”</li></ul><h2 id="属性和方法">属性和方法<a href="post/swift-study-note#属性和方法"></a></h2><p><strong>1.</strong> 计算型属性：自动更具其他信息计算出值<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> height = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> origin: <span class="type">Point</span></span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">Size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(origin: <span class="type">Point</span>, size: <span class="type">Size</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.origin = origin</span><br><span class="line">        <span class="keyword">self</span>.size = size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写法一</span></span><br><span class="line"><span class="comment">//    var center: Point &#123;</span></span><br><span class="line"><span class="comment">//        let centerX = origin.x + size.width / 2</span></span><br><span class="line"><span class="comment">//        let centerY = origin.y + size.height / 2</span></span><br><span class="line"><span class="comment">//        return Point(x: centerX, y: centerY)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写法二</span></span><br><span class="line"><span class="comment">//    var center: Point &#123;</span></span><br><span class="line"><span class="comment">//        get &#123;</span></span><br><span class="line"><span class="comment">//            let centerX = origin.x + size.width / 2</span></span><br><span class="line"><span class="comment">//            let centerY = origin.y + size.height / 2</span></span><br><span class="line"><span class="comment">//            return Point(x: centerX, y: centerY)</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写法三：上面的写法是只读的，无法为center赋值。如果要赋值，则需要些setter</span></span><br><span class="line">    <span class="keyword">var</span> center: <span class="type">Point</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> centerX = origin.x + size.width/<span class="number">2</span></span><br><span class="line">            <span class="keyword">let</span> centerY = origin.y + size.height/<span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="type">Point</span>(x: centerX, y: centerY)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (newCenter)可以被省略</span></span><br><span class="line">        <span class="comment">// 在setter的&#123;&#125;中用默认名称newValue代替传入值</span></span><br><span class="line">        <span class="keyword">set</span>(newCenter)&#123;</span><br><span class="line">            origin.x = newCenter.x - size.width/<span class="number">2</span></span><br><span class="line">            origin.y = newCenter.y - size.height/<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="type">Rectangle</span>(origin: <span class="type">Point</span>(), size: <span class="type">Size</span>(width: <span class="number">10</span>, height: <span class="number">5</span>))</span><br><span class="line">rect.center</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三可为center赋值，并且会自动改变坐标</span></span><br><span class="line">rect.center = <span class="type">Point</span>(x: <span class="number">10</span>, y: <span class="number">10</span>)</span><br><span class="line">rect</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 类型属性（Type Property），静态变量<br>就和java中的静态变量差不多，写法也一样，不过必须通过类型名获取<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义类型属性，不能通过self.来引用，类中也不可直接引用</span></span><br><span class="line">    <span class="comment">// 不论创建多少个实例，都只存在一个该变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> highestScore = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 类型方法（Type Method），静态方法，这里举了一个创建单位矩阵的类型方法<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m: [[<span class="type">Int</span>]]</span><br><span class="line">    <span class="keyword">var</span> row: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> col: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(<span class="number">_</span> arr2d: [[<span class="type">Int</span>]]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> arr2d.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> row = arr2d.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">let</span> col = arr2d[<span class="number">0</span>].<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..&lt;row &#123;</span><br><span class="line">            <span class="keyword">if</span> arr2d[i].<span class="built_in">count</span> != row &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.m = arr2d</span><br><span class="line">        <span class="keyword">self</span>.row = row</span><br><span class="line">        <span class="keyword">self</span>.col = col</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">identityMatrix</span><span class="params">(n: Int)</span></span> -&gt; <span class="type">Matrix</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> arr2d: [[<span class="type">Int</span>]] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;n &#123;</span><br><span class="line">            <span class="keyword">var</span> row = [<span class="type">Int</span>](repeating: <span class="number">0</span>, <span class="built_in">count</span>: n)</span><br><span class="line">            row[i] = <span class="number">1</span></span><br><span class="line">            arr2d.append(row)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Matrix</span>(arr2d)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printMatrix</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;row &#123;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">0</span>..&lt;col &#123;</span><br><span class="line">                <span class="built_in">print</span>(m[i][j], terminator: <span class="string">"\t"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="type">Matrix</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">m?.printMatrix()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接通过类型名直接调用</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="type">Matrix</span>.identityMatrix(n: <span class="number">6</span>)</span><br><span class="line">e?.printMatrix()</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//1    2</span></span><br><span class="line"><span class="comment">//3    4</span></span><br><span class="line"><span class="comment">//1    0    0    0    0    0</span></span><br><span class="line"><span class="comment">//0    1    0    0    0    0</span></span><br><span class="line"><span class="comment">//0    0    1    0    0    0</span></span><br><span class="line"><span class="comment">//0    0    0    1    0    0</span></span><br><span class="line"><span class="comment">//0    0    0    0    1    0</span></span><br><span class="line"><span class="comment">//0    0    0    0    0    1</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 属性观察器</p><ul><li>注意willSet和didSet不会在变量直接初始化和构造方法中被调用</li><li>一个电灯的案例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class LightBulb &#123;</span><br><span class="line">    static let maxCurrent = 30</span><br><span class="line">    var current = 0 &#123;</span><br><span class="line">        // 可以不声明变量名newCurrent，可直接使用newValue</span><br><span class="line">        // 如其名，此时是在设置新值之前被调用</span><br><span class="line">        willSet(newCurrent) &#123;</span><br><span class="line">            // 此时， current还是以前的值</span><br><span class="line">            print(&quot;|\(current)-\(newCurrent)| = \(abs(current - newCurrent))&quot;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Property observer 可以用来限制值或格式</span><br><span class="line">        // 也可以用来并联逻辑</span><br><span class="line">        // 可以不声明变量oldCurrent，可直接使用oldValue获取原来的值</span><br><span class="line">        // 如其名，此时是已经设置好新的值后被调用</span><br><span class="line">        didSet(oldCurrent) &#123;</span><br><span class="line">            if current == LightBulb.maxCurrent &#123;</span><br><span class="line">                print(&quot;Pay attention, the current value get to the maxinum point.&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            else if current &gt; LightBulb.maxCurrent&#123;</span><br><span class="line">                print(&quot;Current too high, falling back to previous setting.&quot;)</span><br><span class="line">                current = oldCurrent</span><br><span class="line">            &#125;</span><br><span class="line">            print(&quot;The current is \(current)&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let bulb = LightBulb()</span><br><span class="line">bulb.current = 20</span><br><span class="line">bulb.current = 30</span><br><span class="line">bulb.current = 40</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">//|0-20| = 20</span><br><span class="line">//The current is 20</span><br><span class="line">//|20-30| = 10</span><br><span class="line">//Pay attention, the current value get to the maxinum point.</span><br><span class="line">//The current is 30</span><br><span class="line">//|30-40| = 10</span><br><span class="line">//Current too high, falling back to previous setting.</span><br><span class="line">//The current is 30</span><br></pre></td></tr></table></figure><ul><li>一个主题切换的案例</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Theme</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">DayMode</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">NightMode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UI</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fontColor: <span class="type">UIColor</span>!</span><br><span class="line">    <span class="keyword">var</span> backgroundColor: <span class="type">UIColor</span>!</span><br><span class="line">    <span class="keyword">var</span> themeMode: <span class="type">Theme</span> = .<span class="type">DayMode</span> &#123;</span><br><span class="line">        <span class="comment">// 每当改变了主题的时候，就去改变对应的配色</span></span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.changeMode(themeMode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.themeMode = .<span class="type">DayMode</span></span><br><span class="line">        <span class="keyword">self</span>.changeMode(themeMode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于多处用到于是提取出来</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">changeMode</span><span class="params">(<span class="number">_</span> newMode: Theme)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> newMode &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">DayMode</span>:</span><br><span class="line">            fontColor = <span class="type">UIColor</span>.black</span><br><span class="line">            backgroundColor = <span class="type">UIColor</span>.white</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">NightMode</span>:</span><br><span class="line">            fontColor = <span class="type">UIColor</span>.white</span><br><span class="line">            backgroundColor = <span class="type">UIColor</span>.black</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ui = <span class="type">UI</span>()</span><br><span class="line">ui.themeMode</span><br><span class="line">ui.fontColor <span class="comment">//  黑</span></span><br><span class="line">ui.backgroundColor <span class="comment">// 白</span></span><br><span class="line"></span><br><span class="line">ui.themeMode = .<span class="type">NightMode</span></span><br><span class="line">ui.fontColor <span class="comment">// 白</span></span><br><span class="line">ui.backgroundColor <span class="comment">// 黑</span></span><br></pre></td></tr></table></figure><p><strong>5.</strong> 延迟属性（Lazy Property）<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedRange</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> start: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> end: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次调用都会重新计算</span></span><br><span class="line">    <span class="keyword">var</span> width: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> end - start + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用懒加载，只有第一次调用是才会计算，解决资源重复计算或读取等问题</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> sum: <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">self</span>.start...<span class="keyword">self</span>.end &#123;</span><br><span class="line">            res += i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>?(start: <span class="type">Int</span>, end: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> start &gt; end &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.start = start</span><br><span class="line">        <span class="keyword">self</span>.end = end</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> range = <span class="type">ClosedRange</span>(start: <span class="number">0</span>, end: <span class="number">10_000</span>) &#123;</span><br><span class="line">    range.width</span><br><span class="line">    range.sum</span><br><span class="line">    range.sum</span><br><span class="line">    range.sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 访问控制</p><ul><li><code>private</code> 私有访问控制，标识了的变量和方法只能在同一个文件中才能访问</li><li><code>internal</code> 默认访问控制，同一个目录下可访问</li><li><code>public</code> 公有访问控制，标识后任何地方都可访问</li></ul><p><strong>7.</strong> 单例模式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sources文件夹中 GameManager.swift</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> defaultManager = <span class="type">GameManager</span>()</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> level = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">addScore</span><span class="params">()</span></span> &#123;</span><br><span class="line">        score += <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主文件中</span></span><br><span class="line"><span class="keyword">let</span> gameManager = <span class="type">GameManager</span>.defaultManager</span><br><span class="line">gameManager.addScore()</span><br><span class="line">gameManager.score <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gm = <span class="type">GameManager</span>.defaultManager</span><br><span class="line">gm.addScore()</span><br><span class="line">gm.score <span class="comment">// 20</span></span><br></pre></td></tr></table></figure></p><h2 id="继承和构造函数">继承和构造函数<a href="post/swift-study-note#继承和构造函数"></a></h2><p><strong>1.</strong> 继承基本使用方式<br>继承某个类使用冒号”:”跟上继承的类<br>继承可以使用父类中非私有的属性（不在一个文件的情况下）<br><code>final</code>关键字可以让该类不再有子类<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> life = <span class="number">100</span> <span class="comment">// 血条</span></span><br><span class="line">    <span class="keyword">var</span> isAlive: <span class="type">Bool</span> = <span class="literal">true</span> <span class="comment">// 是否存活</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被攻击时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">beAttacked</span><span class="params">(attack: Int)</span></span> &#123;</span><br><span class="line">        life -= attack</span><br><span class="line">        <span class="keyword">if</span> life &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            isAlive = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> leve = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> player = <span class="type">User</span>(name: <span class="string">"Jiaji"</span>)</span><br><span class="line">player.name</span><br><span class="line">player.life</span><br><span class="line">player.beAttacked(attack: <span class="number">20</span>)</span><br><span class="line">player.life</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用final，表示最终的类，阻止进一步的继承</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Magician</span>: <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> magic = <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 多态<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简化大量代码</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">Avatar</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Magician</span>: <span class="title">User</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span>: <span class="title">Avatar</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printName</span><span class="params">(avatar: Avatar)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name is \(avatar.name)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="type">User</span>(name: <span class="string">"Bob"</span>)</span><br><span class="line"><span class="keyword">let</span> user2 = <span class="type">Magician</span>(name: <span class="string">"Tom"</span>)</span><br><span class="line"><span class="keyword">let</span> mons = <span class="type">Monster</span>(name: <span class="string">"no1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要都是继承Avatar那么就可以传入这个方法， 不在乎具体的类</span></span><br><span class="line">printName(avatar: user)</span><br><span class="line">printName(avatar: user2)</span><br><span class="line">printName(avatar: mons)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//name is Bob</span></span><br><span class="line"><span class="comment">//name is Tom</span></span><br><span class="line"><span class="comment">//name is no1</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 重载， 通过关键字<code>override</code>即可复写父类中的成员<br>私有成员无法覆写；<br>final成员无法覆写；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is SuperClass"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"SuperClass fun1()"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记了final后，无法被子类覆写</span></span><br><span class="line">    <span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">fun2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"SuperClass fun2()"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span>: <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"This is SubClass"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">fun1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"SubClass fun1()"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> claz = <span class="type">SuperClass</span>()</span><br><span class="line"><span class="keyword">let</span> claz2 = <span class="type">SubClass</span>()</span><br><span class="line"><span class="keyword">let</span> arr: [<span class="type">SuperClass</span>] = [claz, claz2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">c</span> <span class="keyword">in</span> arr &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">c</span>.description)</span><br><span class="line">    <span class="built_in">c</span>.fun1()</span><br><span class="line">    <span class="built_in">c</span>.fun2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//This is SuperClass</span></span><br><span class="line"><span class="comment">//SuperClass fun1()</span></span><br><span class="line"><span class="comment">//SuperClass fun2()</span></span><br><span class="line"><span class="comment">//This is SubClass</span></span><br><span class="line"><span class="comment">//SubClass fun1()</span></span><br><span class="line"><span class="comment">//SuperClass fun2()</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 子类构造中调用父类构造</p><ul><li>必须将子类初始化完成，才能调用父类构造初始化父类</li><li>通过<code>super.init</code>调用父类构造</li></ul><p><strong>5.</strong> 两段式构造</p><ul><li>第一段：构造初值<ul><li>在所有变量没有初始化完成之前，不能调用其他方法</li><li>父类的成员变量，即使有初始值，也不能使用</li><li>可以涉及逻辑，但逻辑不能涉及到self</li><li>静态的可以使用</li></ul></li><li>调用super构造(如果需要的话)</li><li>第二段：所有成员变量初始化完成以后，进行成员变量相关的逻辑调整</li></ul><p><strong>6.</strong> 方便的构造函数和指定的构造函数<br>一般的构造就是指定的构造函数；<br>加了convenience的构造就是方便的构造函数，方便的构造函数只能self调用该类的指定构造函数；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// 这种叫做指定构造函数</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这种叫做指定构造函数</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这种叫做方便的构造函数，convenience直接翻译过来就是：方便</span></span><br><span class="line">    <span class="comment">// 方便的构造函数只能调用该类自身的构造函数，不能调用super的</span></span><br><span class="line">    <span class="comment">// 要调用该类自身的构造，必须加上convenience</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: <span class="string">"\(firstName) \(lastName)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>7.</strong> 子类构造函数的继承<br>如果子类没有实现任何父类的指定构造函数，则自动继承父类的所有指定构造函数；<br>如果子类实现了父类所有的指定构造函数，则自动继承父类的所有便利构造函数；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    init(num: Int) &#123;</span></span><br><span class="line"><span class="comment">//        self.name = String(num)</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: <span class="string">"\(firstName) \(lastName)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现了父类所有指定构造的情况下，如果想看没有实现完的情况，将Avatar注释的代码放开</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>: <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> group: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, group: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.group = group</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(group: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> name = <span class="type">User</span>.generateUserName()</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, group: group)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">override</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, group: <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">generateUserName</span><span class="params">()</span></span> -&gt; <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Player"</span> + <span class="type">String</span>(<span class="type">Int</span>(arc4random()%<span class="number">1_000_000</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有实现任何指定构造的情况</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span>: <span class="title">Avatar</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子类没有实现任何父类构造的情况,自动继承父类的所有指定构造函数</span></span><br><span class="line">    <span class="comment">// 可直接用self调用，相当于Monster已经有了init(name: type)</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(type: <span class="type">String</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: type)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果将Avatar中的init(num: Int)的构造的注释解开该句实例化将会报错，因为放开后，子类User并没有实现父类的init(num: Int)</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="type">User</span>(firstName: <span class="string">"John"</span>, lastName: <span class="string">"Snow"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过三种方式实例化，其中第二种继承自父类，第三种父类的方便构造能直接使用</span></span><br><span class="line"><span class="keyword">let</span> zombie = <span class="type">Monster</span>(type: <span class="string">"Zombie"</span>)</span><br><span class="line"><span class="keyword">let</span> zombie2 = <span class="type">Monster</span>(name: <span class="string">"Zombie"</span>)</span><br><span class="line"><span class="keyword">let</span> zombie3 = <span class="type">Monster</span>(firstName: <span class="string">"Mr."</span>, lastName: <span class="string">"Zombie"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>8.</strong> required构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Avatar &#123;</span><br><span class="line">    var name: String</span><br><span class="line">    // 表示子类必须实现该构造方法</span><br><span class="line">    required init(name: String) &#123;</span><br><span class="line">        self.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init(num: Int) &#123;</span><br><span class="line">        self.name = String(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 如果没有实现任何父类指定构造，那么默认会实现所有父类指定构造</span><br><span class="line">class NPC:Avatar &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User: Avatar &#123;</span><br><span class="line">    override init(num: Int) &#123;</span><br><span class="line">        super.init(num: num)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 如果重写了一个父类构造（如上面的构造），那么必须实现父类强制要实现的构造</span><br><span class="line">    required init(name: String) &#123;</span><br><span class="line">        super.init(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>9.</strong> 结构体中的构造<br>由于结构体中没有继承的关系，所以不用申明是方便的构造表示要调用自己的构造。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(a: <span class="type">Int</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">init</span>(b: <span class="type">Int</span>, <span class="built_in">c</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(a: b + <span class="built_in">c</span>) <span class="comment">// 直接self调用就行了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="文档注释">文档注释<a href="post/swift-study-note#文档注释"></a></h2><p><strong>1.</strong> 多行文档注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">多行文档注释</span><br><span class="line">多行文档注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 单行文档注释，多个单行合在一起和多行效果一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/// 单行文档注释</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 使用的是Markdown格式书写<br><strong>4.</strong> 参数注释1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/// - Parameter item1: This is item1</span><br><span class="line">/// - Parameter item2: This is item2</span><br><span class="line">func show2(item1: String, item2: String) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 参数注释2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/// - Parameters:</span><br><span class="line">///   - item1: This is item1</span><br><span class="line">///   - item2: This is item2</span><br><span class="line">func show2(item1: String, item2: String) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 返回信息、异常信息注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/// - Returns: the result String.</span><br><span class="line">/// - Throws: nil error</span><br><span class="line">func show1() throws -&gt; String &#123;</span><br><span class="line">    return &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>7.</strong> 一些对于算法或其他用途的一些关键字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/// 对于算法或其他用途的一些关键字 `Precondition`, `Postcondition`, `Requires`, `Invariant`, `Complexity`, `Important` and `Warning`.</span><br><span class="line">///</span><br><span class="line">/// 假设这是一个算法</span><br><span class="line">///</span><br><span class="line">/// - Precondition: 前置条件</span><br><span class="line">/// - Postcondition: 后置条件</span><br><span class="line">/// - Requires: 算法所需要的内容</span><br><span class="line">/// - Invariant: 循环不变量</span><br><span class="line">/// - Complexity: 复杂度</span><br><span class="line">/// - Important: 一些重要的信息</span><br><span class="line">/// - Warning: 一些警告信息</span><br><span class="line">/// - Attention: 一些警告信息</span><br><span class="line">/// - Note: 一些相应的记录</span><br><span class="line">/// - Remark: 一些评论</span><br><span class="line">///</span><br><span class="line">/// - Parameter object: The algorithm will use this single object to change the world.</span><br><span class="line">/// - Throws: `MyError.JustImpossible` if the algorithm&apos;s precondition can not be satisfied.</span><br><span class="line">/// - Returns: the object contains all the information in the universe.</span><br><span class="line">func mysteriousAlgorithm(object: AnyObject) &#123;</span><br><span class="line">    return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>8.</strong> 一些元信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/// - Author: 作者</span><br><span class="line">/// - Author: 几个人一起完成...</span><br><span class="line">/// - Copyright: 版权信息</span><br><span class="line">/// - Date: 时间</span><br><span class="line">/// - Since: 项目起始日期</span><br><span class="line">/// - Version: 对应的版本号</span><br><span class="line">func show() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>9.</strong> MARK</p><ul><li>分割类视图</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// MARK: -</span><br></pre></td></tr></table></figure><ul><li>添加分割类视图并添加该区域标题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// MARK: - Methods</span><br></pre></td></tr></table></figure><p><strong>10.</strong> TODO<br>在类视图中建立任务提醒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// TODO: 以后在这里要干嘛干嘛</span><br></pre></td></tr></table></figure></p><p><strong>11.</strong> FIXME<br>需要修复，但占时无关紧要，在类视图中会有提醒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// FIXME: Support Swift 2.2</span><br></pre></td></tr></table></figure></p><h2 id="下标">下标<a href="post/swift-study-note#下标"></a></h2><p><strong>1.</strong> 基本使用方式<br>可以自己定义下标的类型，如同数组和字典一样访问方式；<br>需要关键字<code>subscript</code>；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> z: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数类型可以随意指定</span></span><br><span class="line">    <span class="comment">// 需要有个返回值</span></span><br><span class="line">    <span class="comment">// 如果需要通过下标来设置值，则需要添加set</span></span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; <span class="type">Double</span>? &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> index &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> x</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> y</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> z</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> newValue = newValue <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> index &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: x = newValue</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: y = newValue</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: z = newValue</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span>(axis: <span class="type">String</span>) -&gt; <span class="type">Double</span>? &#123;</span><br><span class="line">        <span class="keyword">switch</span> axis &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"x"</span>, <span class="string">"X"</span>: <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"y"</span>, <span class="string">"Y"</span>: <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"z"</span>, <span class="string">"Z"</span>: <span class="keyword">return</span> z</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v = <span class="type">Vector3</span>(x: <span class="number">1.0</span>, y: <span class="number">2.0</span>, z: <span class="number">3.0</span>)</span><br><span class="line">v[<span class="number">0</span>] <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 添加了set才能设置值</span></span><br><span class="line">v[<span class="number">0</span>] = <span class="number">100.0</span> <span class="comment">// 100</span></span><br><span class="line">v[<span class="string">"x"</span>] <span class="comment">// 100</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 多维下标<br>可定义多个下标；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data: [[<span class="type">Double</span>]]</span><br><span class="line">    <span class="keyword">let</span> r: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">c</span>: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(row: <span class="type">Int</span>, col: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.r = row</span><br><span class="line">        <span class="keyword">self</span>.<span class="built_in">c</span> = col</span><br><span class="line">        <span class="keyword">self</span>.data = [[<span class="type">Double</span>]]()</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;r &#123;</span><br><span class="line">            <span class="keyword">let</span> aRow = <span class="type">Array</span>(repeating: <span class="number">0.0</span>, <span class="built_in">count</span>: col)</span><br><span class="line">            data.append(aRow)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回确切有值</span></span><br><span class="line">    <span class="keyword">subscript</span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>( x &gt;= <span class="number">0</span> &amp;&amp; x &lt; r &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="built_in">c</span> , <span class="string">"Index Out of Range"</span>)</span><br><span class="line">            <span class="keyword">return</span> data[x][y]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>( x &gt;= <span class="number">0</span> &amp;&amp; x &lt; r &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="built_in">c</span> , <span class="string">"Index Out of Range"</span>)</span><br><span class="line">            data[x][y] = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果想使用 m[1][1]</span></span><br><span class="line">    <span class="keyword">subscript</span>(row: <span class="type">Int</span>) -&gt; [<span class="type">Double</span>]&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="built_in">assert</span>( row &gt;= <span class="number">0</span> &amp;&amp; row &lt; r , <span class="string">"Index Out of Range"</span>)</span><br><span class="line">            <span class="keyword">return</span> data[row]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">set</span>(vector)&#123;</span><br><span class="line">            <span class="built_in">assert</span>( vector.<span class="built_in">count</span> == <span class="built_in">c</span> , <span class="string">"Column Number does NOT match"</span>)</span><br><span class="line">            data[row] = vector</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="type">Matrix</span>(row: <span class="number">2</span>, col: <span class="number">2</span>)</span><br><span class="line"><span class="comment">//m[2,2]</span></span><br><span class="line">m[<span class="number">1</span>,<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想使用 m[1][1]</span></span><br><span class="line">m[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">m[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">m[<span class="number">0</span>] = [<span class="number">1.5</span>,<span class="number">4.5</span>]</span><br></pre></td></tr></table></figure></p><h2 id="运算符重载">运算符重载<a href="post/swift-study-note#运算符重载"></a></h2><p>运算符本身就是一个函数<br><strong>1.</strong> 重载运算符基本操作<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> + <span class="params">(<span class="keyword">left</span>: Vector3, <span class="keyword">right</span>: Vector3)</span></span> -&gt; <span class="type">Vector3</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector3</span>(x: <span class="keyword">left</span>.x + <span class="keyword">right</span>.x, y: <span class="keyword">left</span>.y + <span class="keyword">right</span>.y, z: <span class="keyword">left</span>.z + <span class="keyword">right</span>.z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载单目运算符，prefix表示 - 是一个前置运算符，相对应的是postfix</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> - <span class="params">(v: Vector3)</span></span> -&gt; <span class="type">Vector3</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector3</span>(x: -v.x, y: -v.y, z: -v.z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 += 这种运算</span></span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="keyword">func</span> += <span class="params">(<span class="keyword">left</span>: <span class="keyword">inout</span> Vector3, <span class="keyword">right</span>: Vector3)</span></span> &#123;</span><br><span class="line">    <span class="keyword">left</span> = <span class="keyword">left</span> + <span class="keyword">right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> va = <span class="type">Vector3</span>(x: <span class="number">1.0</span>, y: <span class="number">2.0</span>, z: <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">let</span> vb = <span class="type">Vector3</span>(x: <span class="number">3.0</span>, y: <span class="number">4.0</span>, z: <span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vc = vb + va</span><br><span class="line">vc.x</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 重载比较运算符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载比较运算符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> == <span class="params">(<span class="keyword">left</span>: Vector3, <span class="keyword">right</span>: Vector3)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.x == <span class="keyword">right</span>.x &amp;&amp; <span class="keyword">left</span>.y == <span class="keyword">right</span>.y &amp;&amp; <span class="keyword">left</span>.z == <span class="keyword">right</span>.z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> != <span class="params">(<span class="keyword">left</span>: Vector3, <span class="keyword">right</span>: Vector3)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="keyword">left</span> == <span class="keyword">right</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> va = <span class="type">Vector3</span>(x: <span class="number">1.0</span>, y: <span class="number">2.0</span>, z: <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">let</span> vb = <span class="type">Vector3</span>(x: <span class="number">3.0</span>, y: <span class="number">4.0</span>, z: <span class="number">5.0</span>)</span><br><span class="line"></span><br><span class="line">va == vb</span><br><span class="line">va != vb</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 自定义运算符<br>如果是ASCII字符，只能是：<code>/ = - + ! * % &lt; &gt; &amp; | ^ ~</code>之开头 。或者是Unicode的字符<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vector3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> z: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">length</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(x*x + y*y + z*z)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> + <span class="params">(<span class="keyword">left</span>: Vector3, <span class="keyword">right</span>: Vector3)</span></span> -&gt; <span class="type">Vector3</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Vector3</span>(x: <span class="keyword">left</span>.x + <span class="keyword">right</span>.x, y: <span class="keyword">left</span>.y + <span class="keyword">right</span>.y, z: <span class="keyword">left</span>.z + <span class="keyword">right</span>.z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> * <span class="params">(<span class="keyword">left</span>: Vector3, <span class="keyword">right</span>: Vector3)</span></span> -&gt; <span class="type">Double</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.x * <span class="keyword">right</span>.x + <span class="keyword">left</span>.y * <span class="keyword">right</span>.y + <span class="keyword">left</span>.z * <span class="keyword">right</span>.z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> += <span class="params">(<span class="keyword">left</span>: <span class="keyword">inout</span> Vector3, <span class="keyword">right</span>: <span class="keyword">inout</span> Vector3)</span></span>&#123;</span><br><span class="line">    <span class="keyword">left</span> = <span class="keyword">left</span> + <span class="keyword">right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单目运算符的定义</span></span><br><span class="line"><span class="keyword">postfix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">postfix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: <span class="keyword">inout</span> Vector3)</span></span> -&gt; <span class="type">Vector3</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> addOn = <span class="type">Vector3</span>(x: <span class="number">1.0</span>, y: <span class="number">1.0</span>, z: <span class="number">1.0</span>)</span><br><span class="line">    vector += addOn</span><br><span class="line">    <span class="keyword">return</span> vector</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> +++</span><br><span class="line"><span class="keyword">prefix</span> <span class="function"><span class="keyword">func</span> +++ <span class="params">(vector: <span class="keyword">inout</span> Vector3)</span></span> -&gt; <span class="type">Vector3</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = vector</span><br><span class="line">    <span class="keyword">var</span> addOn = <span class="type">Vector3</span>(x: <span class="number">1.0</span>, y: <span class="number">1.0</span>, z: <span class="number">1.0</span>)</span><br><span class="line">    vector += addOn</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双目运算符的定义</span></span><br><span class="line"><span class="comment">// 计算两个向量的夹角</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> ^</span><br><span class="line"><span class="function"><span class="keyword">func</span> ^ <span class="params">(<span class="keyword">left</span>: Vector3, <span class="keyword">right</span>: Vector3)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acos((<span class="keyword">left</span> * <span class="keyword">right</span>) / (<span class="keyword">left</span>.length() * <span class="keyword">right</span>.length()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算阶层，定义优先组</span></span><br><span class="line">precedencegroup <span class="type">ExponentPrecedence</span>&#123;</span><br><span class="line">    <span class="comment">// 是从左向右计算还是从右向左计算</span></span><br><span class="line">    <span class="keyword">associativity</span>: <span class="keyword">left</span></span><br><span class="line">    <span class="comment">// 定义优先级，用lowerThan或higherThan来定义</span></span><br><span class="line">    higherThan: <span class="type">MultiplicationPrecedence</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> **: <span class="type">ExponentPrecedence</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> **<span class="params">(x: Double, p: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pow(x, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>**<span class="number">3</span>**<span class="number">2</span> <span class="comment">// 65</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> va = <span class="type">Vector3</span>(x: <span class="number">1.0</span>, y: <span class="number">2.0</span>, z: <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">var</span> vb = <span class="type">Vector3</span>(x: <span class="number">3.0</span>, y: <span class="number">4.0</span>, z: <span class="number">5.0</span>)</span><br><span class="line">va+++</span><br><span class="line"></span><br><span class="line">+++vb</span><br><span class="line"></span><br><span class="line">va ^ vb</span><br></pre></td></tr></table></figure></p><h2 id="Extension">Extension<a href="post/swift-study-note#Extension"></a></h2><p><strong>1.</strong> 基本使用方式<br>扩展；<br>扩展属性时，只能扩展计算型属性；<br>只能创建方便的构造函数<code>convenience</code>；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(value: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.value = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 扩展用方法上时</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">beautifulValue</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"beautiful "</span> + <span class="keyword">self</span>.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="type">Test</span>(value: <span class="string">"girl"</span>)</span><br><span class="line">test.beautifulValue() <span class="comment">//"beautiful girl"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展用变量上时，必须是计算型变量</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.value.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.len <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展用构造时，必须是方便构造</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span> (firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(value: <span class="string">"\(firstName) \(lastName)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test2 = <span class="type">Test</span>(firstName: <span class="string">"Jiaji"</span>, lastName: <span class="string">"Xu"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 嵌套类型<br>如果某类型只有在一个类型里面起作用，那么可以将该类型放到里面，如String的Index类型；<br>扩展，可扩展嵌套类型；<br>扩展可扩展下标；<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> origin: (x: <span class="type">Double</span>, y: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">var</span> width: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> height: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">init</span>(origin: (<span class="type">Double</span>, <span class="type">Double</span>), width: <span class="type">Double</span>, height: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.origin = origin</span><br><span class="line">        <span class="keyword">self</span>.width = width</span><br><span class="line">        <span class="keyword">self</span>.height = height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Vertex</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">LeftTop</span>, <span class="type">RightTop</span>, <span class="type">RightBottom</span>, <span class="type">LeftBottom</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">subscript</span>(index: <span class="type">Int</span>) -&gt; (<span class="type">Double</span>, <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="number">4</span>, <span class="string">"Index in Rectange Out of Range."</span>)</span><br><span class="line">        <span class="keyword">switch</span> <span class="type">Vertex</span>(rawValue: index)! &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">LeftTop</span>:</span><br><span class="line">            <span class="keyword">return</span> origin</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">RightTop</span>:</span><br><span class="line">            <span class="keyword">return</span> (x: origin.x + width, y: origin.y)</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">RightBottom</span>:</span><br><span class="line">            <span class="keyword">return</span> (x: origin.x + width, y: origin.y + height )</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">LeftBottom</span>:</span><br><span class="line">            <span class="keyword">return</span> (x: origin.x, y: origin.y + height )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rect = <span class="type">Rectangle</span>(origin: (<span class="number">0.0</span>, <span class="number">0.0</span>), width: <span class="number">4</span>, height: <span class="number">3</span>)</span><br><span class="line">rect[<span class="number">0</span>]</span><br><span class="line">rect[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 扩展标准库<br>// Int还有很多可以做enxtension的地方<br>// 如 12345[2]<br>// 如 toBinary, toHex<br>// 如 isPrime<br>// extension在App开发中被经常使用<br>// 如 String, UIColor等基础类的使用<br>// 在App开发中, 一个界面可能需要处理多个事件: 表格显示, 用户输入, 导航, 动画, 数据存储…<br>// 此时可以使用extension分隔开;<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> square: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span> * <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cube: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span> * <span class="keyword">self</span> * <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inRange</span><span class="params">(start: Int, to: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span> &gt;= start &amp;&amp; <span class="keyword">self</span> &lt; to</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">repetitions</span><span class="params">(task: <span class="params">(Int)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="keyword">self</span> &#123;</span><br><span class="line">            task(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">8</span></span><br><span class="line">num.square</span><br><span class="line">num.cube</span><br><span class="line"></span><br><span class="line">num.inRange(start: <span class="number">0</span>, to: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">num.repetitions &#123; index <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello \(index)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br><span class="line"><span class="comment">//hello 8</span></span><br></pre></td></tr></table></figure></p><h2 id="Generic">Generic<a href="post/swift-study-note#Generic"></a></h2><p>泛型： 只关心具体操作，不关心具体类型<br><strong>1.</strong> 用在方法上<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoThings</span>&lt;T&gt;<span class="params">(a: <span class="keyword">inout</span> T, b: <span class="keyword">inout</span> T)</span></span> &#123;</span><br><span class="line">    (a, b) = (b, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">var</span> bye = <span class="string">"Bye"</span></span><br><span class="line">swapTwoThings(a: &amp;hello, b: &amp;bye)</span><br><span class="line">hello <span class="comment">// "Bye"</span></span><br><span class="line">bye <span class="comment">// "Hello"</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 用在类型上<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = [<span class="type">T</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span>  <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        items.append(item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> !<span class="keyword">self</span>.isEmpty() <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items.removeLast()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> items.last</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="type">Stack</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">s.push(<span class="number">1</span>)</span><br><span class="line">s.push(<span class="number">2</span>)</span><br><span class="line">s.pop()</span><br></pre></td></tr></table></figure></p><h2 id="protocol">protocol<a href="post/swift-study-note#protocol"></a></h2><p><strong>1.</strong> 协议的基本使用<br>协议；<br>只定义，不实现；<br>不能为协议设置默认的参数值，变量也不能有默认值；<br>变量只能用var<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// protocol Pet: class &#123;&#125; 表示如果协议继承class，则该协议不能应用于结构体</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 不能右初始值</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">// 统一使用var关键字</span></span><br><span class="line">    <span class="keyword">var</span> birthPlace: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于方法，不能有实现</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playWith</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对于方法，不能有默认参数（默认参数就是一种实现）</span></span><br><span class="line">    <span class="comment">// func fed(food: String = "leftover")</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fed</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fed</span><span class="params">(food: String)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以使用mutating关键字，强调在结构体重应该修改其中内容</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeName</span><span class="params">(newName: String)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 协议可继承</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PetBird</span>: <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flySpeed: <span class="type">Double</span>&#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> flyHeight: <span class="type">Double</span>&#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dog</span>: <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以使用计算型属性</span></span><br><span class="line">    <span class="comment">//    private var myDoggyName = "Puppy"</span></span><br><span class="line">    <span class="comment">//    var name: String&#123;</span></span><br><span class="line">    <span class="comment">//        get&#123;</span></span><br><span class="line">    <span class="comment">//            return myDoggyName</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//        set&#123;</span></span><br><span class="line">    <span class="comment">//            myDoggyName = newValue</span></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 协议中定义的只读，对于一个具体类的实现，不一定是只读，但是作为Pet时是只读的！</span></span><br><span class="line">    <span class="comment">// let birthPlace: String</span></span><br><span class="line">    <span class="keyword">var</span> birthPlace: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playWith</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Wong!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I want a bone."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在具体实现上可以加默认参数</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fed</span><span class="params">(food: String = <span class="string">"Bone"</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeName</span><span class="params">(newName: String)</span></span> &#123;</span><br><span class="line">        name = newName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myDog: <span class="type">Dog</span> = <span class="type">Dog</span>(name: <span class="string">"summer"</span>, birthPlace: <span class="string">"beijing"</span>)</span><br><span class="line">myDog.birthPlace = <span class="string">"beijing"</span></span><br><span class="line"><span class="keyword">var</span> aPet: <span class="type">Pet</span> = myDog</span><br><span class="line"><span class="comment">// 当作为Pet来操作的时候，是无法为birthPlace赋值的</span></span><br><span class="line"><span class="comment">// aPet.birthPlace = "shanghai"</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 协议和构造函数<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> type: <span class="type">String</span> = <span class="string">"mammal"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个类有继承的类，则类必须放在前面</span></span><br><span class="line"><span class="comment">// 父类只能有一个， 协议可以有多个</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span>, <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Pup"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果protocol有init， 则在class中必须声明required，强制让子类实现</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span>, <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是final class，init可以没有required，因为它不再会被继承</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"bird ..."</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span>: <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果只继承Bird，则只需要加override或Bird init是required，那么只需要required</span></span><br><span class="line">    <span class="comment">// 因为有Pet， 则required也不能省略</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">override</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name + <span class="string">" "</span> + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 为什么使用协议<br>协议描述的是某种特性；<br>如下面的例子，通过协议，我们可以将继承自不同父类不同类型的东西，由于某种一样的特性，我们可以依这特性把它们归为一类。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flySpeed: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> flyHeight: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span>, <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Puppy"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>: <span class="title">Animal</span>, <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"Kitten"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>: <span class="title">Animal</span>, <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flySpeed: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> flyHeight: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(flySpeed: <span class="type">Double</span>, flyHeight: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.flySpeed = flySpeed</span><br><span class="line">        <span class="keyword">self</span>.flyHeight = flyHeight</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parrot</span>: <span class="title">Bird</span>, <span class="title">Pet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, flySpeed: <span class="type">Double</span>, flyHeight: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name + <span class="string">" "</span> + name</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(flySpeed: flySpeed, flyHeight: flyHeight)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span>: <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="type">UIColor</span>.gray</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span>: <span class="title">Vehicle</span>, <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> model: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> flySpeed: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> flyHeight: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">init</span>(model: <span class="type">String</span>, flySpeed: <span class="type">Double</span>, flyHeight: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.model = model</span><br><span class="line">        <span class="keyword">self</span>.flyHeight = flyHeight</span><br><span class="line">        <span class="keyword">self</span>.flySpeed = flySpeed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="type">Dog</span>()</span><br><span class="line"><span class="keyword">var</span> cat = <span class="type">Cat</span>()</span><br><span class="line"><span class="keyword">var</span> parrot = <span class="type">Parrot</span>(name: <span class="string">"hi"</span>, flySpeed: <span class="number">10.0</span>, flyHeight: <span class="number">100.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pets: [<span class="type">Pet</span>] = [dog, cat, parrot]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sparrow = <span class="type">Sparrow</span>(flySpeed: <span class="number">15.0</span>, flyHeight: <span class="number">80.0</span>)</span><br><span class="line"><span class="keyword">var</span> plane = <span class="type">Plane</span>(model: <span class="string">"Boeing 747"</span>, flySpeed: <span class="number">200.0</span>, flyHeight: <span class="number">10_000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> flyers: [<span class="type">Flyable</span>] = [parrot, sparrow, plane]</span><br><span class="line"><span class="keyword">for</span> flyer <span class="keyword">in</span> flyers &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Fly speed: \(flyer.flySpeed), Fly Height: \(flyer.flyHeight)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 类型别名(typealias)<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Length</span> = <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Double</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m: <span class="type">Length</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> cm: <span class="type">Length</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> * <span class="number">100.0</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> km: <span class="type">Length</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> / <span class="number">1000.0</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> ft: <span class="type">Length</span> &#123; <span class="keyword">return</span> <span class="keyword">self</span> / <span class="number">3.28084</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> runningDistance: <span class="type">Length</span> = <span class="number">3.54</span>.km</span><br><span class="line">runningDistance</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候直接使用AudioSample，如果需要改为UInt32或其它时直接改这里，而不必每个地方都去改</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> = <span class="type">UInt64</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 并联类型(associatedtype)，在协议中使用别名<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">WeightCalculable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 协议中声明实现类需要使用别名，用associatedtype</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">WeightType</span></span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">WeightType</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在具体实现类中，用typealias</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">iPhone7</span>: <span class="title">WeightCalculable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">WeightType</span> = <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">WeightType</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.114</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ship</span>: <span class="title">WeightCalculable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">WeightType</span> = <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> weight: <span class="type">WeightType</span></span><br><span class="line">    <span class="keyword">init</span>(weight: <span class="type">WeightType</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.weight = weight</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Weight</span> = <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> t: <span class="type">Weight</span> &#123; <span class="keyword">return</span> <span class="number">1_000</span> * <span class="keyword">self</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> titanic = <span class="type">Ship</span>(weight: <span class="number">46_328_000</span>)</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> Swfit标准库中的常用协议<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Record</span>: <span class="title">Equatable</span>, <span class="title">Comparable</span>, <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 协议CustomStringConvertible中的定义，可直接被print打印</span></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WINS: \(wins), LOSSES: \(losses)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> boolValue: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wins &gt; losses</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 协议Equatable的作用，我们只需要实现==，我们就可以用!=</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(<span class="keyword">left</span>: Record, <span class="keyword">right</span>: Record)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.wins == <span class="keyword">right</span>.wins &amp;&amp; <span class="keyword">left</span>.losses == <span class="keyword">right</span>.losses</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 协议Comparable的作用，当我们定义了&lt;，上面右定义了==，此时我们可以使用&lt;=,&gt;,&gt;=</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> &lt;(left: Record, right: Record) -&gt; <span class="title">Bool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">left</span>.wins != <span class="keyword">right</span>.wins &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">left</span>.wins &lt; <span class="keyword">right</span>.wins</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">left</span>.losses &gt; <span class="keyword">right</span>.losses</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> record = <span class="type">Record</span>(wins: <span class="number">10</span>, losses: <span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> record2 = <span class="type">Record</span>(wins: <span class="number">11</span>, losses: <span class="number">5</span>)</span><br><span class="line">record &gt;= record2</span><br><span class="line"><span class="built_in">print</span>(record) <span class="comment">//WINS: 10, LOSSES: 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> records = [<span class="type">Record</span>(wins: <span class="number">10</span>, losses: <span class="number">3</span>), <span class="type">Record</span>(wins: <span class="number">8</span>, losses: <span class="number">5</span>), <span class="type">Record</span>(wins: <span class="number">8</span>, losses: <span class="number">8</span>)]</span><br><span class="line"><span class="comment">// 当我们实现了Comparable，可直接排序</span></span><br><span class="line">records.<span class="built_in">sort</span>()</span><br></pre></td></tr></table></figure></p><h2 id="面向协议编程">面向协议编程<a href="post/swift-study-note#面向协议编程"></a></h2><p><strong>1.</strong> 扩展协议和默认实现<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Record</span>: <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">winningPercent</span><span class="params">()</span></span> -&gt; <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展一个协议的时候，可以对协议进行实现</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现CustomStringConvertible协议中的description，实现Record的就可以不用实现这个</span></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"WINS: \(wins), LOSSES: \(losses)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展协议中还可以写其他方法的实现</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shoutWins</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"WE WIN"</span>, wins, <span class="string">"TIMES!!!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展中还可以对定义的变量进行计算，计算的是对应实现类中值</span></span><br><span class="line">    <span class="keyword">var</span> gamePlayed: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wins + losses</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BaseballRecord</span>: <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">winningPercent</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / <span class="type">Double</span>(gamePlayed)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> teamRecord = <span class="type">BaseballRecord</span>(wins: <span class="number">2</span>, losses: <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(teamRecord)</span><br><span class="line">teamRecord.shoutWins()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展标准库中的协议</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> descriptionWithDate: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSData</span>().description + <span class="string">" "</span> + description</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(teamRecord.descriptionWithDate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// WINS: 2, LOSSES: 10</span></span><br><span class="line"><span class="comment">// WE WIN 2 TIMES!!!</span></span><br><span class="line"><span class="comment">// &lt;&gt; WINS: 2, LOSSES: 10</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 根据条件扩展协议<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gamePlayed: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wins + losses</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">winningPercent</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / <span class="type">Double</span>(gamePlayed)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Tieable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ties: <span class="type">Int</span> &#123;<span class="keyword">get</span> <span class="keyword">set</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该扩展表示：实现该协议的实例又实现了Tieable协议会进入这个扩展</span></span><br><span class="line"><span class="comment">// 由于实现了Tieable扩展后的实体需要改变一些计算方式</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Record</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">Tieable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gamePlayed: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wins + losses + ties</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不写覆写这个方法，实例会调用上面扩展中的方法，并调用上面扩展中的gamePlayed，会导致计算结果不对</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">winningPercent</span><span class="params">()</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Double</span>(wins) / <span class="type">Double</span>(gamePlayed) <span class="comment">// gamePlayed = wins + losses + ties</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FootballRecord</span>: <span class="title">Record</span>, <span class="title">Tieable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> wins: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> losses: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> ties: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> footballTeam = <span class="type">FootballRecord</span>(wins: <span class="number">1</span>, losses: <span class="number">1</span>, ties: <span class="number">1</span>)</span><br><span class="line">footballTeam.gamePlayed</span><br><span class="line">footballTeam.winningPercent()</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 协议聚合<br>在方法的参数中聚合多个协议为传入条件<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prizable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isPrizable</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法表示实例必须同时实现了CustomStringConvertible和Prizable两个协议才能传入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">award</span><span class="params">(one: CustomStringConvertible &amp; Prizable)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> one.isPrizable()&#123;</span><br><span class="line">        <span class="built_in">print</span>(one)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Congratulation! You won a prize!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(one)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"You can not have the prize!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>: <span class="title">CustomStringConvertible</span>, <span class="title">Prizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(score: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.score = score</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"score = \(score)"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isPrizable</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score &gt; <span class="number">60</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">award(one: <span class="type">Student</span>(score: <span class="number">80</span>))</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 泛型约束<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入数组，找出最大值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topOne</span>&lt;T: Comparable&gt;<span class="params">(seq:[T])</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">    <span class="built_in">assert</span>(seq.<span class="built_in">count</span> &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> seq.<span class="built_in">reduce</span>(seq[<span class="number">0</span>]) &#123; <span class="built_in">max</span>($<span class="number">0</span>, $<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">topOne(seq: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure></p><p><strong>5.</strong> 创建自己的委托模式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TurnBaseGameDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameStart</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playMove</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameEnd</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameOver</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回合制游戏</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TurnBasedGame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> turn: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了游戏的逻辑，但是具体是什么游戏不知道，委托出去别人实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SinglePlayerTurnBasedGame</span>: <span class="title">TurnBasedGame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> delegate: <span class="type">TurnBaseGameDelegate</span>!</span><br><span class="line">    <span class="keyword">var</span> turn = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">play</span><span class="params">()</span></span> &#123;</span><br><span class="line">        delegate.gameStart()</span><br><span class="line">        <span class="keyword">while</span> !delegate.gameOver() &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"ROUND"</span>, turn, <span class="string">":"</span>)</span><br><span class="line">            delegate.playMove()</span><br><span class="line">            turn += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        delegate.gameEnd()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了委托的协议</span></span><br><span class="line"><span class="comment">// 掷骰子游戏</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RollNumberGame</span>: <span class="title">SinglePlayerTurnBasedGame</span>, <span class="title">TurnBaseGameDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        delegate = <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        turn = <span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to Roll Number Game."</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Try to use least turn to make total 100 scores!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playMove</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> rollNumber = <span class="type">Int</span>(arc4random() % <span class="number">6</span>) + <span class="number">1</span></span><br><span class="line">        score += rollNumber</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"You rolled a"</span>, rollNumber, <span class="string">"! The score is"</span>, score, <span class="string">"now!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameEnd</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Congratulation! You win the game in"</span>, turn, <span class="string">"ROUND!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameOver</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score &gt;= <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rollingNumber = <span class="type">RollNumberGame</span>()</span><br><span class="line">rollingNumber.play()</span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 可选的协议方法<br>可选方法需要用@objc标记，实现的实体可实现，可不实现，用的时候当做可选类型来用<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">TurnBaseGameDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameStart</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">playMove</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameEnd</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">gameOver</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">turnStart</span><span class="params">()</span></span></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">turnEnd</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="错误处理">错误处理<a href="post/swift-study-note#错误处理"></a></h2><p><strong>1.</strong> 强制退出程序<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">assert</span>(<span class="number">1</span>&lt;<span class="number">0</span>, <span class="string">"Error msg"</span>) <span class="comment">// 只在测试阶段才有效</span></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Assertion failed: Error msg: file LearnError.playground, line 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="built_in">assertionFailure</span>()</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//Fatal error: file LearnError.playground, line 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="built_in">assertionFailure</span>(<span class="string">"Error msg"</span>)</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//Fatal error: Error msg: file LearnError.playground, line 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================</span></span><br><span class="line"><span class="built_in">precondition</span>(<span class="number">1</span>&gt;<span class="number">0</span>) <span class="comment">// 满足条件也会退出</span></span><br><span class="line"><span class="built_in">precondition</span>(<span class="number">1</span>&gt;<span class="number">0</span>, <span class="string">"Error"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">fatalError</span>(<span class="string">"Error"</span>) <span class="comment">// 严重的错误</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 错误处理<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VendingMachine</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">enum</span> <span class="title">ItemType</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">Water</span></span><br><span class="line">            <span class="keyword">case</span> <span class="type">Cola</span></span><br><span class="line">            <span class="keyword">case</span> <span class="type">Juice</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> type: <span class="type">ItemType</span></span><br><span class="line">        <span class="keyword">let</span> price: <span class="type">Int</span></span><br><span class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ItemError</span>: <span class="title">Error</span>, <span class="title">CustomStringConvertible</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">NoSuchItem</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">NotEnoughMoney</span>(<span class="type">Int</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">OutOfStock</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .<span class="type">NoSuchItem</span>:                 <span class="keyword">return</span> <span class="string">"Not Such Item"</span></span><br><span class="line">            <span class="keyword">case</span> .<span class="type">NotEnoughMoney</span>(<span class="keyword">let</span> price) : <span class="keyword">return</span> <span class="string">"Not Enough Money. \(price) Yuan needed."</span></span><br><span class="line">            <span class="keyword">case</span> .<span class="type">OutOfStock</span>:                 <span class="keyword">return</span> <span class="string">"Out of Stock"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> items = [<span class="string">"MIneral Water"</span>: <span class="type">Item</span>(type: .<span class="type">Water</span>, price: <span class="number">2</span>, <span class="built_in">count</span>: <span class="number">10</span>),</span><br><span class="line">                         <span class="string">"Coca Cola"</span>: <span class="type">Item</span>(type: .<span class="type">Cola</span>, price: <span class="number">3</span>, <span class="built_in">count</span>: <span class="number">5</span>),</span><br><span class="line">                         <span class="string">"Orange Juice"</span>: <span class="type">Item</span>(type: .<span class="type">Juice</span>, price: <span class="number">5</span>, <span class="built_in">count</span>: <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">vend</span><span class="params">(itemName: String, money: Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> item = items[itemName] <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">ItemError</span>.<span class="type">NoSuchItem</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> money &gt;= item.price <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">ItemError</span>.<span class="type">NotEnoughMoney</span>(item.price)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> item.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="type">ItemError</span>.<span class="type">OutOfStock</span></span><br><span class="line">        &#125;</span><br><span class="line">        items[itemName]!.<span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> money - item.price</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">display</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Want something to drink?"</span>)</span><br><span class="line">        <span class="keyword">for</span> itemName <span class="keyword">in</span> items.keys &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"*"</span>, itemName)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"==========================="</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> machine = <span class="type">VendingMachine</span>()</span><br><span class="line">machine.display()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pocketMoney = <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可能抛出异常，但不管不顾，抛出异常后直接崩溃</span></span><br><span class="line">pocketMoney = <span class="keyword">try</span>! machine.vend(itemName: <span class="string">"Coca Cola"</span>, money: pocketMoney)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果抛出异常，则得到一个nil</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">try</span>? machine.vend(itemName: <span class="string">"Coca Cola"</span>, money: pocketMoney)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异常处理，如果抛出异常则进入对应的异常处理，如果都没有捕获到，则进入最后一个处理</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    pocketMoney = <span class="keyword">try</span> machine.vend(itemName: <span class="string">"Coca Cola"</span>, money: pocketMoney)</span><br><span class="line">    <span class="built_in">print</span>(pocketMoney,<span class="string">"Yuan left"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">VendingMachine</span>.<span class="type">ItemError</span>.<span class="type">NoSuchItem</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No Such Item"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">VendingMachine</span>.<span class="type">ItemError</span>.<span class="type">NotEnoughMoney</span>(<span class="keyword">let</span> price)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Not Enough Money."</span> , price , <span class="string">"Yuan needed."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="type">VendingMachine</span>.<span class="type">ItemError</span>.<span class="type">OutOfStock</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Out of Stock"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Error occured during vending."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获异常，并得到异常实例</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    pocketMoney = <span class="keyword">try</span> machine.vend(itemName: <span class="string">"Coca Cola"</span>, money: pocketMoney)</span><br><span class="line">    <span class="built_in">print</span>(pocketMoney,<span class="string">"Yuan left"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">VendingMachine</span>.<span class="type">ItemError</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Error occured during vending."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> defer<br>相当于java中的fanally，用于抛出异常或没有抛出异常都需要执行的语句；<br>使用方式：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">vend</span><span class="params">(itemName itemName: String, money: Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span>&#123;</span><br><span class="line">    <span class="comment">// 和代码平级</span></span><br><span class="line">    <span class="keyword">defer</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Have a nice day"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> item = items[itemName] <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">VendingMachine</span>.<span class="type">ItemError</span>.<span class="type">NoSuchItem</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有多个defer，则会倒叙执行</span></span><br><span class="line">    <span class="comment">// 如果前方就抛出异常，则该局不会执行</span></span><br><span class="line">    <span class="keyword">defer</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Thank you"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> money - item.price</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="内存管理">内存管理<a href="post/swift-study-note#内存管理"></a></h2><p><strong>1.</strong> 析构函数，实例销毁前在这里做一些处理。由于内存自动销毁实例用的情况比较少<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"init..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"doing something"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"person is leaving!!!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person: <span class="type">Person</span>? = <span class="type">Person</span>()</span><br><span class="line"><span class="comment">// 当赋值为nil后，实例会被销毁</span></span><br><span class="line">person = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当实例超出作用域后，实例会被销毁</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inTheShop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"======"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Welcome"</span>)</span><br><span class="line">    <span class="keyword">let</span> person: <span class="type">Person</span> = <span class="type">Person</span>()</span><br><span class="line">    person.doSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inTheShop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">//init...</span></span><br><span class="line"><span class="comment">//person is leaving!!!</span></span><br><span class="line"><span class="comment">//======</span></span><br><span class="line"><span class="comment">//Welcome</span></span><br><span class="line"><span class="comment">//init...</span></span><br><span class="line"><span class="comment">//doing something</span></span><br><span class="line"><span class="comment">//person is leaving!!!</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 引用计数<br>当引用实例的变量为0的时候，那么就会被释放；<br>ARC：Automatic Reference Count<br><strong>3.</strong> 强引用循环和weak<br>weak必须是一个可选型的变量<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> apartment: <span class="type">Apartment</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person is initialized"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Person is being deinitialized!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apartment</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弱引用必须是可选型</span></span><br><span class="line">    <span class="comment">// weak必须是var</span></span><br><span class="line">    <span class="comment">// 当弱引用的实例被销毁的时候，tenant会被赋值为nil</span></span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> tenant: <span class="type">Person</span>?</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Apartment is initialized!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Apartment is being deinitialized!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> liuyubobobo: <span class="type">Person</span>? = <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">var</span> imoocApartment: <span class="type">Apartment</span>? = <span class="type">Apartment</span>()</span><br><span class="line">liuyubobobo!.apartment = imoocApartment</span><br><span class="line">imoocApartment!.tenant = liuyubobobo</span><br><span class="line"></span><br><span class="line">liuyubobobo = <span class="literal">nil</span></span><br><span class="line">imoocApartment?.tenant <span class="comment">//nil</span></span><br><span class="line">imoocApartment = <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 两种顺序内存都能够正确释放</span></span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> unowned<br>和上面一样也是弱引用，区别在于它只能修饰常量let，不能是可选的；<br>添加了unowned的实例最好在unowned引用的对象之前销毁，因为如果不这样访问unowned常量时会抛出异常<br><strong>5.</strong> 强引用循环<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">//let capital: City</span></span><br><span class="line">    <span class="keyword">var</span> capital: <span class="type">City</span>! <span class="comment">// 由于定义成这种隐式的可选，表示占时不会赋值，但肯定会被赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(countryName: <span class="type">String</span>, capitalName: <span class="type">String</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.name = countryName</span><br><span class="line">        <span class="comment">//-------两段构造从此分割-------</span></span><br><span class="line">        <span class="keyword">self</span>.capital = <span class="type">City</span>(cityName: capitalName, country: <span class="keyword">self</span>) <span class="comment">// 由于占时不用赋值，所以到了第二段构造，于是可以使用self</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Country"</span>, name, <span class="string">"is intialized."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Country"</span>,name,<span class="string">"is being deinitialized!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">unowned</span> <span class="keyword">let</span> country: <span class="type">Country</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(cityName: <span class="type">String</span>, country: <span class="type">Country</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.name = cityName</span><br><span class="line">        <span class="keyword">self</span>.country = country</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"City"</span>, name, <span class="string">"is intialized."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"City"</span>,name,<span class="string">"is being deinitialized!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> china: <span class="type">Country</span>? = <span class="type">Country</span>(countryName: <span class="string">"China"</span>, capitalName: <span class="string">"Beijing"</span>)</span><br><span class="line">china = <span class="literal">nil</span></span><br></pre></td></tr></table></figure></p><p><strong>6.</strong> 闭包中的强引用循环<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartAirConditioner</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temperature: <span class="type">Int</span> = <span class="number">26</span></span><br><span class="line">    <span class="keyword">var</span> temperatureChange: ((<span class="type">Int</span>) -&gt; ())!</span><br><span class="line">    <span class="keyword">init</span>()&#123;</span><br><span class="line">        temperatureChange = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>]newTemperature <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> `<span class="keyword">self</span>` = <span class="keyword">self</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(newTemperature - <span class="keyword">self</span>.temperature) &gt;= <span class="number">10</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"It's not healthy to do it!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">self</span>.temperature = newTemperature</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"New temperature \(newTemperature) is set!"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Smart Air-conditioner is being deinitialized!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> airCon: <span class="type">SmartAirConditioner</span>? = <span class="type">SmartAirConditioner</span>()</span><br><span class="line">airCon?.temperature</span><br><span class="line">airCon?.temperatureChange(<span class="number">100</span>)</span><br><span class="line">airCon?.temperatureChange(<span class="number">24</span>)</span><br><span class="line">airCon = <span class="literal">nil</span></span><br></pre></td></tr></table></figure></p><h2 id="类型检查和类型转换">类型检查和类型转换<a href="post/swift-study-note#类型检查和类型转换"></a></h2><p><strong>1.</strong> 类型检查<code>is</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person: <span class="type">Person</span> = <span class="type">Student</span>()</span><br><span class="line"></span><br><span class="line">person <span class="keyword">is</span> <span class="type">Student</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><strong>2.</strong> 类型转换<code>as</code><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定类型（失败有风险）</span></span><br><span class="line"><span class="keyword">let</span> stu1 = person <span class="keyword">as</span>! <span class="type">Student</span></span><br><span class="line"><span class="comment">// 可选类型（失败为nil）</span></span><br><span class="line"><span class="keyword">let</span> stu2 = person <span class="keyword">as</span>? <span class="type">Student</span></span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 可以用在协议上<br><strong>4.</strong> NSObject,AnyObject和Any<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>)&#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var objects: NSArray = [</span></span><br><span class="line"><span class="comment">//    CGFloat(3.1415926),</span></span><br><span class="line"><span class="comment">//    "imooc",</span></span><br><span class="line"><span class="comment">//    UIColor.blueColor(),</span></span><br><span class="line"><span class="comment">//    NSDate(),</span></span><br><span class="line"><span class="comment">//    Int(32),</span></span><br><span class="line"><span class="comment">//    Array&lt;Int&gt;([1,2,3])</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">//var objects = [</span></span><br><span class="line"><span class="comment">//    CGFloat(3.1415926),</span></span><br><span class="line"><span class="comment">//    "imooc",</span></span><br><span class="line"><span class="comment">//    UIColor.blueColor(),</span></span><br><span class="line"><span class="comment">//    NSDate(),</span></span><br><span class="line"><span class="comment">//    Int(32),</span></span><br><span class="line"><span class="comment">//    Array&lt;Int&gt;([1,2,3]),</span></span><br><span class="line"><span class="comment">//    Person(name: "liuyubobobo")</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// a 为AnyObject</span></span><br><span class="line"><span class="comment">//let a = objects[0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//var objects: [AnyObject] = [</span></span><br><span class="line"><span class="comment">//    CGFloat(3.1415926),</span></span><br><span class="line"><span class="comment">//    "imooc",</span></span><br><span class="line"><span class="comment">//    UIColor.blueColor(),</span></span><br><span class="line"><span class="comment">//    NSDate(),</span></span><br><span class="line"><span class="comment">//    Int(32),</span></span><br><span class="line"><span class="comment">//    Array&lt;Int&gt;([1,2,3]),</span></span><br><span class="line"><span class="comment">//    Person(name: "liuyubobobo")</span></span><br><span class="line"><span class="comment">//]</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//objects.append( &#123; (a:Int) -&gt; Int in</span></span><br><span class="line"><span class="comment">//    return a*a&#125; )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objects: [<span class="type">Any</span>] = [</span><br><span class="line">    <span class="type">CGFloat</span>(<span class="number">3.1415926</span>),</span><br><span class="line">    <span class="string">"imooc"</span>,</span><br><span class="line">    <span class="comment">//swift 2: UIColor.blueColor(),</span></span><br><span class="line">    <span class="comment">//swift3中，颜色从“xxxColor()”变成了"xxx"。直接调用UIColor.xxx即可</span></span><br><span class="line">    <span class="type">UIColor</span>.blue,                <span class="comment">//swift 3</span></span><br><span class="line">    <span class="type">NSDate</span>(),</span><br><span class="line">    <span class="type">Int</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]),</span><br><span class="line">    <span class="type">Person</span>(name: <span class="string">"liuyubobobo"</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">objects.append( &#123; (a:<span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> a*a&#125; )</span><br></pre></td></tr></table></figure></p><h2 id="一些注意事项">一些注意事项<a href="post/swift-study-note#一些注意事项"></a></h2><p><strong>1.</strong> 变量可以用中文，支持Unicode字符，并且可以用表情<br><strong>2.</strong> swift没有 <code>++</code> <code>--</code> 运算<br><strong>3.</strong> 类型都需要显示的自己去转换<br><strong>4.</strong> Array、Set、Dictionary、String等结构体都是值类型的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些swift的基本特性，以便使用的时候方便查阅。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Swift" scheme="https://blog.xujiaji.com/categories/Swift/"/>
    
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习" scheme="https://blog.xujiaji.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Swift" scheme="https://blog.xujiaji.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2 的深入分析与使用</title>
    <link href="https://blog.xujiaji.com/post/learn-dagger/index.html"/>
    <id>https://blog.xujiaji.com/post/learn-dagger/index.html</id>
    <published>2018-06-26T16:00:00.000Z</published>
    <updated>2019-04-08T06:55:53.838Z</updated>
    
    <content type="html"><![CDATA[<div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/main-mind.png" alt="脑图" data-zoomable=""></p></div><h1 id="Dagger2-的深入分析与使用">Dagger2 的深入分析与使用<a href="post/learn-dagger#Dagger2-的深入分析与使用"></a></h1><p>听闻Dagger大名很久，但一直没有去学，直到不得不学 〒▽〒。<br>这个框架开始的时不是很好理解，看了一些文章还是没有理解到精髓，似懂非懂，于是自己做了些简单的测试代码观察Dagger注解的作用。将学习和理解的过程分享出来，希望能帮到一些学些Dagger的朋友，同时我也巩固总结一下。</p><p>本篇文章不讲，Dagger哪里好哪里好！只讲怎么用的和一些原理！</p><h2 id="Dagger是什么？">Dagger是什么？<a href="post/learn-dagger#Dagger是什么？"></a></h2><ul><li><p>Dagger是一个依赖注入框架（Dependency injection），简称DI。假如有A和B两个对象（B相当于是DI），A中并没有对自己内部的成员进行初始化，它的成员初始化全部是B类注入进来。</p></li><li><p>大部分注入框架是基于反射实现的，Dagger旨在解决许多困扰基于反射的解决方案的开发和性能问题，Dagger的依赖注入是通过java代码来实现的。相当于你自己可以用java手写依赖注入代码，但这样的话就会更大的工作量，于是Dagger通过注解等帮我们自动生成相关的依赖注入逻辑代码。</p></li><li><p>额…，有点一头雾水的感觉吧！如果大家想知道详细概念的话，可以去搜索一下啦！</p></li><li><p>在下面所讲的都是以实际的代码操作为主，来去观察结果，代码本篇不会涉及Android 页面，只想通过简单的代码来理清楚Dagger生成DI的逻辑。</p></li></ul><h2 id="需要添加的依赖">需要添加的依赖<a href="post/learn-dagger#需要添加的依赖"></a></h2><p>官方Dagger2项目地址：<a href="https://github.com/google/dagger" target="_blank" rel="noopener">https://github.com/google/dagger</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">'com.google.dagger:dagger:2.15'</span></span><br><span class="line">    annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.15'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解使用">注解使用<a href="post/learn-dagger#注解使用"></a></h2><p>欢迎来到本篇最精彩的地方！参考自<a href="https://google.github.io/dagger/users-guide" target="_blank" rel="noopener">官方的使用指南</a></p><blockquote><p>符号含义参考表：</p></blockquote><div class="article-bounded"><div class="article-table"><table><thead><tr><th>符号══▶</th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/v-private.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/v-m-private.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/v-protected.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/v-m-protected.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611140949.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141014.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141038.png" alt=""></th><th><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141100.png" alt=""></th></tr></thead><tbody><tr><td><strong>含义</strong>══▶</td><td>private变量</td><td>private方法</td><td>protected变量</td><td>protected方法</td><td>包私有 变量</td><td>包私有方法</td><td>public 变量</td><td>public 方法</td></tr></tbody></table></div></div><div class="article-bounded"><div class="article-table"><table><thead><tr><th>符号</th><th>含义</th><th>简单例子</th></tr></thead><tbody><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141212.png" alt=""></td><td>继承</td><td><code>class A{}</code><br><br><code>class B extend A{}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141236.png" alt=""></td><td>实现接口</td><td><code>interface I{}</code><br><br><code>class A implements I{}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141305.png" alt=""></td><td>依赖</td><td><code>class A{}</code><br><br><code>class B{</code><br>　　<code>void fun(A c) {}</code><br><br><code>}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141339.png" alt=""></td><td>并联</td><td><code>class A{}</code><br><br><code>class B{</code><br><br>　　<code>A a;</code><br><br><code>}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141403.png" alt=""></td><td>class</td><td><code>class A{}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141425.png" alt=""></td><td>abstract</td><td><code>abstract class A{}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141449.png" alt=""></td><td>interface</td><td><code>interface A{}</code></td></tr><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141508.png" alt=""></td><td>enum</td><td><code>enum A{}</code></td></tr><tr><td><code>...</code></td><td>省略代码</td><td><code>class A {...}</code></td></tr></tbody></table></div></div><h3 id="咖啡机">咖啡机<a href="post/learn-dagger#咖啡机"></a></h3><p>用咖啡机的例子来演示，首先我们来看一下主要的几个类，下面是简单咖啡机UML关系图！（查考自Dagger2项目example）</p><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611141527.png" alt="咖啡机UML" data-zoomable=""></p></div><blockquote><p>正常情况下，我们大概会写成这样：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义泵接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义加热器接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isHot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电子加热器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricHeater</span> <span class="keyword">implements</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> heating;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"~~~~heating~~~~"</span>);</span><br><span class="line">        <span class="keyword">this</span>.heating = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heating = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heating;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热虹吸</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Heater heater;</span><br><span class="line">    Thermosiphon(Heater heater) &#123;</span><br><span class="line">        <span class="keyword">this</span>.heater = heater;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heater.isHot()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"=&gt;=&gt; 抽水 =&gt;=&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span> </span>&#123;</span><br><span class="line">    Heater heater;</span><br><span class="line">    Pump pump;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoffeeMaker</span><span class="params">(Heater heater, Pump pump)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heater = heater;</span><br><span class="line">        <span class="keyword">this</span>.pump = pump;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">        System.out.println(<span class="string">"[_]P coffee! [_]P"</span>);</span><br><span class="line">        heater.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出咖啡测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Heater heater = <span class="keyword">new</span> ElectricHeater();<span class="comment">//实例化加热器</span></span><br><span class="line">        Pump pump = <span class="keyword">new</span> Thermosiphon(heater);<span class="comment">//实例化泵</span></span><br><span class="line">        CoffeeMaker coffeeMaker = <span class="keyword">new</span> CoffeeMaker(heater, pump);<span class="comment">//实例化咖啡机</span></span><br><span class="line">        coffeeMaker.brew();<span class="comment">//出咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Inject">@Inject<a href="post/learn-dagger#Inject"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/tree/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee2_test_inject" target="_blank" rel="noopener">测试文件位置</a></strong></p><ol><li><p>其名：注入，@Inject的用法是标记成员变量、构造方法或成员方法。</p></li><li><p>标记了注解<code>@Inject</code>的成员变量或方法，Dagger会自动为其提供实例；标记了<code>@Inject</code>的构造方法表示Dagger将会自动实例化该类提供给其他需要注入的类。</p></li><li><p>像这这样一个需要注入的成员，一个提供该对象就这样对应起来了。但是还差一个将它们联系起来的东西，它叫<code>Componnet</code>。下面的例子将会提前用到<code>@Component</code>注解您可以先不去深入理解，占时理解为Dagger必要写的的且是注入的关系连接纽带。</p></li></ol><blockquote><p>这里在构造方法上加<code>@Inject</code>可以理解为：提供<code>new ElectricHeater()</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电子加热器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricHeater</span> <span class="keyword">implements</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElectricHeater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Component</code>起纽带作用，用接口或抽象类来定义。<code>Thermosiphon getPump()</code>表示其他地方需要提供<code>new Thermosiphon()</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PumpComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">Thermosiphon <span class="title">getPump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Inject</code>标记在成员变量上，表示其他地方需要提供<code>ElectricHeater</code>对象，也就是上上面代码中<code>@Inject</code>标记在构造方法的作用。<code>@Inject</code>标记在构造方法上，可以看做<code>new Thermosiphon()</code>，也就是上面接口中需要的对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热虹吸</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    ElectricHeater heater;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thermosiphon</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heater.isHot()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"=&gt;=&gt; 抽水 =&gt;=&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们直接创建一个CoffeeApp类中进行测试，<code>DaggerPumpComponent</code>是通过apt自动生成的类（需要在Android studio中点击：Build -&gt; Make Module）。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 全写：Thermosiphon pump = DaggerPumpComponent.builder().build().getPump();</span></span><br><span class="line">        Thermosiphon pump = DaggerPumpComponent.create().getPump();</span><br><span class="line">        pump.heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>CoffeeApp</code>运行结果</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~~~heating~~~~</span><br><span class="line">=&gt;=&gt; 抽水 =&gt;=&gt;</span><br></pre></td></tr></table></figure><blockquote><p>测试一下将<code>@Inject</code>标记在方法上，修改<code>Thermosiphon</code>类，如下所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热虹吸</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">funTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"funTest()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">funTest</span><span class="params">(ElectricHeater heater)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"heater: "</span> + <span class="keyword">this</span>.heater.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"funTest(): "</span> + heater.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>CoffeeApp</code>运行结果</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">funTest()</span><br><span class="line">heater: <span class="number">692404036</span></span><br><span class="line">funTest(): <span class="number">1554874502</span></span><br><span class="line">~~~~heating~~~~</span><br><span class="line">=&gt;=&gt; 抽水 =&gt;=&gt;</span><br></pre></td></tr></table></figure><blockquote><p>一些结论</p></blockquote><ol><li>通过<code>DaggerPumpComponent.create().getPump();</code>既可以得到<code>Thermosiphon</code>对象。</li><li>我们看到在<code>Thermosiphon</code>中<code>heater</code>是以<code>ElectricHeater</code>来接收的，并没有向上转型为接口<code>Heater</code>引用，<code>@Inject</code>标记需要是确切的类型。等我们学习了下面<code>@Provides丶@Module</code>部分，我们就能间接的用<code>Heater</code>接口来接收。</li><li>通过上面例子我们明显看到，我们并没有new 对象，然而却有<code>ElectricHeater</code>和<code>Thermosiphon</code>被实例化，这就是Dagger生成java代码中帮我们进行了实例化的操作。</li><li>注意<code>@Inject</code>标记的成员变量、方法和构造方法不能以<code>private</code>修饰。因为如果我们用private，Dagger以java代码注入，自然不能帮我们注入对象，会报错!你可以试试看哦！(￣▽￣)~*</li><li>也许你想问<code>DaggerPumpComponent</code>是哪来的？用<code>@Component</code>标记的接口会生成一个以<code>“Dagger + 接口名”</code>的类。</li><li>经测试，如果将成员变量上的<code>@Inject</code>去掉，不会报错，只是没有引用的对象，变量为null。如果成员变量上标记了<code>@Inject</code>，而没有对应的注入实例，则会编译错误。</li><li>Dagger生成代码的位置：<code>项目目录 -&gt; app -&gt; build -&gt; generated -&gt; source -&gt; apt</code></li><li>如果我们将<code>@Inject</code>标记在方法上，如果有参，Dagger提供该实例，然后自动调用该方法；如果无参则直接调用；如果有参没有对应的实例提供，则报错。</li></ol><blockquote><p><em>接下来将从Dagger生成的注入代码上进行分析（这部分跳过也可以滴！(｀・ω・´)）</em></p><p>这是上面整体的UML关系图，“绿色”的是Dagger自动生成的代码。</p></blockquote><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/inject-uml.png" alt="inject uml"><br><strong>1.</strong> 通过我们对Dagger的使用，它为我们生成了4个类。<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/build-class.png" alt="生成的类"><br><strong>2.</strong> 他们这样对应：</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>PumpComponent</td><td>—–&gt;</td><td>DaggerPumpComponent</td></tr><tr><td>@Inject public ElectricHeater() { }</td><td>—–&gt;</td><td>ElectricHeater_Factory</td></tr><tr><td>@Inject public Thermosiphon() { }</td><td>—–&gt;</td><td>Thermosiphon_Factory</td></tr><tr><td>@Inject ElectricHeater heater;</td><td>—–&gt;</td><td>Thermosiphon_MembersInjector</td></tr></tbody></table></div></div><p>通过观察我们可以得出这些结论：</p><ul><li>①<code>PumpComponent</code>接口生成的类的名字以：<code>Dagger</code> + <code>接口名</code>。<em>（我们需要使用生成的这个类，进行Dagger初始化的操作）</em></li><li>②<code>@Inject</code>标记了构造方法生成类名以：<code>构造名</code> + <code>_Factory</code>，的命名生一个工厂类。<em>（该工厂类将用来创建对应的实例）</em></li><li>③类中有<code>@Inject</code>标记成员变量或方法的类，会生成一个以：<code>该类名</code> + <code>_MembersInjector</code>，的命名生成一个注入类。<em>（该类实现了将实例传递到用<code>@Inject</code>标记的成员变量或方法）</em></li></ul><p><strong>3.</strong> 来看看<code>ElectricHeater</code>的工厂类<code>ElectricHeater_Factory</code>（这是一个工厂设计模式中的一种实现方式），实现一个工厂接口<code>Factory&lt;T&gt;</code>(<code>Factory&lt;T&gt;</code>又继承<code>Provider&lt;T&gt;</code>接口)。通过<code>get()</code>获取一个ElectricHeater实例，通过<code>create()</code>获取<code>ElectricHeater_Factory</code>实例（这个类并未被使用，当你看到下面介绍<code>DaggerPumpComponent</code>就明白了）<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/ElectricHeater_Factory.png" alt="ElectricHeater_Factory"><br><strong>4.</strong> 接下来看看<code>Thermosiphon_MembersInjector</code>，这个类实现了为<code>@Inject</code>泛型标记的成员变量或方法传递值的操作。大家看<code>injectHeater</code>方法，这里就是为<code>Thermosiphon</code>的成员变<code>heater</code>添加依赖的地方!<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/Thermosiphon_MembersInjector.png" alt="Thermosiphon_MembersInjector.java"><br><strong>5.</strong> 再看看<code>Thermosiphon_Factory</code>，这个类比上一个<code>ElectricHeater_Factory</code>复杂一点。因为它在实例化<code>Thermosiphon</code>时，需要注入<code>ElectricHeater</code>对象。这比<code>ElectricHeater_Factory</code>多了个方法并且实例该工厂类时必须传入<code>ElectricHeater</code>的工厂类实例。</p><ul><li>构造参数是<code>ElectricHeater</code>的工厂，是为了通过工厂类获得<code>ElectricHeater</code>对象；</li><li>工厂方法<code>get()</code>中创建实例的同时，通过<code>Thermosiphon_MembersInjector</code>的静态方法(<code>injectHeater</code>)向<code>Thermosiphon</code>注入<code>ElectricHeater</code>对象，然后得到最终的<code>Thermosiphon</code>实例；</li><li>最后一个静态方法<code>newThermosiphon()</code>返回一个没有注入<code>ElectricHeater</code>实例的<code>Thermosiphon</code>对象。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142100.png" alt=""></li></ul><p><strong>6.</strong> 最后看<code>DaggerPumpComponent</code>这个类，主要看<code>getPump()</code>、<code>injectThermosiphon</code>和<code>Builder</code>类</p><ul><li><code>getPump()</code>是我们在接口中定义的方法，在这里实现接口方法，通过调用<code>injectThermosiphon</code>方法并传入一个没有注入<code>ElectricHeater</code>实例的<code>Thermosiphon</code>，得到最终的<code>Thermosiphon</code></li><li><code>injectThermosiphon</code>方法中得到上面传进来的<code>Thermosiphon</code>，然后通过<code>Thermosiphon_MembersInjector</code>注入<code>ElectricHeater</code>实例。看到这里我们会发现第“3.”中介绍的<code>ElectricHeater_Factory</code>居然没有用到，这里直接就new了（这也是上面提到的并没有使用<code>ElectricHeater_Factory</code>）。</li><li><code>Builder</code>就是用来创建<code>DaggerPumpComponent</code>的类，学到后面，这个类会根据需求变得复杂！<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142127.png" alt="DaggerPumpComponent.java"></li></ul><h3 id="Provides丶-Module丶-Binds">@Provides丶@Module丶@Binds<a href="post/learn-dagger#Provides丶-Module丶-Binds"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee3_test_provides_module" target="_blank" rel="noopener">测试文件位置</a></strong></p><blockquote><p>由于<code>@Inject</code>注解无法做到以下几点：</p></blockquote><ul><li>接口类型无法做为接收类型</li><li>第三方类无法添加<code>@Inject</code>注解（因为这个类不是自己掌控的）</li></ul><p>这种情况下我们可以用<code>@Provides</code>注释去满足依赖，方法的返回类型确定了它提供给谁的依赖。</p><blockquote><p>使用</p></blockquote><ol><li>创建一个类作用是存放提供实例的方法，约定该类以<code>Module</code>结尾（便于统一分辨，就像我们安卓Activity命名以Activity结尾）</li><li>在类名上标记<code>@Module</code>注解</li><li>使用静态或普通有返回的方法来提供实例<ul><li>在这些方法前需要标记<code>@Provides</code>注解</li><li>这些方法以<code>provide</code>开头，也是一种约定</li></ul></li></ol><blockquote><p>看下方这个<code>DripCoffeeModule</code>类，它提供了两个实例，并且它们的返回类型指向的是接口。也就是说有某个地方可能需要<code>Heater</code>和<code>Pump</code>的实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"provideHeater"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Pump <span class="title">providePump</span><span class="params">(Thermosiphon pump)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"providePump"</span>);</span><br><span class="line">        <span class="keyword">return</span> pump;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>@Component</code>注解中添加<code>DripCoffeeModule.class</code>，如果有多个可写为：<code>@Component(modules = {DripCoffeeModule.class, ....class,....class})</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = DripCoffeeModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Pump <span class="title">getPump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电子加热器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricHeater</span> <span class="keyword">implements</span> <span class="title">Heater</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElectricHeater</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ElectricHeater()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 热虹吸</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Heater heater;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thermosiphon</span><span class="params">(Heater heater)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Thermosiphon() heater = "</span> + heater);</span><br><span class="line">        <span class="keyword">this</span>.heater = heater;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试类：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pump pump = DaggerCoffeeShop.create().getPump();</span><br><span class="line">        System.out.println(<span class="string">"pump = "</span> + pump);</span><br><span class="line">        pump.pump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CoffeeApp的输出结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provideHeater</span><br><span class="line">ElectricHeater()</span><br><span class="line">Thermosiphon() heater = com.example.jiaji.daggertest.coffee3.ElectricHeater@<span class="number">29453f</span>44</span><br><span class="line">providePump</span><br><span class="line">pump = com.example.jiaji.daggertest.coffee3.Thermosiphon@<span class="number">5</span>cad8086</span><br></pre></td></tr></table></figure><ul><li>首先，我们调用<code>DaggerCoffeeShop.create().getPump()</code>想要得到一个Pump对象，于是<code>DripCoffeeModule</code>中的<code>providePump</code>方法为我们提供一个Pump实例。</li><li>然后，我们看到<code>providePump</code>方法有参数<code>Thermosiphon</code>那么这个这个实例从哪来呢？我们在<code>Thermosiphon</code>的构造方法上标记<code>@Inject</code>就表示提供该对象了。</li><li>接下来，我们深入到<code>Thermosiphon</code>类又会发现，<code>Thermosiphon</code>类的构造方法要求提供<code>Heater</code>对象，那么问题来了Heater实例从哪来？您能想到！我们可以看到在<code>DripCoffeeModule</code>的<code>provideHeater</code>方法提供了该实例。</li><li>最后，我们可以得出来个容易理解的大概流程：<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143230.png" alt=""></li></ul><p><strong>我们需要注意，当<code>@Inject</code>提供了实例并且<code>Module</code>中也提供该实例的情况下，Dagger会优先<code>Module</code>中提供的实例。</strong></p><p><em>通过上面的例子，我们可以注意到：<code>@Inject</code>可以为<code>Module</code>方法的参数提供实例</em></p><blockquote><p>我们可以将Module中的方法分到多个Module中，只需要在<code>@Component</code>注释中添加一下，如下所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"provideHeater"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Pump <span class="title">providePump</span><span class="params">(Thermosiphon pump)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"providePump"</span>);</span><br><span class="line">        <span class="keyword">return</span> pump;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;DripCoffeeModule.class, DripCoffeeModule2.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Pump <span class="title">getPump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实还有种写法，意思是表示某一个Module包含另一个Module。最终效果一样的。如下所示：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Pump <span class="title">providePump</span><span class="params">(Thermosiphon pump)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"providePump"</span>);</span><br><span class="line">        <span class="keyword">return</span> pump;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Module</span>(includes = DripCoffeeModule2.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"provideHeater"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Component</span>(modules = DripCoffeeModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Pump <span class="title">getPump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Binds可以简化<code>DripCoffeeModule</code>中提供<code>Pump</code>实例的写法，效果是一样的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Binds</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pump <span class="title">bindPump</span><span class="params">(Thermosiphon pump)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;DripCoffeeModule.class, BModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>接下来是对Dagger生成的代码进行分析（这部分可以选择性跳过！(｀・ω・´)）</em></p><p>这是整体的UML关系图，“绿色”是自动生成的代码。(由于生成的<code>Thermosiphon_Factory</code>并没有被使用，于是就不放进来了。)</p></blockquote><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142208.png" alt=""><br><strong>1.</strong> 通过上面的三部分代码，Dagger也为我们生成了4个类。<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142229.png" alt="dagger生成的四个类"><br><strong>2.</strong> 他们这样对应：</p><div class="article-bounded"><div class="article-table"><table><tbody><tr><td>CoffeeShop</td><td>—–&gt;</td><td>DaggerCoffeeShop</td></tr><tr><td>@Provides static Heater provideHeater()</td><td>—–&gt;</td><td>DripCoffeeModule_ProvideHeaterFactory</td></tr><tr><td>@Provides static Pump providePump(Thermosiphon pump)</td><td>—–&gt;</td><td>DripCoffeeModule_ProvidePumpFactory</td></tr><tr><td>@Inject public Thermosiphon() { }</td><td>—–&gt;</td><td>Thermosiphon_Factory</td></tr></tbody></table></div></div><p>从名字上我们可以看出：<code>@Provides</code>标记的提供实例的方法对应生成了一个类名以：<code>所在类名</code> + <code>_</code> + <code>方法名(首字大写)</code> + <code>Factory</code>，命名生成一个对应的工厂类。</p><p><strong>3.</strong> 我们先来看看<code>Thermosiphon_Factory</code>这个没有被使用的类，如果您是从上面挨着看下来的，就一定明白，其他地方是直接<code>new Thermosiphon</code>，接着往下看您就会看到！</p><ul><li>这个类和上面生成的<code>Thermosiphon_Factory</code>有些不一样，因为之前<code>Thermosiphon</code>是无参构造，现在添加了<code>Heater</code>作为构造的参数（该实例在DripCoffeeModule提供）。</li><li>可以看到要实例化这个工厂类，必须要传入<code>Heater</code>的工厂类。然后在创建<code>Thermosiphon</code>实例时通过<code>Heater</code>工厂类创建一个<code>Heater</code>对象传入构造方法中。</li><li>并且它还添加了<code>一个newThermosiphon</code>的静态方法，允许传入<code>heater</code>对象来创建<code>Thermosiphon</code>。</li></ul><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142247.png" alt="Thermosiphon_Factory"><br><strong>4.</strong> 我们在来看<code>Heater</code>工厂类<code>DripCoffeeModule_ProvideHeaterFactory</code>，它相对比较简单点。</p><ul><li>可以看到在创建<code>Heater</code>实例时，直接通过<code>DripCoffeeModule.provideHeater()</code>调用我们定义的相对应的静态方法。</li><li>通过<code>Preconditions.checkNotNull</code>又检测了是否提供得有实例，没有将会报第二参数传入的错误信息。</li><li>工厂实例化是通过静态方法<code>create()</code>实例；静态方法<code>newThermosiphon</code>，可不创建工厂类的情况下，直接创建<code>Heater</code>实例。</li></ul><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142310.png" alt="DripCoffeeModule_ProvideHeaterFactory" data-zoomable=""></p></div><ul><li><p><code>DripCoffeeModule</code>中提供实例的方法不仅可以是静态方法！还可以是普通方法或抽象方法。那如果我们将<code>DripCoffeeModule</code>中的静态方法的static去掉改为普通方法生成的代码又是怎么样的呢？(<code>@Provides static Heater provideHeater()</code>改为<code>@Provides Heater provideHeater()</code>)看下图：</p><ul><li>可以看到<code>DripCoffeeModule_ProvideHeaterFactory</code>的创建须传入<code>DripCoffeeModule</code>实例，<code>get()</code>方法通过该实例获取<code>Heater</code>实例</li><li><p>创建<code>Heater</code>的静态方法<code>proxyProvideHeater</code>须传入<code>DripCoffeeModule</code>实例。</p><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142330.png" alt="DripCoffeeModule_ProvideHeaterFactory"></p></li></ul></li></ul><p><strong>5.</strong> 我们来看看<code>Pump</code>对应生成的工厂类：<code>DripCoffeeModule_ProvidePumpFactory</code></p><ul><li>在Module中这样定义：<code>@Provides static Pump providePump(Thermosiphon pump) { return pump; }</code></li><li>这个方法又必须提供<code>Thermosiphon</code>实例，因此<code>DripCoffeeModule_ProvidePumpFactory</code>的构造参数是<code>Thermosiphon</code>的工厂对象来提供该实例（<code>get()</code>方法中通过调用静态方法<code>providePump</code>得到Pump实例的时候需要该工厂类提供）</li><li><p>我们看到<code>proxyProvidePump</code>方法，也是可在不创建工厂类实例的情况下调用。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142349.png" alt=""></p></li><li><p>如果我们也把Module中的static修饰去掉又会发生什么样的变化呢？我猜您也应该能想到了！看下图：</p><ul><li>比4中去掉static多了划线的地方</li><li>也就是说当我们定义的方法是普通方法时，我们就必须要提供<code>Module</code>的实例<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142412.png" alt=""></li></ul></li></ul><p><strong>6.</strong> 最后，我们来看<code>DaggerCoffeeShop</code>是如何将这些东东组合在一起的。</p><ul><li>我们看到<code>getPump()</code>方法，它在接口<code>CoffeeShop</code>中定义，里面如何实现的呢？</li><li>它直接调用了上面<code>5</code>所讲到的静态方法<code>proxyProvidePump</code>来创建<code>Pump</code>实例，但是需要提供<code>Thermosiphon</code>实例作为参数。（如果是用的@Binds方式，则getPump()的实现为：  <code>public Pump getPump() { return getThermosiphon(); }</code>）</li><li><p>于是，它定义了方法<code>getThermosiphon()</code>来创建该实例。看到该方法了吗？里面是直接<code>new Thermosiphon</code>，这就是<code>Thermosiphon_Factory</code>没有用到的原因。创建<code>Thermosiphon</code>的构造参数<code>Heater</code>由<code>DripCoffeeModule_ProvideHeaterFactory</code>类名直接调用静态方法<code>proxyProvideHeater()</code>它又调用<code>DripCoffeeModule.provideHeater()</code>来提供。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142434.png" alt=""></p></li><li><p>接下来看到创建<code>DaggerCoffeeShop</code>的<code>Builder</code>静态内部类，这里面可要比我们上次生成的<code>DaggerPumpComponent</code>要多了一个方法，它出现的原因就是因为我们定义了Module类。</p><ul><li>这个方法的命名方式是将我们定义的Module类的类名开头小写来作为名字。</li><li>它的作用是我们可以自己创建Module，如果不自己创建，将会自动创建。</li><li>但为什么这里标记为弃用呢？那是因为我们Module中全是静态方法，完全不需要实例化，实例化也白搭！那我们来看看，如果将<code>DripCoffeeModule</code>中的方法改为普通方法是什么样的呢？<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142457.png" alt=""></li><li>看到了吧！如果build()方法中判断了我们已经调用<code>dripCoffeeModule</code>方法传进来Module实例，那么就不去实例化了。</li><li>还记得上面Module中我们去掉提供方法static后需要的Module实例吗？实例就是开始于这里的。</li><li><code>dripCoffeeModule</code>的调用方式就是：<code>DaggerCoffeeShop.builder().dripCoffeeModule(new DripCoffeeModule()).build();</code>（如果我们的<code>@Component</code>连接了多个<code>Module</code>那么就可以这样传入这么多个<code>Module</code>实例）</li><li><p>那么这个方法到底有什么神奇的作用呢？我们想想看，如果<code>Module</code>的构造方法需要传参，此时我们该怎么办呢？如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestModuleAttr</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestModuleAttr</span><span class="params">(String str)</span> </span>&#123; <span class="keyword">this</span>.str = str; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"TestModuleAttr&#123;"</span> + <span class="string">"str='"</span> + str + <span class="string">'\''</span> +<span class="string">'&#125;'</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DripCoffeeModule</span><span class="params">(String str)</span> </span>&#123; <span class="keyword">this</span>.str = str; &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Provides</span> <span class="function">String <span class="title">provideStr</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> str; &#125;</span><br><span class="line">    <span class="meta">@Provides</span> <span class="function">TestModuleAttr <span class="title">provideTestModuleAttr</span><span class="params">(String s)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> TestModuleAttr(s); &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span></span>&#123;</span><br><span class="line">    <span class="function">Pump <span class="title">getPump</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">TestModuleAttr <span class="title">getTestModuleAttr</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">                DaggerCoffeeShop</span><br><span class="line">                        .builder()</span><br><span class="line">                        .dripCoffeeModule(<span class="keyword">new</span> DripCoffeeModule(<span class="string">"Hello world"</span>))</span><br><span class="line">                        .build()</span><br><span class="line">                        .getTestModuleAttr());</span><br><span class="line"><span class="comment">//        Pump pump = DaggerCoffeeShop.create().getPump();</span></span><br><span class="line"><span class="comment">//        System.out.println("pump = " + pump);</span></span><br><span class="line"><span class="comment">//        pump.pump();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入结果：<code>TestModuleAttr{str=&#39;Hello world&#39;}</code></p></li><li>当我们想向提供的对象传递一些动态的东西时，就可以通过这种方式，当然你也不用向我这样绕了个圈子，这里只想说<code>Module</code>里面可以相互提供实例。这里可以直接<code>@Provides TestModuleAttr provideTestModuleAttr() { return new TestModuleAttr(str); }</code>搞定。</li><li>需要注意的是，如果<code>Module</code>实例是有参构造创建，我们必须自己实例化<code>Module</code>。否则则会抛出异常。原因，如下：<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142517.png" alt=""></li></ul></li></ul><h3 id="Component">@Component<a href="post/learn-dagger#Component"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee4_test_component" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>上面都涉及到了它，想必大家也有些熟悉了。ヾ(๑╹◡╹)ﾉ”</p><p>官方把这个定义叫做建立图表，它起到的作用是连接依赖关系，通过上面的分析，我们可以直观的看到在<code>DaggerXXX</code>(<code>@Component</code>修饰的类所对应生成的文件)类中，主要就是将各个工厂类和Module连接起来。</p><blockquote><p>如果我们像下面这样定义一个Component，Dagger将会为我们生成一个类：<code>DaggerFoo_Bar_BazComponent</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">BazComponent</span> </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Component</code>不仅可以装饰接口还可以是抽象类，比如上面的<code>CoffeeShop</code>接口可以改成这样：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeShop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pump <span class="title">getPump</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> TestModuleAttr <span class="title">getTestModuleAttr</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Component中定义的方法我们在对应生成的DaggerXXX实例调用得到对应实例，于是我们需要为其提供对应返回实例。</p><blockquote><p>接下来我们来通过模拟安卓中Activity的启动，该代码大概模拟了一下MVP。为了简单，MNActivity作为View层，我没有写MVP接口的M层。这里主要是想解释为什么在Compnent接口中需要定义一个<code>void inject(XXXActivity activity);</code>，看到别人这么写的！但我当时真心不知道这是啥意思！于是这里我想通过简单的代码去理解它。</p></blockquote><ol><li><p>模拟一个Activity，一般我们在Activity的<code>onCreate()</code>方法中是这样写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MNActivity</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    MNPresenter presenter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MNActivity hashCode = "</span> + hashCode());</span><br><span class="line">        DaggerTestComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .mNModule(<span class="keyword">new</span> MNModule(<span class="keyword">this</span>))</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println(presenter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Presenter层，在presenter中一般我们是引用的view的接口，这里我们直接引用activity。</p><ul><li><code>@Inject</code>标记构造，表明这里提供MNPresenter实例</li><li>我们看到有构造方法参数为<code>MNActivity</code>，表明需要实例化我们又需要为它提供<code>MNActivity</code>（我们通过Module提供）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MNPresenter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    MNActivity mnActivity;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    MNPresenter(MNActivity mnActivity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.mnActivity = mnActivity;</span><br><span class="line">        System.out.println(<span class="string">"MNPresenter mnActivity = "</span> + mnActivity.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实例提供部分类：Module</p><ul><li><code>MNModule</code>是有参构造，通过上面的学习，我们知道这种情况必须我们自己实例化Module</li><li>通过<code>provedesActivity</code>我们可以将传递进来的<code>MNActivity</code>实例，提供出去（这里提供给<code>MNPresenter</code>）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MNModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    MNActivity mnActivity;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MNModule</span><span class="params">(MNActivity mnActivity)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mnActivity = mnActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">MNActivity <span class="title">provedesActivity</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mnActivity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>组装纽带部分：Component</p><ul><li>inject方法返回值为void<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = MNModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestComponent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MNActivity me)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动Activity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MNActivity injectMe = <span class="keyword">new</span> MNActivity();</span><br><span class="line">        injectMe.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行Main的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MNActivity hashCode = <span class="number">21685669</span></span><br><span class="line">MNPresenter mnActivity = <span class="number">21685669</span></span><br><span class="line">com.example.jiaji.daggertest.coffee4.MNPresenter@<span class="number">61</span>bbe9ba</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>为什么这么神奇呢？居然就这样就将<code>MNPresenter</code>的实例注入到<code>MNActivity</code>了！<code>DaggerTestComponent</code>实现我们定义的<code>void inject(MNActivity me);</code>，然后在方法里进行了如这样的操作（简化后）：<code>me.presenter = new Presenter(...);</code></p></blockquote><blockquote><p>我们将<code>void inject(MNActivity me);</code>的实现代码和上面测试<code>@Inject</code>时定义的<code>Thermosiphon getPump();</code>的实现代码进行比较，来看看有何区别。</p></blockquote><ul><li>我们先来看<code>Thermosiphon getPump();</code>是如何实现的呢？重温一下，看下图：<ul><li>它首先通过<code>Thermosiphon_Factory.newThermosiphon()</code>直接<code>new Thermosiphon()</code>。</li><li>然后调用<code>injectThermosiphon</code>方法将实例化的<code>Thermosiphon</code>通过<code>Thermosiphon_MembersInjector.injectHeater</code>将一个<code>ElectricHeater</code>赋值到对应的成员变量。</li><li>最后将一个完成的<code>Thermosiphon</code>返回。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142542.png" alt="getPump() 实现"></li></ul></li><li>我们再来看<code>void inject(MNActivity me);</code>是如何实现的呢？看下图：<ul><li>这里<code>inject(MNActivity me)</code>的实现省略掉了创建<code>MNActivity</code>的过程，直接调用<code>injectMNActivity</code>进行注入。</li><li>为什么呢？因为当前<code>MNActivity</code>对象已经存在，只需要注入标有<code>@Inject</code>的成员变量就行了。</li><li>我们想想Android中打开一个Activity，他是通过系统去实例化的！我们既然在Activity实例之中，又何必去实例化它呢？对吧！<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142555.png" alt="inject方法的实现"></li></ul></li></ul><h3 id="将上面所学运用到一开始的咖啡机实现">将上面所学运用到一开始的咖啡机实现<a href="post/learn-dagger#将上面所学运用到一开始的咖啡机实现"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isHot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Heater heater;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Thermosiphon(Heater heater) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Thermosiphon(Heater heater) - heaterHash = "</span> + heater.hashCode());</span><br><span class="line">        <span class="keyword">this</span>.heater = heater;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heater.isHot()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"=&gt;=&gt; 抽水 =&gt;=&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricHeater</span> <span class="keyword">implements</span> <span class="title">Heater</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ElectricHeater</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"ElectricHeater()"</span>); &#125;</span><br><span class="line">    <span class="keyword">boolean</span> heating;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"~~~~heating~~~~"</span>);</span><br><span class="line">        <span class="keyword">this</span>.heating = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123; <span class="keyword">this</span>.heating = <span class="keyword">false</span>; &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHot</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> heating; &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Heater <span class="title">provideheater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"provideheater()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Pump <span class="title">providePump</span><span class="params">(Thermosiphon pump)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"providePump"</span>);</span><br><span class="line">        <span class="keyword">return</span> pump;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Heater heater;<span class="comment">//当我们要使用它时才创建一个加热器</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Pump pump;<span class="comment">//泵</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    CoffeeMaker() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CoffeeMaker - heaterHash = "</span> + heater.hashCode());</span><br><span class="line">        heater.on();</span><br><span class="line">        pump.pump();</span><br><span class="line">        System.out.println(<span class="string">"[_]P coffee! [_]P"</span>);</span><br><span class="line">        heater.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span> </span>&#123;</span><br><span class="line">    <span class="function">CoffeeMaker <span class="title">maker</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CoffeeShop coffeeShop = DaggerCoffeeShop.builder()</span><br><span class="line">                .build();</span><br><span class="line">        coffeeShop.maker().brew();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们来看一下输出结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">provideheater()</span><br><span class="line">ElectricHeater()</span><br><span class="line">provideheater()</span><br><span class="line">ElectricHeater()</span><br><span class="line">Thermosiphon(Heater heater) - heaterHash = <span class="number">1625635731</span></span><br><span class="line">providePump</span><br><span class="line">CoffeeMaker - heaterHash = <span class="number">1580066828</span></span><br><span class="line">~~~~heating~~~~</span><br><span class="line">[_]P coffee! [_]P</span><br></pre></td></tr></table></figure><ul><li>大家有木有发现，当调用<code>heater.on()</code>后调用<code>pump.pump()</code>居然没有出水(没有打印：<code>=&gt;=&gt; 抽水 =&gt;=&gt;</code>)</li><li>通过输出结果我们看到<code>provideheater</code>被调用两次也就是两次new，我们还会会发现：<code>Thermosiphon</code>中的<code>Heater</code>对象和<code>CoffeeMaker</code>中的<code>Heater</code>对象打印的<code>hashCode</code>不一样，这根本就是两个实例。怪不得<code>CoffeeMaker</code>中<code>heater.on()</code>后<code>pump.pump()</code>不出水，原因就是<code>Pump</code>中又是另一个<code>Heater</code>实例。</li></ul><blockquote><p>看来通过上面的学习，我们的咖啡机还有点缺陷。我们需要通过下面所讲的<code>@Singleton</code>来拯救一下这个多次实例化的问题。</p></blockquote><blockquote><p>最后我将上面这些大致理解思路画了如下流程图，希望能帮助您理解：</p></blockquote><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142614.png" alt="dagger-liu-cheng" data-zoomable=""></p></div><h3 id="Singleton丶-Scope">@Singleton丶@Scope<a href="post/learn-dagger#Singleton丶-Scope"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee5_test_scope" target="_blank" rel="noopener">测试文件位置</a></strong></p><blockquote><p>Singleton：直接翻译过来是独生子的意思。我们可以这样去理解，标记了<code>@Singleton</code>提供的类，在同一个Component实例中(这是条件)只存在一个该实例，多次需要时，提供的实例也只是第一次创建的那个实例。</p></blockquote><ul><li>我们只需要将上面咖啡机的实现代码加两个<code>@Singleton</code>就可以解决问题！如下代码：<ul><li>在提供实例那里加个<code>@Singleton</code></li><li>在<code>Component</code>那里加个<code>@Singleton</code></li><li>也就是说<code>@Singleton</code>起效，得添加两处</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Singleton</span><br><span class="line">@Component(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class="line">public interface CoffeeShop &#123;</span><br><span class="line">    CoffeeMaker maker();</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">@Module</span><br><span class="line">public class DripCoffeeModule &#123;</span><br><span class="line">    @Singleton</span><br><span class="line">    @Provides</span><br><span class="line">    Heater provideheater() &#123;</span><br><span class="line">        System.out.println(&quot;provideheater()&quot;);</span><br><span class="line">        return new ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">输出日志：</span><br><span class="line">provideheater()</span><br><span class="line">ElectricHeater()</span><br><span class="line">Thermosiphon(Heater heater) - heaterHash = 1872034366</span><br><span class="line">providePump</span><br><span class="line">CoffeeMaker - heaterHash = 1872034366</span><br><span class="line">~~~~heating~~~~</span><br><span class="line">=&gt;=&gt; 抽水 =&gt;=&gt;</span><br><span class="line">[_]P coffee! [_]P</span><br></pre></td></tr></table></figure><blockquote><p>那么如果是<code>@Inject</code>标记的构造方法的方式来提供的对象，<code>@Singleton</code>该如何标记呢？如下代码：</p></blockquote><ul><li>放到类名之上<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@Singleton</span><br><span class="line">public class SingletonTest&#123;</span><br><span class="line">    @Inject</span><br><span class="line">    public SingletonTest()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">public class CoffeeMaker &#123;</span><br><span class="line">    ...</span><br><span class="line">    @Inject</span><br><span class="line">    SingletonTest singletonTest1;</span><br><span class="line">    @Inject</span><br><span class="line">    SingletonTest singletonTest2;</span><br><span class="line">    @Inject</span><br><span class="line">    SingletonTest singletonTest3;</span><br><span class="line">    ...</span><br><span class="line">    public void brew() &#123;</span><br><span class="line">        ...</span><br><span class="line">        System.out.println(</span><br><span class="line">                &quot;singletonTest1 = &quot; + singletonTest1.hashCode() + &quot;\n&quot;</span><br><span class="line">                + &quot;singletonTest2 = &quot; + singletonTest2.hashCode() + &quot;\n&quot;</span><br><span class="line">                + &quot;singletonTest3 = &quot; + singletonTest3.hashCode() + &quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">输出日志：</span><br><span class="line">...</span><br><span class="line">singletonTest1 = 1581781576</span><br><span class="line">singletonTest2 = 1581781576</span><br><span class="line">singletonTest3 = 1581781576</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>为什么说上面条件是需要在一个Component实例中？原因是如果Component被多次实例化，那么不同的Component中@Singleton标记的实例也将不同！</p></blockquote><ul><li>来看看下面我们如果有多个Component实例的情况</li><li><p>我们修改一下<code>CoffeeApp</code>这个类，让他重复调用<code>brew()</code>方法和重新创建Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CoffeeShop coffeeShop = DaggerCoffeeShop.builder()</span><br><span class="line">                .build();</span><br><span class="line">        coffeeShop.maker().brew();</span><br><span class="line">        System.out.println(<span class="string">"*************************************"</span>);</span><br><span class="line">        coffeeShop.maker().brew();</span><br><span class="line">        System.out.println(<span class="string">"*************************************"</span>);</span><br><span class="line">        DaggerCoffeeShop.builder()</span><br><span class="line">                .build()</span><br><span class="line">                .maker()</span><br><span class="line">                .brew();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果(我们只看一些关键部分)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">CoffeeMaker - heaterHash = 1872034366</span><br><span class="line">...</span><br><span class="line">singletonTest1 = 1581781576</span><br><span class="line">...</span><br><span class="line">*************************************</span><br><span class="line">...</span><br><span class="line">CoffeeMaker - heaterHash = 1872034366</span><br><span class="line">...</span><br><span class="line">singletonTest1 = 1581781576</span><br><span class="line">...</span><br><span class="line">*************************************</span><br><span class="line">...</span><br><span class="line">CoffeeMaker - heaterHash = 1725154839</span><br><span class="line">...</span><br><span class="line">singletonTest1 = 1670675563</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>从输出信息中我们可看出，第一次和第二次都是同一个heater实例，第三次却是不同的实例，因为我们重新实例化了一个Component。</p></li><li><p>如果我们想在多个地方调用的时候也得到同一个Component实例，我们可以将Component作为抽象类，并改为单例。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = &#123;DripCoffeeModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeShop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CoffeeShop instance;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> CoffeeMaker <span class="title">maker</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoffeeShop <span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (CoffeeShop.class)</span><br><span class="line">            &#123;</span><br><span class="line">                instance = DaggerCoffeeShop.create();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们的使用的时候，直接这样：<code>CoffeeShop.getInstance().maker().brew()</code></p></li><li>我们在Android中，可以把这种全局的定义放到<code>Application</code>中也可以确保在该进程中的唯一。</li></ul><blockquote><p>上面讲了<code>@Singleton</code>，那么<code>@Scope</code>又是什么呢？<code>@Scope</code>是用来标识注解的。我们看一下，<code>@Singleton</code>的源码你就明白了！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Singleton &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>用<code>@Scope</code>标识的注解都有<code>@Singleton</code>的功能，于是我们可以定义我们自己想要的名字来实现相同功能。</li><li>但需要注意一点就是用的时候相对应的注解必须是同一个（比方说我定义了一个<code>@MySingle</code>，就不能在Component那里用<code>@MySingle</code>的同时，对应的提供对象那里却用的是<code>@Singleton</code>）</li></ul><blockquote><p>又到了我们分析生成代码的环节，大家可以选择性跳过哦！(〃’▽’〃)</p></blockquote><ol><li>我们直接来看<code>DaggerCoffeeShop</code>这个类，其他都和上面讲解的一样，变化就在该类！<ul><li>我们看到下图画红线的部分！他将<code>@Singleton</code>标记的对象直接放到了<code>DaggerCoffeeShop</code>作为成员变量（由于代码太多，我将<code>CoffeeMaker</code>中的<code>SingletonTest</code>都注释了）。</li><li>等等！<code>Provider&lt;Heater&gt;</code>根据上面我们对工厂代码的研究！每次调用<code>get()</code>不都会重新实例化一个对象吗？为什么每次<code>get()</code>都是同一个实例？这就是第二根红线<code>DoubleCheck</code>的封装起的作用了！<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142629.png" alt="DaggerCoffeeShop"></li></ul></li><li><p><code>DoubleCheck.provider</code>搞了什么名堂？大家跟着我点进去悄悄！</p><ul><li><p>我们看到这个静态方法！很明显，它是为了创建一个<code>DoubleCheck</code>对象，如果传进来的就是<code>DoubleCheck</code>对象，则直接返回实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;P extends Provider&lt;T&gt;, T&gt; <span class="function">Provider&lt;T&gt; <span class="title">provider</span><span class="params">(P delegate)</span> </span>&#123;</span><br><span class="line">    checkNotNull(delegate);</span><br><span class="line">    <span class="keyword">if</span> (delegate <span class="keyword">instanceof</span> DoubleCheck) &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DoubleCheck&lt;T&gt;(delegate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们看到<code>DoubleCheck</code>类也是实现了<code>Provider</code>接口的，所以在<code>DaggerCoffeeShop</code>中才能直接用<code>Provider</code>来引用。它既然也是一个<code>Provider</code>却又要传入一个<code>Provider</code>，它起了一个代理的作用。</p></li><li>为什么<code>get()</code>调用后是同一个实例？原因是<code>get()</code>中进行了处理，如果<code>get()</code>过一次实例，那么下次将返回上一次的实例。下面是这部分源码：<ul><li>我们可以看到它不仅仅简单写了只返回一个实例的的代码，还写了一堆关于多线程同步相关代码。</li><li>也就是说我们在多线程的情况下也可以放心的调用<code>get()</code>方法，而不用担心因为多线程而创建额外的实例。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   Object result = instance;</span><br><span class="line">   <span class="keyword">if</span> (result == UNINITIALIZED) &#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">           result = instance;</span><br><span class="line">          <span class="keyword">if</span> (result == UNINITIALIZED) &#123;</span><br><span class="line">                result = provider.get();</span><br><span class="line">                Object currentInstance = instance;</span><br><span class="line">                <span class="keyword">if</span> (currentInstance != UNINITIALIZED &amp;&amp; currentInstance != result) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Scoped provider was invoked recursively returning "</span></span><br><span class="line">                            + <span class="string">"different results: "</span> + currentInstance + <span class="string">" &amp; "</span> + result + <span class="string">". This is likely "</span></span><br><span class="line">                            + <span class="string">"due to a circular dependency."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                instance = result;</span><br><span class="line">                provider = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="Reusable">@Reusable<a href="post/learn-dagger#Reusable"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee5_test_scope/CoffeeApp.java" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>它和<code>@Singleton</code>达到的效果差不多，而且逻辑也差不多，但是它却不保证是单实例！</p><p>它的用法比<code>@Singleton</code>还简单点，只需要在提供实例的地方加个<code>@Reusable</code>就可以了，如下代码：</p><blockquote><p>就像下面这么简单就OK了，不用在Component中添加。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reusable</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Heater <span class="title">provideheater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"provideheater()"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们再来看看，生成的代码和@Singleton的不同！</p></blockquote><ol><li>我们改用<code>@Reusable</code>后，<code>DaggerCoffeeShop</code>有什么变化？<ul><li>唯一发生变化了地方就是这个方法里面的实现由<code>DoubleCheck.provider</code>变成了<code>SingleCheck.provider</code><br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142648.png" alt=""></li></ul></li><li>那我们来到<code>SingleCheck</code>这个类，它和<code>DoubleCheck</code>不同点就在于<code>get()</code>方法的实现上，请看下面<code>SingleCheck</code>的<code>get()</code>源代码：<ul><li>可以看到它省去了<code>DoubleCheck</code>中一堆关于线程同步的代码</li><li>也就是说我们在单线程中是可以放心使用<code>@Reusable</code>而不用担心重复实例化。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Provider&lt;T&gt; providerReference = provider;</span><br><span class="line">    <span class="keyword">if</span> (instance == UNINITIALIZED) &#123;</span><br><span class="line">        instance = providerReference.get();</span><br><span class="line">        provider = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (T) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Lazy-注入">Lazy 注入<a href="post/learn-dagger#Lazy-注入"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee6_test_lazy_provider" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>通过它可以实现惰性实例化，也就是当我们第一次调用的时候才会创建实例。并且多次调用不会再次创建实例，只会返回第一次调用创建的实例。</p><blockquote><p>我们来看看它的用法！</p></blockquote><ol><li><p>首先我们创建一个需要提供的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class LazyEntity</span><br><span class="line">&#123;</span><br><span class="line">    @Inject</span><br><span class="line">    public LazyEntity()</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;LazyEntity()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后我们创建一个Component，需要提供提供一个<code>Main</code>类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public interface MyComponent</span><br><span class="line">&#123;</span><br><span class="line">    Main getMain();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们来看看这个<code>Main</code>类。Lazy的使用方法就是将要使用的对象作为Lazy的泛型参数，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Main</span><br><span class="line">&#123;</span><br><span class="line">    @Inject</span><br><span class="line">    Lazy&lt;LazyEntity&gt; entityLazy;</span><br><span class="line"></span><br><span class="line">    @Inject</span><br><span class="line">    public Main() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        Main main = DaggerMyComponent.builder()</span><br><span class="line">                .build()</span><br><span class="line">                .getMain();</span><br><span class="line">        System.out.println(&quot;此时LazyEntity还没有实例化&quot;);</span><br><span class="line">        for (int i = 0; i &lt; 3; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(main.entityLazy.get().hashCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出结果，也就是说我们重复调用都是一个实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">此时LazyEntity还没有实例化</span><br><span class="line">LazyEntity()</span><br><span class="line">1625635731</span><br><span class="line">1625635731</span><br><span class="line">1625635731</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>来吧！进入生成代码分析阶段（当然可以选择跳过哈！）ヾ(◍°∇°◍)ﾉﾞ</p></blockquote><ol><li>我们看到Dagger生成的<code>DaggerMyComponent</code>，需要值得注意的就是下面图片上划线的部分。<ul><li>可以看到这里也使用了<code>DoubleCheck</code>类（大家通过上面的学习应该熟悉了），也就是说我们得到的<code>Lazy</code>对象其实就是一个<code>DoubleCheck</code>。</li><li>所以说我们能多次调用也只能返回相同的实例，而且也能在多线程调用也不担心重复实例化。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142703.png" alt="DaggerMyComponent"></li></ul></li><li>那么我们来看一下<code>DoubleCheck.lazy</code>这个静态方法，源代码如下：<ul><li>可以看到和之前介绍的<code>DoubleCheck.provider</code>一个模子刻出来的，那这里大家就自行了解咯！！<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;P extends Provider&lt;T&gt;, T&gt; <span class="function">Lazy&lt;T&gt; <span class="title">lazy</span><span class="params">(P provider)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (provider <span class="keyword">instanceof</span> Lazy) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="keyword">final</span> Lazy&lt;T&gt; lazy = (Lazy&lt;T&gt;) provider;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DoubleCheck&lt;T&gt;(checkNotNull(provider));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Provider-注入">Provider 注入<a href="post/learn-dagger#Provider-注入"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee6_test_lazy_provider" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>当您需要多个实例时，可以通过<code>Provider&lt;T&gt;</code>作为成员变量，您只需要每次调用它的<code>get()</code>方法就会返回不同的实例。</p><blockquote><p>我们直接将上面例子的<code>Lazy</code>改成Provider，其他都不变，如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Provider&lt;LazyEntity&gt; entityLazy;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>来看一下输出的结果：</p></blockquote><ul><li>我们循环调用了三次<code>get()</code>方法，产生了三个不同的实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此时LazyEntity还没有实例化</span><br><span class="line">LazyEntity()</span><br><span class="line"><span class="number">692404036</span></span><br><span class="line">LazyEntity()</span><br><span class="line"><span class="number">1554874502</span></span><br><span class="line">LazyEntity()</span><br><span class="line"><span class="number">1846274136</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>来吧！生成代码分析阶段(｡･ω･｡)</p></blockquote><ol><li><p>我们看<code>DaggerMyComponent</code>中是怎么注入的！看到划线部分传入的参数是<code>LazyEntity</code>的工厂类，意思说我们定义的成员变量指向的就是一个工厂类<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142728.png" alt=""></p></li><li><p>我们来看看这个工厂类吧！相信大家也相当熟悉了！(于是就不做说明了！！！)<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142745.png" alt=""></p></li></ol><h3 id="Named丶-Qualifier">@Named丶@Qualifier<a href="post/learn-dagger#Named丶-Qualifier"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee7_test_named_qualifier" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>大家可以先思考一个问题：一个机器人对象有两只手的实例（假如有手实现类：<code>Hand</code>），那么Dagger在提供实例时，如何才能区分这是提供给左的实例还是提供给右手的实例呢？</p><blockquote><p>解决这个问题的办法可以用<code>@Named</code>分别在变量名和提供实例的地方都标记一下名字。该名字作为<code>@Named()</code>的参数，如：<code>@Named(&quot;who am i&quot;)</code>。请看下面的例子演示！</p></blockquote><ol><li><p>我们定义手实现类</p><ul><li><code>toString()</code>输出描述信息。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hand</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hand</span><span class="params">(String desc)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们定义<code>Module</code>类提供手的实例</p><ul><li>使用<code>@Named</code>标记该实例是哪只手，参数为机器人左手还是右手<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"left"</span>)</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Hand <span class="title">provideLeftHand</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hand(<span class="string">"left hand"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"right"</span>)</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Hand <span class="title">provideRightHand</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hand(<span class="string">"right hand"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们定义一个<code>Robot</code>（当然这里Robot只看这两只手(～￣▽￣)～ ），顺便我就直接在这个类中测试了。</p><ul><li>通过<code>@Named(&quot;left&quot;)</code>标记这里要引用左手的实例</li><li>通过<code>@Named(&quot;right&quot;)</code>标记这里要引用右的实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Robot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"left"</span>)</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Hand leftHand;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Named</span>(<span class="string">"right"</span>)</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Hand rightHand;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Robot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Robot robot = DaggerRobotComponent.create().getRobot();</span><br><span class="line">        System.out.println(robot.leftHand);</span><br><span class="line">        System.out.println(robot.rightHand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个Component</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = RobotModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RobotComponent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Robot <span class="title">getRobot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们来看一看运行结果，可以看出跟我们标记的一样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">left hand</span><br><span class="line">right hand</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>那么<code>@Qualifier</code>又是什么呢？其实它和上面讲的<code>@Scope</code>一样，是标记在注解上的，就像<code>@Singleton</code>是官方为我们写好的一个用<code>@Scope</code>标记好的注解。<code>@Named</code>也是官方为我们准备好的用<code>@Qualifier</code>标注的注解。看@Named源码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Named &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** The name. */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 因此我们可以定义自己<code>@Qualifier</code>，我们可以定义不传参数的，像下面这样：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Left &#123; &#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Right &#123; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用（结果是一样的效果）：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Left</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Hand <span class="title">provideLeftHand</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hand(<span class="string">"left hand"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Right</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Hand <span class="title">provideRightHand</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Hand(<span class="string">"right hand"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Robot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Left</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Hand leftHand;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Right</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Hand rightHand;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Robot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成的代码分析：</p></blockquote><ul><li>通过标记名字Dagger知道我们哪个变量对应哪个实例</li></ul><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142803.png" alt="DaggerRobotComponent" data-zoomable=""></p></div><h3 id="BindsOptionalOf">@BindsOptionalOf<a href="post/learn-dagger#BindsOptionalOf"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee8_test_optional_binding" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>可选绑定，我们知道如果某个变量标记了<code>@Inject</code>，那么必须要为它提供实例，否则无法编译通过。现在我们可以通过将变量类型放入<code>Optional&lt;T&gt;</code>泛型参数，则可以达到：即使没有提供它的实例，也能通过编译。</p><p><code>Optional</code>这个类是什么呢？它的引入是为了解决Java中空指针的问题，您可以去这里了解一下：<a href="http://www.runoob.com/java/java8-optional-class.html" target="_blank" rel="noopener">Java 8 Optional 类</a></p><blockquote><p>我们还是拿代码说话！这里有一个杯子，杯子里可以有咖啡，也可以没有咖啡！</p></blockquote><blockquote><p>我们先来看有咖啡的时候的代码</p></blockquote><ol><li><p>我们首先我们定义一个咖啡类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>我们将<code>Coffee</code>类定义为可选的绑定</p><ul><li>创建一个<code>Module</code>抽象类来定义，返回类型就是咖啡</li><li>用<code>@BindsOptionalOf</code>来标记<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@BindsOptionalOf</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Coffee <span class="title">optionalCoffee</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>我们在定义一个有提供<code>Coffee</code>实例的<code>Module</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">provideCoffee</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Coffee();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义杯子类和Component</p><ul><li>我们直接在<code>Cup</code>添加<code>main</code>方法进行测试</li><li>Component将两个Module添加进来<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cup</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Optional&lt;Coffee&gt; coffee;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cup cup = DaggerCComponent.create().getCup();</span><br><span class="line">        System.out.println(cup.coffee);</span><br><span class="line">        <span class="keyword">if</span> (cup.coffee.isPresent())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"有咖啡"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"无咖啡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;CoffeeModule.class, CModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CComponent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">Cup <span class="title">getCup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>输出结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional[com.example.jiaji.daggertest.coffee8_optional_binding.Coffee@<span class="number">4</span>b1210ee]</span><br><span class="line">有咖啡</span><br></pre></td></tr></table></figure><ol start="5"><li>如果我们将<code>CoffeeModule</code>提供<code>Coffee</code>实例的方法注释掉<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//    @Provides</span></span><br><span class="line"><span class="comment">//    public Coffee provideCoffee()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return new Coffee();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>输出结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional.empty</span><br><span class="line">无咖啡</span><br></pre></td></tr></table></figure><blockquote><p>这就是可选绑定的作用，<code>Optional</code>这个类在java 8中，并且最低Android Api 24。或者你可以选择导入<code>guava</code>这个类库，不过我去喵了一眼，它呀的太大了！！</p></blockquote><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142833.png" alt="" data-zoomable=""></p></div><blockquote><p>Optional还可以这样用！</p></blockquote><ul><li><code>Optional&lt;Coffee&gt;</code></li><li><code>Optional&lt;Provider&lt;Coffee&gt;&gt;</code></li><li><code>Optional&lt;Lazy&lt;Coffee&gt;&gt;</code></li><li><code>Optional&lt;Provider&lt;Lazy&lt;Coffee&gt;&gt;&gt;</code></li></ul><blockquote><p>下面我们来看一看生成的代码长什么样吧! ヾ(=･ω･=)o</p></blockquote><p>目前我们直接看<code>Component</code>就够了，于是我们看到<code>DaggerCComponent</code></p><ul><li>这是没有提供<code>Coffee</code>实例的情况下<ul><li>我们可以看到注入的时候，直接通过<code>Optional.&lt;Coffee&gt;empty()</code>创建了了一个没有内容的<code>Optional</code><br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142852.png" alt="DaggerCComponent"></li></ul></li><li>来看提供了<code>Coffee</code>实例的情况<ul><li>我们需要知道<code>Optional.of()</code>是向<code>Optional</code>里面添加实例的意思，它将返回一个包含有该实例的<code>Optional</code>类<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142915.png" alt=""></li></ul></li></ul><h3 id="BindsInstance">@BindsInstance<a href="post/learn-dagger#BindsInstance"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee9_test_bindsinstance" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>绑定实例，大家可以想象一下：如果我们提供实例的时候，需要在运行时提供参数去创建，那么该如何做呢？</p><blockquote><p>我们可以使用Builder绑定实例来做！这里我们举例一个需要参数名字和爱好才能创建的<code>User</code>对象。</p></blockquote><ol><li><p>名字和爱好都是String类型，定义了两个<code>@Scope</code>注解来标识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Name &#123; &#125;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Love &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个<code>User</code>类</p><ul><li>该类为需要提供的对象，在构造方法上用<code>@Inject</code>标识</li><li>由于姓名和爱好都属于String类型，所以我们需要标记一下区分<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String love;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(@Name String name, @Love String love)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.love = love;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", love='"</span> + love + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建Component，这里是关键部分了</p><ul><li>首先我们需要在该接口内部在定义Builder接口，该接口用<a href="mailto:`@Component.Builder" target="_blank" rel="noopener">`@Component.Builder</a><code>标记，表示该接口会由Component的</code>Builder`静态内部类实现。</li><li>然后我们需要为定义方法<code>name()</code>和<code>love()</code>，加上注解<code>@BindsInstance</code>，返回类型为Builder。传入的参数需要用注解标识，去对应<code>User</code>构造参数。需要注意一点的就是方法只有一个参数，如果多个参数就会报错：只能有一个参数。</li><li>最后<code>UComponent build();</code>就是我们通常最后调用的那个<code>build()</code>方法，创建返回Component实例。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UComponent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="meta">@BindsInstance</span> <span class="function">Builder <span class="title">name</span><span class="params">(@Name String name)</span></span>;</span><br><span class="line">        <span class="meta">@BindsInstance</span> <span class="function">Builder <span class="title">love</span><span class="params">(@Love String love)</span></span>;</span><br><span class="line">        <span class="function">UComponent <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Main</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        UComponent uComponent = DaggerUComponent.builder()</span><br><span class="line">                .name(&quot;奏响曲&quot;)</span><br><span class="line">                .love(&quot;beautiful girl&quot;)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(uComponent.getUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>输出结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name=&apos;奏响曲&apos;, love=&apos;beautiful girl&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以看出BindsInstance就是就是改造了<code>Component</code>里面的<code>Builder</code>类，Builder类实现了用<a href="mailto:`@Component.Builder" target="_blank" rel="noopener">`@Component.Builder</a>`标注的接口。</p><blockquote><p>接下来来看一下生成的相关代码！</p></blockquote><ul><li>可以看到Component中的<code>Builder</code>实现了<code>UComponent.Builder</code>接口，并将传递进来的参数进行空检测与成员变量引用</li><li>并且参数的实例也将会作为<code>Component</code>的成员变量，当创建<code>User</code>时作为其参数传入。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611142933.png" alt="DaggerUComponent"></li></ul><h3 id="Component-dependencies">Component dependencies<a href="post/learn-dagger#Component-dependencies"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee10_test_subcomponent_dependencies" target="_blank" rel="noopener">测试文件位置</a></strong></p><p><code>dependencies</code>是注解<code>@Component</code>中的一个参数可以引用其他<code>Component</code>，我们看一下它的源码：</p><ul><li>可以看到它的定义和<code>modules</code>是一模一样</li><li>也就是说我们可以依赖一个或多个<code>Component</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">  Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  Class&lt;?&gt;[] dependencies() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>它的主要作用就是将需要依赖的Component，放到自己的Component中当做成员变量直接引用。被依赖的Component就可以为主Component提供它在接口中定义的需要返回的实例。</p><ul><li>如果有<code>AComponent dependencies BComponent</code></li><li>那么则生成<code>public class DaggerAComponent implements AComponent { BComponent bComponent;...}</code></li><li>并且这个<code>bComponent</code>实例是我们在<code>Builder</code>类里面传进去的。</li></ul><p><code>Component dependency</code>只允许您通过组件依赖关系访问接口中公开的类型，既：你只能访问到Component接口中定义的返回类型。</p><blockquote><p>我们来实际操作！例子：咖啡和水</p></blockquote><ol><li><p>定义咖啡和水的实例，在Coffee中我们覆写<code>toString()</code>把Coffee和Water的hashCode打印出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Water</span> </span>&#123; &#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Water water;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coffee</span><span class="params">(Water water)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.water = water;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"coffee:"</span> + hashCode() + <span class="string">"; water:"</span> + water.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义两个的Module分别提供实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Water <span class="title">provideWater</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Water();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">provideCoffee</span><span class="params">(Water water)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Coffee(water);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们定义<code>WComponent</code>为Water的Component，定义<code>CComponent</code>为Coffee的Component。<code>CComponent</code>依赖于<code>WComponent</code></p><ul><li>如下代码我们只需要在注解<code>@Component</code>中添加<code>dependencies = WComponent.class</code>就可以产生依赖。</li><li>在使用的时候，我们只需要在创建CComponent的<code>Builder</code>对象中传入<code>WComponent</code>就可以了。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentDependency</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Component</span>(modules = WModule.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WComponent</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function">Water <span class="title">water</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>(modules = CModule.class, dependencies = WComponent.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CComponent</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function">Coffee <span class="title">coffee</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        WComponent wComponent = DaggerComponentDependency_WComponent</span><br><span class="line">                .create();</span><br><span class="line">        System.out.println(<span class="string">"water:"</span> + wComponent.water().hashCode());</span><br><span class="line"></span><br><span class="line">        CComponent cComponent = DaggerComponentDependency_CComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .wComponent(wComponent)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        System.out.println(cComponent.coffee());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>输出结果：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">water:<span class="number">1846274136</span></span><br><span class="line">coffee:<span class="number">1639705018</span>; water:<span class="number">1627674070</span></span><br></pre></td></tr></table></figure><blockquote><p>通过结果我们可以看到，<code>Water</code>被重复实例化了，最简单的解决方法就是直接在<code>provideWater()</code>加上<code>@Reusable</code>注解。OK，达到效果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WModule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Reusable</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Water <span class="title">provideWater</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Water();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------</span><br><span class="line">运行结果：</span><br><span class="line">water:<span class="number">491044090</span></span><br><span class="line">coffee:<span class="number">644117698</span>; water:<span class="number">491044090</span></span><br></pre></td></tr></table></figure><blockquote><p>但这也许不能保证您得到的一定是同一个实例，我们可以加上<code>@Singleton</code>注解，但是这里却是一个坑！因为这些Component的生命周期是不一样的，所以不能跨多个Component用同一个<code>@Singleton</code>来标记。如果这样做将会抛出一个错误信息：<code>This @Singleton component cannot depend on scoped components</code><a href="https://stackoverflow.com/questions/39709317/dagger-2-singleton-component-depend-on-singleton/39710308" target="_blank" rel="noopener">stackoverflow</a></p></blockquote><ol><li><p>我们可这样做，自定义一个<code>Scope</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MySingle &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>我们在Water这边用<code>@Singleton</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Water <span class="title">provideWater</span><span class="params">()</span></span></span><br><span class="line"><span class="function">---------------------------------------------------</span></span><br><span class="line"><span class="function">    @Singleton</span></span><br><span class="line"><span class="function">    @<span class="title">Component</span><span class="params">(modules = WModule.class)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> interface WComponent</span></span><br></pre></td></tr></table></figure></li><li><p>我们在Coffee这边用<code>@MySingle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@MySingle</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Coffee <span class="title">provideCoffee</span><span class="params">(Water water)</span></span></span><br><span class="line"><span class="function">---------------------------------------------------</span></span><br><span class="line"><span class="function">    @MySingle</span></span><br><span class="line"><span class="function">    @<span class="title">Component</span><span class="params">(modules = CModule.class, dependencies = WComponent.class)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> interface CComponent</span></span><br></pre></td></tr></table></figure></li><li><p>输出结果OK：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">water:<span class="number">1625635731</span></span><br><span class="line">coffee:<span class="number">1580066828</span>; water:<span class="number">1625635731</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>我们来分析一下Dagger所生成的代码，主要我们看到<code>DaggerComponentDependency_CComponent</code>这个类，主要变化了在这里！</p></blockquote><ol><li>我们看到<code>DaggerComponentDependency_CComponent</code>的内部Builder静态类<ul><li>从下面划线的地方我们可以看出，必须要传入依赖的Component的实例，否则会抛异常。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143001.png" alt="Builder"></li></ul></li><li>我们看<code>DaggerComponentDependency_CComponent</code>里面的实现<ul><li>看到第一根划线处，它会把Builder中依赖的Component实例的引用传递给成员变量。</li><li>看到第二根划线处，这里就跟我们平常调用接口中的方法一样能获得需要的实例，但是这里实例是通过依赖的Component来获取的实例。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143021.png" alt="DaggerComponentDependency_CComponent"></li></ul></li><li>当我们用了Scope的时候，<code>DaggerComponentDependency_CComponent</code>还会生成一个静态类内部类<ul><li>可以看出它实现了<code>Provider&lt;T&gt;</code>因该就是为了通过<code>Provider</code>的<code>get()</code>方法来提供<code>Water</code>实例。</li><li>并且这里它将依赖的Component放这里面了<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143105.png" alt=""></li></ul></li><li>我们再来看此时的<code>DaggerComponentDependency_CComponent</code><ul><li>它依赖的则是上面的静态内部类。</li><li>并且通过我们熟悉的<code>DoubleCheck.provider</code>来对<code>get()</code>内逻辑进行的转变，使我们只获取一个实例。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143123.png" alt=""></li></ul></li></ol><h3 id="Subcomponent">@Subcomponent<a href="post/learn-dagger#Subcomponent"></a></h3><p><strong><a href="https://github.com/xujiaji/learn-android/blob/master/LearnDagger/app/src/main/java/com/example/jiaji/daggertest/coffee10_test_subcomponent_dependencies" target="_blank" rel="noopener">测试文件位置</a></strong></p><p>最后我们来研究一下<code>@Subcomponent</code>，就如它名字一样，可以看做是一个Component的子类。</p><blockquote><p>我们来看一下它的源码：</p></blockquote><ul><li>除了没有<code>Class&lt;?&gt;[] dependencies() default {};</code>长得和<code>@Component</code>一样。</li><li>也就是说<code>Subcomponent</code>就不能依赖其他Component了<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Subcomponent &#123;</span><br><span class="line">  Class&lt;?&gt;[] modules() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  <span class="meta">@Target</span>(TYPE)</span><br><span class="line">  <span class="meta">@Documented</span></span><br><span class="line">  <span class="meta">@interface</span> Builder &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>SubComponent</code>可以在声明它时从父级访问整个绑定图，即可以使用在其<code>Modules</code>中提供的实例。</p><blockquote><p>怎么使用，我们就直接用上个咖啡和水的代码！重新写一下他们的Component就行。</p></blockquote><ul><li>这里我们将<code>CComponent</code>作为子Component用<code>Subcomponent</code>来标记</li><li>然后我们还得在它的父Component中添加，如下面代码中的<code>CComponent cComponent(CModule cModule);</code>，如果<code>@Subcomponent</code>有多个Module，那么可以就要传递多个Module的参数。假如有：<code>@Subcomponent(modules = {CModule.class, CModule2.class})</code>，那么可以这样：<code>CComponent cComponent(CModule cModule, CModule2 cModule2);</code></li><li>我们在使用的时候需要先创建父<code>Component</code>，然后才能去创建子<code>Component</code>，如下<code>main()</code>方法中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubComponent</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Component</span>(modules = WModule.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WComponent</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function">CComponent <span class="title">cComponent</span><span class="params">(CModule cModule)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Subcomponent</span>(modules = CModule.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CComponent</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function">Coffee <span class="title">coffee</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        WComponent wComponent = DaggerSubComponent_WComponent</span><br><span class="line">                .create();</span><br><span class="line"></span><br><span class="line">        CComponent cComponent = wComponent</span><br><span class="line">                .cComponent(<span class="keyword">new</span> CModule());</span><br><span class="line"></span><br><span class="line">        System.out.println(cComponent.coffee());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@Subcomponent</code> 和<code>Component dependencies</code>的一些对比</p></blockquote><ul><li><code>@Subcomponent</code>实例是通过父Component创建。<code>Component dependencies</code>可以依赖多个Component，并且各个Component单独创建且分离。</li><li><code>Component dependencies</code>只运行您访问接口中公开定义提供的实例，<code>@Subcomponent</code>可访问其<code>Modules</code>中声明的所有对象</li><li><code>Component dependencies</code>存在生命周期的不同，<code>@Subcomponent</code>是比当前父<code>Component</code> “更小”的周期。</li></ul><blockquote><p>来看一下生成的代码<code>DaggerSubComponent_WComponent</code>，我们将其分成三部分来看</p></blockquote><ol><li>首先我们看到<code>DaggerSubComponent_WComponent</code>内部类：子Component的定义<ul><li>它实现了我们定义的接口，并且和我们之前所生成的Component是类似的，只不过内部没有Builder静态类了。</li><li>由于是内部类，所以它能访问所有父<code>Component</code>成员。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143142.png" alt=""></li></ul></li><li>我们来看Builder，Builder好说的，跳过！<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143155.png" alt=""></li><li>我们来看<code>DaggerSubComponent_WComponent</code>的方法<ul><li>可以看到，当我们调用<code>cComponent</code>时就会创建一个子Component现在类实例</li><li>这是由于子Component是没有Builder去创建的也没有默认创建<code>Module</code>的功能。当然子Component也是需要他的<code>Module</code>的，于是要创建它需要的<code>Module</code>给它。<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/20180611143210.png" alt="DaggerSubComponent_WComponent"></li></ul></li></ol><p><a href="https://stackoverflow.com/questions/29587130/dagger-2-subcomponents-vs-component-dependencies" target="_blank" rel="noopener">Subcomponent和Component dependencies的关系区别</a></p><h3 id="安卓扩展的相关框架">安卓扩展的相关框架<a href="post/learn-dagger#安卓扩展的相关框架"></a></h3><p>如果有机会，如果希望看我这种啰嗦介绍的人多的话，在写一篇关于这个的吧！</p><hr><h3 id="结束">结束<a href="post/learn-dagger#结束"></a></h3><p>好了，神不知鬼不觉的一星期码了这么多字。能挨着看到这里的同学，能有多少咧Σ(っ°Д°;)っ</p><p>想起来，我以前写了一个MVP框架<a href="https://github.com/xujiaji/XMVP" target="_blank" rel="noopener">XMVP</a>就是通过获取配置的泛型参数类型然后再通过反射去实例化的自动完成它们之间的依赖关系。也可以说是这就是依赖注入了吧！哈哈！有兴趣的朋友可以去看一看用一用非常简洁哦！(｀・ω・´)</p><div class="article-bounded"><div class="article-table"><table><thead><tr><th>相关信息</th><th>链接</th></tr></thead><tbody><tr><td>文章中所有代码的地址</td><td><a href="https://github.com/xujiaji/learn-android/tree/learn-dagger" target="_blank" rel="noopener">https://github.com/xujiaji/learn-android/tree/learn-dagger</a></td></tr><tr><td>本文作者（欢迎关注）</td><td><a href="https://juejin.im/user/5829eafe2f301e0057799f1a" target="_blank" rel="noopener">奏响曲</a></td></tr><tr><td>Github</td><td><a href="https://github.com/xujiaji/" target="_blank" rel="noopener">https://github.com/xujiaji/</a></td></tr><tr><td>个人博客</td><td><a href="https://blog.xujiaji.com">https://blog.xujiaji.com</a></td></tr><tr><td>本文地址</td><td><a href="https://blog.xujiaji.com/post/learn-dagger">https://blog.xujiaji.com/post/learn-dagger</a></td></tr></tbody></table></div></div><p>如果文中内容有误或不合适欢迎您的指正！</p><p>over</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;article-img&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/learn-dagger/main-mind.png&quot; alt=&quot;脑图&quot; data-zoomable=&quot;&quot;
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.xujiaji.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="分析框架" scheme="https://blog.xujiaji.com/tags/%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Dagger" scheme="https://blog.xujiaji.com/tags/Dagger/"/>
    
  </entry>
  
  <entry>
    <title>python web 从Win部署到ubuntu小记</title>
    <link href="https://blog.xujiaji.com/post/python_server_deploy/index.html"/>
    <id>https://blog.xujiaji.com/post/python_server_deploy/index.html</id>
    <published>2018-05-28T07:54:30.000Z</published>
    <updated>2019-04-08T06:56:53.997Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章主要是用来记录我将python后台部署到amazon ec2服务器的全过程，以及一些坑坑洼洼。希望对有需要的朋友提供帮助，并且往后也好快速回忆。我的学习地址:<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323392805925d5b69ddad514511bf0391fe2a0df2b0000" target="_blank" rel="noopener">廖雪峰 实战 Day15-部署Web App</a><br><a id="more"></a></p><h2 id="注册并创建Amazon-EC2实例">注册并创建Amazon EC2实例<a href="post/python_server_deploy#注册并创建Amazon-EC2实例"></a></h2><ol><li>首先需要创建一个账号，有12 个月的免费套餐访问权限。注册流程有点麻烦，需要添加信用卡，支付1美元来认证账号(•́へ•́╬)。然后验证码居然是打电话认证，电脑上会显示验证码，随后电话来了等她说完，手机输入验证码“#”结束。到此因该都注册成功了！</li><li>找到EC2启动实例，创建一个ubuntu的实例，默认创建就OK了。</li><li>创建结束会让你输入一个ssh密钥的名称，你输入一个邮箱之类的就行了，随后会帮你生成一个<code>.pem</code>的私密，下载下来放好咯！这玩意儿就相当于登录密码了。</li><li>编辑安全组，添加22端口和80端口的访问权限<ul><li>在EC2管理界面将你创建的实例拉拉到最右边有个叫安全组的栏目，点进去<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//an_quan_zu1.png" alt=""></li><li>进去后点击入站-编辑<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//an_quan_zu2.png" alt=""></li><li>创建SSH入站规则，绑定自己的IP地址，第3步选了后会自动获取你的ip地址。如下图<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//an_quan_zu3.png" alt=""></li><li>您还需要添加http 80端口，并且设置为任何位置都可访问，如下：<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//20180530103931.png" alt=""></li></ul></li></ol><h2 id="连接到服务器">连接到服务器<a href="post/python_server_deploy#连接到服务器"></a></h2><h3 id="使用-PuTTY-连接到服务器">使用 PuTTY 连接到服务器<a href="post/python_server_deploy#使用-PuTTY-连接到服务器"></a></h3><ol><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">下载并安装PuTTY</a></li><li>找到PuTTY安装目录，双击打开<code>puttygen.exe</code></li><li>加载之前您下载的<code>.pem</code>文件，需要转换一下私密格式<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//load_pem.png" alt=""></li><li>点击save进行保存<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//save_key.png" alt=""><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//server_key2.png" alt=""></li><li>打开PuTTY进行配置<ol><li>配置SSH<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//load_ppk.png" alt=""></li><li>配置主机地址(ubuntu服务器地址前需要加上<code>ubuntu@</code>)，并保存配置。主机地址<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//server_address.png" alt=""></li><li>最后输入配置名称点击保存，下次就可以直接双击已配置好的选项直接进入。<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//server_config_save.png" alt=""></li><li>打开后也许也许你会发现进不去！这时你需要检查服务器<code>安全组</code>里是否添加SSH（如果最后也无法连接可把ssh来源改为任何位置试试），还有检查window防火墙是否开放22端口（可关闭防火墙试试，或在防火墙高级规则里面添加22端口访问）<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//cannot_in_server.png" alt=""></li></ol></li></ol><h3 id="WinSCP-管理服务器文件资源">WinSCP 管理服务器文件资源<a href="post/python_server_deploy#WinSCP-管理服务器文件资源"></a></h3><ol><li><a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener">下载地址</a></li><li>安装时会自动检测到PuTTY的配置，选择导入<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//install_winSCP.png" alt=""><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//install_winSCP2.png" alt=""></li><li>直接选中你的站点登录就OK了。</li><li>也许你会遇到没有权限无法创建文件的情况<a href="https://blog.csdn.net/xuejinliang/article/details/52301349" target="_blank" rel="noopener">winscp普通用户上传文件没有权限解决</a></li></ol><h2 id="配置python-web环境">配置python web环境<a href="post/python_server_deploy#配置python-web环境"></a></h2><blockquote><p>接下来可以直接到这里去看部署过程了 <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323392805925d5b69ddad514511bf0391fe2a0df2b0000" target="_blank" rel="noopener">廖雪峰 Python Day 15 - 部署Web App</a></p></blockquote><ol><li>此时我们通过PuTTY登录服务器，我们输入python，会发现进入的是python2的版本<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//python_version1.png" alt=""></li><li>我们需要安装python 3.6的版本，注意我们不要直接<code>apt-get install python3</code>，这样会直接安装成3.5的版本，然而aiomysql这个库不支持，折腾了许久。pip3也需要自己手动去安装的。</li><li><a href="https://www.cnblogs.com/weiyiming007/p/9075986.html" target="_blank" rel="noopener">Ubuntu16.04安装Python3.6 和pip</a></li><li>安装<code>Nginx</code>丶<code>Supervisor</code>丶<code>MySQL</code>命令：<code>$ sudo apt-get install nginx supervisor mysql-server</code><ul><li>mysql安装的时候需要配置密码，密码得记好了</li><li>编辑mysql配置文件设置utf8编码，输入命令：<code>vim /etc/mysql/my.cnf</code></li><li><code>i</code>进入输入模式，添加下面配置, <code>Esc</code>进入命令模式 <code>:wq</code>进行保存退出</li><li>重启MySQL<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine = INNODB</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>5.将sql建数据库和表的配置文件传到服务器运行：<code>$ mysql -u root -p &lt; schema.sql</code><br><br>6.通过Navicat连接服务器数据库，这里的配置就跟本地的配置一样的，密码就是数据库的密码。然后我们去配置SSH<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//navicat_config1.png" alt=""><br>ip地址就是之前我们在网页后台看到的地址，端口号默认的22，选择公钥验证，私密选择我们之前用<code>puttygen.exe</code>导出的<code>.ppk</code>文件，密码短语就是创建服务器后创建的密钥名称（可以在EC2网页后台看到密钥名称这一栏）<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//navicat_config2.png" alt=""><br>这下就爽了<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//navicat_config3.png" alt=""><br><br>7.安装Web App用到的python库，命令：<code>$ sudo pip3 install jinja2 aiomysql aiohttp</code></p><h2 id="部署">部署<a href="post/python_server_deploy#部署"></a></h2><ol><li>安装自动化部署工具Fabric，命令：<code>pip3 install fabric3</code></li><li>此处都可以去看<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323392805925d5b69ddad514511bf0391fe2a0df2b0000" target="_blank" rel="noopener">廖老师所讲的部署</a>，因为教程是安装的python2环境下的fabric所以在这里绕了很久。</li><li>配置的时候我们配置验证的时候我们可以直接用ssh来进行验证，<code>env.hosts</code>就是之前我们配置PuTTY是的主机地址，<code>env.key_filename</code>就是我们下载的ssh私密<code>.pem</code><br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy//fabric_config.png" alt=""></li><li>我的<code>fabric</code>配置：<code>fabfile.py</code><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fabfile.py</span></span><br><span class="line"><span class="keyword">import</span> os, re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入Fabric API:</span></span><br><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器登录用户名:</span></span><br><span class="line"><span class="comment"># env.user = 'ubuntu'</span></span><br><span class="line"><span class="comment"># sudo用户为root:</span></span><br><span class="line"><span class="comment"># env.sudo_user = 'ubuntu'</span></span><br><span class="line"><span class="comment"># 服务器地址，可以有多个，依次部署:</span></span><br><span class="line">env.hosts = [<span class="string">'ubuntu@ec2-18-220-216-89.us-east-2.compute.amazonaws.com'</span>]</span><br><span class="line">env.key_filename = <span class="string">'~/.ssh/jiajixuqqcom.pem'</span></span><br><span class="line"><span class="comment"># env.ssh_config_path = '~/.ssh/config'</span></span><br><span class="line"><span class="comment"># env.use_ssh_config = True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器MySQL用户名和口令:</span></span><br><span class="line">db_user = <span class="string">'root'</span></span><br><span class="line">db_password = <span class="string">'6Sb8qzM38'</span></span><br><span class="line"></span><br><span class="line">_TAR_FILE = <span class="string">'dist-awesome.tar.gz'</span></span><br><span class="line">_REMOTE_TMP_TAR = <span class="string">'/tmp/%s'</span> % _TAR_FILE</span><br><span class="line">_REMOTE_BASE_DIR = <span class="string">'/srv/awesome'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touchfile</span><span class="params">()</span>:</span>                         <span class="comment"># 随便创建一个任务，用来测试</span></span><br><span class="line">    run(<span class="string">'touch /tmp/www.txt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deploy</span><span class="params">()</span>:</span></span><br><span class="line">    newdir = <span class="string">'www-%s'</span> % _now()</span><br><span class="line">    <span class="comment"># 删除已有的tar文件:</span></span><br><span class="line">    run(<span class="string">'rm -f %s'</span> % _REMOTE_TMP_TAR)</span><br><span class="line">    <span class="comment"># 上传新的tar文件:</span></span><br><span class="line">    put(<span class="string">'dist/%s'</span> % _TAR_FILE, _REMOTE_TMP_TAR)</span><br><span class="line">    <span class="comment"># 创建新目录:</span></span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        sudo(<span class="string">'mkdir %s'</span> % newdir)</span><br><span class="line">    <span class="comment"># 解压到新目录:</span></span><br><span class="line">    <span class="keyword">with</span> cd(<span class="string">'%s/%s'</span> % (_REMOTE_BASE_DIR, newdir)):</span><br><span class="line">        sudo(<span class="string">'tar -xzvf %s'</span> % _REMOTE_TMP_TAR)</span><br><span class="line">        <span class="comment"># 需要添加权限浏览器才能访问</span></span><br><span class="line">        sudo(<span class="string">'chmod -R 775 static/'</span>)</span><br><span class="line">        sudo(<span class="string">'chmod 775 favicon.ico'</span>)</span><br><span class="line">        <span class="comment"># 由于app.py的文件格式有问题，转换一下</span></span><br><span class="line">        run(<span class="string">'dos2unix app.py'</span>)</span><br><span class="line">    <span class="comment"># 重置软链接:</span></span><br><span class="line">    <span class="keyword">with</span> cd(_REMOTE_BASE_DIR):</span><br><span class="line">        sudo(<span class="string">'rm -f www'</span>)</span><br><span class="line">        sudo(<span class="string">'ln -s %s www'</span> % newdir)</span><br><span class="line">        sudo(<span class="string">'chown ubuntu:ubuntu www'</span>)</span><br><span class="line">        sudo(<span class="string">'chown -R ubuntu:ubuntu %s'</span> % newdir)</span><br><span class="line">    <span class="comment"># 重启Python服务和nginx服务器:</span></span><br><span class="line">    <span class="keyword">with</span> settings(warn_only=<span class="keyword">True</span>):</span><br><span class="line">        sudo(<span class="string">'supervisorctl stop awesome'</span>)</span><br><span class="line">        sudo(<span class="string">'supervisorctl start awesome'</span>)</span><br><span class="line">        sudo(<span class="string">'/etc/init.d/nginx reload'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">()</span>:</span></span><br><span class="line">    includes = [<span class="string">'static'</span>, <span class="string">'templates'</span>, <span class="string">'transwarp'</span>, <span class="string">'favicon.ico'</span>, <span class="string">'*.py'</span>]</span><br><span class="line">    excludes = [<span class="string">'test'</span>, <span class="string">'.*'</span>, <span class="string">'*.pyc'</span>, <span class="string">'*.pyo'</span>]</span><br><span class="line">    local(<span class="string">'rm -f dist/%s'</span> % _TAR_FILE)</span><br><span class="line">    <span class="keyword">with</span> lcd(os.path.join(os.path.abspath(<span class="string">'.'</span>), <span class="string">'www'</span>)):</span><br><span class="line">        cmd = [<span class="string">'tar'</span>, <span class="string">'--dereference'</span>, <span class="string">'-czvf'</span>, <span class="string">'../dist/%s'</span> % _TAR_FILE]</span><br><span class="line">        cmd.extend([<span class="string">'--exclude=\'%s\''</span> % ex <span class="keyword">for</span> ex <span class="keyword">in</span> excludes])</span><br><span class="line">        cmd.extend(includes)</span><br><span class="line">        local(<span class="string">' '</span>.join(cmd))</span><br></pre></td></tr></table></figure></li></ol><h2 id="添加https">添加https<a href="post/python_server_deploy#添加https"></a></h2><p>添加这个的原因嘛！就不加多少的啦！来看如何如何做吧！</p><ol><li>我是在阿里云上面找的一个免费版，可以在这里找到，进去后点击立即购买<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy/aliyun_ac1.png" alt=""></li><li>选择免费类型，如下操作<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy/aliyun_ac2.png" alt=""></li><li>然后就是需要填写一些您的个人信息和需要绑定的域名，比如我绑定：<code>www.xujiaji.com</code>，提交审核。（此时可能需要等个半个来小时审核）</li><li>点击下载<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy/aliyun_ac_3.png" alt=""></li><li>点击下载证书for Nginx，然后将压缩包解压得到两个文件。我们将这两个文件放到如下位置，<code>/ect/nginx/</code>是服务器nginx的安装目录，<code>cert</code>是新建的目录，就放这里面<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy/config_https1.png" alt=""></li><li>然后我们编辑<code>/etc/nginx/sites-available/awesome</code>，我们将这些东西直接拷贝过来<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/python-web-deploy/config_https2.png" alt=""></li><li>重启nginx：<code>sudo /etc/init.d/nginx reload</code></li><li>配置完成后您可能还是无法访问https（我就在这纠结了半天），注意需要在服务器安全组添加所有用户对<code>443</code>端口的访问权限。</li><li>下面是我的nginx整体配置代码，含义请看注释<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 监听80端口，作用是将用户http的请求转发到https</span><br><span class="line">    listen      80;</span><br><span class="line">    # 绑定的域名</span><br><span class="line">    server_name www.xujiaji.com;</span><br><span class="line">    rewrite ^(.*)$  https://www.xujiaji.com permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    #listen      80;</span><br><span class="line">    # 下面这部分就是从阿里云下载AC认证那里直接拷贝过来的配置</span><br><span class="line">    listen 443;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate   cert/214731123750166.pem;</span><br><span class="line">    ssl_certificate_key  cert/214731123750166.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;    </span><br><span class="line"></span><br><span class="line">    # 代理的服务器根目录 日志</span><br><span class="line">    root       /srv/awesome/www;</span><br><span class="line">    access_log /srv/awesome/log/access_log;</span><br><span class="line">    error_log  /srv/awesome/log/error_log;</span><br><span class="line"></span><br><span class="line">    server_name www.xujiaji.com;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 1m;</span><br><span class="line"></span><br><span class="line">    gzip            on;</span><br><span class="line">    gzip_min_length 1024;</span><br><span class="line">    gzip_buffers    4 8k;</span><br><span class="line">    gzip_types      text/css application/x-javascript application/json;</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    location /favicon.ico &#123;</span><br><span class="line">        root /srv/awesome/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^\/static\/.*$ &#123;</span><br><span class="line">        root /srv/awesome/www;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://127.0.0.1:9000;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章主要是用来记录我将python后台部署到amazon ec2服务器的全过程，以及一些坑坑洼洼。希望对有需要的朋友提供帮助，并且往后也好快速回忆。我的学习地址:&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323392805925d5b69ddad514511bf0391fe2a0df2b0000&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰 实战 Day15-部署Web App&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blog.xujiaji.com/categories/Python/"/>
    
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="https://blog.xujiaji.com/tags/Linux/"/>
    
      <category term="Python" scheme="https://blog.xujiaji.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android 无缝换肤深入了解与使用</title>
    <link href="https://blog.xujiaji.com/post/android-skin/index.html"/>
    <id>https://blog.xujiaji.com/post/android-skin/index.html</id>
    <published>2018-04-21T01:03:41.000Z</published>
    <updated>2019-04-08T06:55:07.832Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>思路整体结构</p></blockquote><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/image/android-skin/android-skin.svg" alt="Android 换肤" data-zoomable=""></p></div><h2 id="方案及轮子">方案及轮子<a href="post/android-skin#方案及轮子"></a></h2><ol><li>内部资源加载方案<ul><li>通过在BaseActivity中setTheme</li><li>不好实时的刷新，需要重新创建页面</li><li>存在需要解决哪些Vew需要刷新的问题</li></ul></li><li>自定义View<ul><li><a href="https://github.com/dersoncheng/MultipleTheme" target="_blank" rel="noopener">MultipleTheme</a></li><li>通过自定义View配合setTheme后立即刷新资源。</li><li>需要替换所有需要换肤的view</li></ul></li><li>自定义xml属性，Java中绑定view<ul><li><a href="https://github.com/hehonghui/Colorful" target="_blank" rel="noopener">Colorful</a></li><li>首先通过在java代码中添加view</li><li>然后setTheme设置当前页面主题</li><li>最后通过内部引用的上下文getTheme遍历view来修改资源</li></ul></li><li>动态资源加载方案<ul><li><a href="https://github.com/fengjundev/Android-Skin-Loader" target="_blank" rel="noopener">Android-Skin-Loader</a></li><li><a href="https://github.com/burgessjp/ThemeSkinning" target="_blank" rel="noopener">ThemeSkinning</a>（是上面那个框架的衍生，整篇就是研究的这框架）</li><li>resource替换：通过单独打包一个资源apk，只用来访问资源，资源名得与本身对应</li><li>无需关心皮肤多少，可下载，等等</li><li>准备采用该方案</li></ul></li></ol><h2 id="采用方案的技术点">采用方案的技术点<a href="post/android-skin#采用方案的技术点"></a></h2><ol><li>获取皮肤资源包apk的资源</li><li>自定义xml属性，用来标记需要换肤的view</li><li>获取并相应有换肤需求的布局<ul><li><a href="https://blog.csdn.net/u013085697/article/details/53898879" target="_blank" rel="noopener">LayoutInflater Factory使用基础与进阶</a></li><li><a href="https://blog.csdn.net/lmj623565791/article/details/51503977" target="_blank" rel="noopener">Android 探究 LayoutInflater setFactory</a></li></ul></li><li>其他<ul><li>扩展可自行添加所支持换肤的属性</li><li>改变状态栏颜色</li><li>改变字体</li></ul></li></ol><h2 id="采用方案的实现过程">采用方案的实现过程<a href="post/android-skin#采用方案的实现过程"></a></h2><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/image/android-skin/换肤框架流程.svg" alt="实现过程" data-zoomable=""></p></div><h2 id="加载皮肤apk获取里面的资源（为了得到皮肤apk-Resources对象）">加载皮肤apk获取里面的资源（为了得到皮肤apk  Resources对象）<a href="post/android-skin#加载皮肤apk获取里面的资源（为了得到皮肤apk-Resources对象）"></a></h2><blockquote><p>下面所有的代码位置，包括处理一些特殊问题的方案等等！</p></blockquote><p><a href="https://github.com/xujiaji/ThemeSkinning" target="_blank" rel="noopener">https://github.com/xujiaji/ThemeSkinning</a></p><blockquote><p>通过皮肤apk的全路径，可知道其包名（需要用包名来获取它的资源id）</p></blockquote><ul><li><code>skinPkgPath</code>是apk的全路径，通过<code>mInfo.packageName</code>就可以得到包名</li><li>代码位置：<a href="https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinManager.java" target="_blank" rel="noopener">SkinManager.java</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PackageManager mPm = context.getPackageManager();</span><br><span class="line">PackageInfo mInfo = mPm.getPackageArchiveInfo(skinPkgPath, PackageManager.GET_ACTIVITIES);</span><br><span class="line">skinPackageName = mInfo.packageName;</span><br></pre></td></tr></table></figure><blockquote><p>通过反射添加路径可以创建皮肤apk的AssetManager对象</p></blockquote><ul><li><code>skinPkgPath</code>是apk的全路径，添加路径的方法是AssetManager里一个隐藏的方法通过反射可以设置。</li><li>此时还可以用<code>assetManager</code>来访问apk里assets目录的资源。</li><li>想想如果更换的资源是放在assets目录下的，那么我们可以在这里动动手脚。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AssetManager assetManager = AssetManager.class.newInstance();</span><br><span class="line">Method addAssetPath = assetManager.getClass().getMethod(<span class="string">"addAssetPath"</span>, String.class);</span><br><span class="line">addAssetPath.invoke(assetManager, skinPkgPath);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>创建皮肤apk的资源对象</p></blockquote><ul><li>获取当前的app的Resources，主要是为了创建apk的Resources<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resources superRes = context.getResources();</span><br><span class="line">Resources skinResource = <span class="keyword">new</span> Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>当要通过资源id获取颜色的时候</p></blockquote><ol><li>先获取内置的颜色<code>int originColor = ContextCompat.getColor(context, resId);</code></li><li>如果没有外置皮肤apk资源或就用默认资源的情况下直接返回内置颜色</li><li>通过 <code>context.getResources().getResourceEntryName(resId);</code>获取资源id获取它的名字</li><li>通过<code>mResources.getIdentifier(resName, &quot;color&quot;, skinPackageName)</code>得到皮肤apk中该资源id。（resName：就是资源名字；skinPackegeName就是皮肤apk的包名）</li><li>如果没有获取到皮肤apk中资源id（也就是等于0）返回原来的颜色，否则返回<code>mResources.getColor(trueResId)</code></li></ol><p><em>通过<code>getIdentifier</code>方法可以通过名字来获取id，比如将第二个参数修改为<code>layout</code>、<code>mipmap</code>、<code>drawable</code>或<code>string</code>就是通过资源名字获取对应<code>layout目录</code>、<code>mipmap目录</code>、<code>drawable目录</code>或<code>string文件</code>里的资源id</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColor</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> originColor = ContextCompat.getColor(context, resId);</span><br><span class="line">    <span class="keyword">if</span> (mResources == <span class="keyword">null</span> || isDefaultSkin) &#123;</span><br><span class="line">        <span class="keyword">return</span> originColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String resName = context.getResources().getResourceEntryName(resId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> trueResId = mResources.getIdentifier(resName, <span class="string">"color"</span>, skinPackageName);</span><br><span class="line">    <span class="keyword">int</span> trueColor;</span><br><span class="line">    <span class="keyword">if</span> (trueResId == <span class="number">0</span>) &#123;</span><br><span class="line">        trueColor = originColor;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        trueColor = mResources.getColor(trueResId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> trueColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当要通过资源id获取图片的时候</p></blockquote><ol><li>和上面获取颜色是差不多的</li><li>只是在图片在<code>drawable</code>目录还是<code>mipmap</code>目录进行了判断</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Drawable <span class="title">getDrawable</span><span class="params">(<span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">    Drawable originDrawable = ContextCompat.getDrawable(context, resId);</span><br><span class="line">    <span class="keyword">if</span> (mResources == <span class="keyword">null</span> || isDefaultSkin) &#123;</span><br><span class="line">        <span class="keyword">return</span> originDrawable;</span><br><span class="line">    &#125;</span><br><span class="line">    String resName = context.getResources().getResourceEntryName(resId);</span><br><span class="line">    <span class="keyword">int</span> trueResId = mResources.getIdentifier(resName, <span class="string">"drawable"</span>, skinPackageName);</span><br><span class="line">    Drawable trueDrawable;</span><br><span class="line">    <span class="keyword">if</span> (trueResId == <span class="number">0</span>) &#123;</span><br><span class="line">        trueResId = mResources.getIdentifier(resName, <span class="string">"mipmap"</span>, skinPackageName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trueResId == <span class="number">0</span>) &#123;</span><br><span class="line">        trueDrawable = originDrawable;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">22</span>) &#123;</span><br><span class="line">            trueDrawable = mResources.getDrawable(trueResId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            trueDrawable = mResources.getDrawable(trueResId, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> trueDrawable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对所有view进行拦截处理">对所有view进行拦截处理<a href="post/android-skin#对所有view进行拦截处理"></a></h2><ul><li>自己实现<code>LayoutInflater.Factory2</code>接口来替换系统默认的</li></ul><blockquote><p>那么如何替换呢？</p></blockquote><ul><li>就这样通过在Activity方法中super.onCreate之前调用</li><li>代码位置：<a href="https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/base/SkinBaseActivity.java" target="_blank" rel="noopener">SkinBaseActivity.java</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    mSkinInflaterFactory = <span class="keyword">new</span> SkinInflaterFactory(<span class="keyword">this</span>);<span class="comment">//自定义的Factory</span></span><br><span class="line">    LayoutInflaterCompat.setFactory2(getLayoutInflater(), mSkinInflaterFactory);</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们使用的Activity一般是<code>AppCompatActivity</code>在里面的onCreate方法中也有对其的设置和初始化，但是setFactory方法只能被调用一次，导致默认的一些初始化操作没有被调用，这么操作？</p></blockquote><ul><li>这是实现了<code>LayoutInflater.Factory2</code>接口的类，看<code>onCreateView</code>方法中。在进行其他操作前调用<code>delegate.createView(parent, name, context, attrs)</code>处理系统的那一套逻辑。</li><li><code>attrs.getAttributeBooleanValue</code>获取当前view是否是可换肤的，第一个参数是xml名字空间，第二个参数是属性名，第三个参数是默认值。这里相当于是<code>attrs.getAttributeBooleanValue(&quot;http://schemas.android.com/android/skin&quot;, &quot;enable&quot;, false)</code></li><li>代码位置：<a href="https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinInflaterFactory.java" target="_blank" rel="noopener">SkinInflaterFactory.java</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkinInflaterFactory</span> <span class="keyword">implements</span> <span class="title">LayoutInflater</span>.<span class="title">Factory2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppCompatActivity mAppCompatActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SkinInflaterFactory</span><span class="params">(AppCompatActivity appCompatActivity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mAppCompatActivity = appCompatActivity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(String s, Context context, AttributeSet attributeSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(View parent, String name, Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isSkinEnable = attrs.getAttributeBooleanValue(SkinConfig.NAMESPACE, SkinConfig.ATTR_SKIN_ENABLE, <span class="keyword">false</span>);<span class="comment">//是否是可换肤的view</span></span><br><span class="line">        AppCompatDelegate delegate = mAppCompatActivity.getDelegate();</span><br><span class="line">        View view = delegate.createView(parent, name, context, attrs);<span class="comment">//处理系统逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> TextView &amp;&amp; SkinConfig.isCanChangeFont()) &#123;</span><br><span class="line">            TextViewRepository.add(mAppCompatActivity, (TextView) view);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isSkinEnable || SkinConfig.isGlobalSkinApply()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                view = ViewProducer.createViewFromTag(context, name, attrs);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parseSkinAttr(context, attrs, view);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当内部的初始化操作完成后，如果判断没有创建好view，则需要我们自己去创建view</p></blockquote><ul><li>看上一步是通过<code>ViewProducer.createViewFromTag(context, name, attrs)</code>来创建</li><li>那么直接来看一下这个类<code>ViewProducer</code>，原理功能请看代码注释</li><li>在AppCompatViewInflater中你可以看到相同的代码</li><li>代码位置：<a href="https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/ViewProducer.java" target="_blank" rel="noopener">ViewProducer.java</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewProducer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该处定义的是view构造方法的参数，也就是View两个参数的构造方法：public View(Context context, AttributeSet attrs)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] mConstructorArgs = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//存放反射得到的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Constructor&lt;? extends View&gt;&gt; sConstructorMap</span><br><span class="line">            = <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//这是View两个参数的构造器所对应的两个参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] sConstructorSignature = <span class="keyword">new</span> Class[]&#123;</span><br><span class="line">            Context.class, AttributeSet.class&#125;;</span><br><span class="line">    <span class="comment">//如果是系统的View或ViewGroup在xml中并不是全路径的，通过反射来实例化是需要全路径的，这里列出来它们可能出现的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] sClassPrefixList = &#123;</span><br><span class="line">            <span class="string">"android.widget."</span>,</span><br><span class="line">            <span class="string">"android.view."</span>,</span><br><span class="line">            <span class="string">"android.webkit."</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> View <span class="title">createViewFromTag</span><span class="params">(Context context, String name, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">"view"</span>)) &#123;<span class="comment">//如果是view标签，则获取里面的class属性（该View的全名）</span></span><br><span class="line">            name = attrs.getAttributeValue(<span class="keyword">null</span>, <span class="string">"class"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//需要传入构造器的两个参数的值</span></span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = context;</span><br><span class="line">            mConstructorArgs[<span class="number">1</span>] = attrs;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123;<span class="comment">//如果不包含小点，则是内部View</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sClassPrefixList.length; i++) &#123;<span class="comment">//由于不知道View具体在哪个路径，所以通过循环所有路径，直到能实例化或结束</span></span><br><span class="line">                    <span class="keyword">final</span> View view = createView(context, name, sClassPrefixList[i]);</span><br><span class="line">                    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> view;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//否则就是自定义View</span></span><br><span class="line">                <span class="keyword">return</span> createView(context, name, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//如果抛出异常，则返回null，让LayoutInflater自己去实例化</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 清空当前数据，避免和下次数据混在一起</span></span><br><span class="line">            mConstructorArgs[<span class="number">0</span>] = <span class="keyword">null</span>;</span><br><span class="line">            mConstructorArgs[<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> View <span class="title">createView</span><span class="params">(Context context, String name, String prefix)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, InflateException </span>&#123;</span><br><span class="line">        <span class="comment">//先从缓存中获取当前类的构造器</span></span><br><span class="line">        Constructor&lt;? extends View&gt; constructor = sConstructorMap.get(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (constructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果缓存中没有创建过，则尝试去创建这个构造器。通过类加载器加载这个类，如果是系统内部View由于不是全路径的，则前面加上</span></span><br><span class="line">                Class&lt;? extends View&gt; clazz = context.getClassLoader().loadClass(</span><br><span class="line">                        prefix != <span class="keyword">null</span> ? (prefix + name) : name).asSubclass(View.class);</span><br><span class="line">                <span class="comment">//获取构造器</span></span><br><span class="line">                constructor = clazz.getConstructor(sConstructorSignature);</span><br><span class="line">                <span class="comment">//将构造器放入缓存</span></span><br><span class="line">                sConstructorMap.put(name, constructor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置为无障碍（设置后即使是私有方法和成员变量都可访问和修改，除了final修饰的）</span></span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//实例化</span></span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance(mConstructorArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// We do not want to catch these, lets return null and let the actual LayoutInflater</span></span><br><span class="line">            <span class="comment">// try</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当然还有另外的方式来创建，就是直接用LayoutInflater内部的那一套</li><li>将<code>view = ViewProducer.createViewFromTag(context, name, attrs);</code>删除，换成下方代码：</li><li>代码位置：<a href="https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinInflaterFactory.java" target="_blank" rel="noopener">SkinInflaterFactory.java</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater inflater = mAppCompatActivity.getLayoutInflater();</span><br><span class="line"><span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>))<span class="comment">//如果为系统内部的View则，通过循环这几个地方来实例化View，道理跟上面ViewProducer里面一样</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (String prefix : sClassPrefixList)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            view = inflater.createView(name, prefix, attrs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        view = inflater.createView(name, <span class="keyword">null</span>, attrs);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e)</span><br><span class="line">    &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>sClassPrefixList</code>的定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] sClassPrefixList = &#123;</span><br><span class="line">        <span class="string">"android.widget."</span>,</span><br><span class="line">        <span class="string">"android.view."</span>,</span><br><span class="line">        <span class="string">"android.webkit."</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最后是最终的拦截获取需要换肤的View的部分，也就是上面<code>SkinInflaterFactory</code>类的<code>onCreateView</code>最后调用的<code>parseSkinAttr</code>方法</p></blockquote><ul><li>定义类一个成员来保存所有需要换肤的View, SkinItem里面的逻辑就是定义了设置换肤的方法。如：View的setBackgroundColor或setColor等设置换肤就是靠它。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;View, SkinItem&gt; mSkinItemMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><ul><li>SkinAttr: 需要换肤处理的xml属性，如何定义请参照官方文档：<a href="https://github.com/burgessjp/ThemeSkinning" target="_blank" rel="noopener">https://github.com/burgessjp/ThemeSkinning</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSkinAttr</span><span class="params">(Context context, AttributeSet attrs, View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存需要换肤处理的xml属性</span></span><br><span class="line">    List&lt;SkinAttr&gt; viewAttrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//变量该view的所有属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attrs.getAttributeCount(); i++) &#123;</span><br><span class="line">        String attrName = attrs.getAttributeName(i);<span class="comment">//获取属性名</span></span><br><span class="line">        String attrValue = attrs.getAttributeValue(i);<span class="comment">//获取属性值</span></span><br><span class="line">        <span class="comment">//如果属性是style，例如xml中设置：style="@style/test_style"</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"style"</span>.equals(attrName)) &#123;</span><br><span class="line">            <span class="comment">//可换肤的属性</span></span><br><span class="line">            <span class="keyword">int</span>[] skinAttrs = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;android.R.attr.textColor, android.R.attr.background&#125;;</span><br><span class="line">            <span class="comment">//经常在自定义View时，构造方法中获取属性值的时候使用到。</span></span><br><span class="line">            <span class="comment">//这里通过传入skinAttrs，TypeArray中将会包含这两个属性和值，如果style里没有那就没有 - -</span></span><br><span class="line">            TypedArray a = context.getTheme().obtainStyledAttributes(attrs, skinAttrs, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">//获取属性对应资源的id，第一个参数这里对应下标的就是上面skinAttrs数组里定义的下标，第二个参数是没有获取到的默认值</span></span><br><span class="line">            <span class="keyword">int</span> textColorId = a.getResourceId(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> backgroundId = a.getResourceId(<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (textColorId != -<span class="number">1</span>) &#123;<span class="comment">//如果有颜色属性</span></span><br><span class="line">                <span class="comment">//&lt;style name="test_style"&gt;</span></span><br><span class="line">                    <span class="comment">//&lt;item name="android:textColor"&gt;@color/colorAccent&lt;/item&gt;</span></span><br><span class="line">                    <span class="comment">//&lt;item name="android:background"&gt;@color/colorPrimary&lt;/item&gt;</span></span><br><span class="line">                <span class="comment">//&lt;/style&gt;</span></span><br><span class="line">                <span class="comment">//以上边的参照来看</span></span><br><span class="line">                <span class="comment">//entryName就是colorAccent</span></span><br><span class="line">                String entryName = context.getResources().getResourceEntryName(textColorId);</span><br><span class="line">                <span class="comment">//typeName就是color</span></span><br><span class="line">                String typeName = context.getResources().getResourceTypeName(textColorId);</span><br><span class="line">                <span class="comment">//创建一换肤属性实力类来保存这些信息</span></span><br><span class="line">                SkinAttr skinAttr = AttrFactory.get(<span class="string">"textColor"</span>, textColorId, entryName, typeName);</span><br><span class="line">                <span class="keyword">if</span> (skinAttr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    viewAttrs.add(skinAttr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (backgroundId != -<span class="number">1</span>) &#123;<span class="comment">//如果有背景属性</span></span><br><span class="line">                String entryName = context.getResources().getResourceEntryName(backgroundId);</span><br><span class="line">                String typeName = context.getResources().getResourceTypeName(backgroundId);</span><br><span class="line">                SkinAttr skinAttr = AttrFactory.get(<span class="string">"background"</span>, backgroundId, entryName, typeName);</span><br><span class="line">                <span class="keyword">if</span> (skinAttr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    viewAttrs.add(skinAttr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            a.recycle();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否是支持的属性，并且值是引用的，如：@color/red</span></span><br><span class="line">        <span class="keyword">if</span> (AttrFactory.isSupportedAttr(attrName) &amp;&amp; attrValue.startsWith(<span class="string">"@"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//去掉属性值前面的“@”则为id</span></span><br><span class="line">                <span class="keyword">int</span> id = Integer.parseInt(attrValue.substring(<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//资源名字，如:text_color_selector</span></span><br><span class="line">                String entryName = context.getResources().getResourceEntryName(id);</span><br><span class="line">                <span class="comment">//资源类型，如:color、drawable</span></span><br><span class="line">                String typeName = context.getResources().getResourceTypeName(id);</span><br><span class="line">                SkinAttr mSkinAttr = AttrFactory.get(attrName, id, entryName, typeName);</span><br><span class="line">                <span class="keyword">if</span> (mSkinAttr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    viewAttrs.add(mSkinAttr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                SkinL.e(TAG, e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否有需要换肤的属性？</span></span><br><span class="line">    <span class="keyword">if</span> (!SkinListUtils.isEmpty(viewAttrs)) &#123;</span><br><span class="line">        SkinItem skinItem = <span class="keyword">new</span> SkinItem();</span><br><span class="line">        skinItem.view = view;</span><br><span class="line">        skinItem.attrs = viewAttrs;</span><br><span class="line">        mSkinItemMap.put(skinItem.view, skinItem);</span><br><span class="line">        <span class="comment">//是否换肤</span></span><br><span class="line">        <span class="keyword">if</span> (SkinManager.getInstance().isExternalSkin() ||</span><br><span class="line">                SkinManager.getInstance().isNightMode()) &#123;<span class="comment">//如果当前皮肤来自于外部或者是处于夜间模式</span></span><br><span class="line">            skinItem.apply();<span class="comment">//应用于这个view</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="采用方案的注意事项和疑问">采用方案的注意事项和疑问<a href="post/android-skin#采用方案的注意事项和疑问"></a></h2><ol><li>可能系统会更改相关方法，但好处大于弊端</li><li>插件化也是外置apk来加载，如何做到呢？<ul><li>占时不去研究</li></ul></li><li>皮肤从网络上下载到哪个目录？如何断定皮肤已经下载？<ul><li>可以通过<code>SkinFileUtils</code>工具类调用<code>getSkinDir</code>方法获取皮肤的缓存目录</li><li>下载的时候可以直接下载到这个目录</li><li>有没有某个皮肤就判断该文件夹下有没有这个文件了</li></ul></li><li>如何不打包之前可以直接预览？<ul><li>想要能在打包前提前预览效果，而不每次想看一看效果就要打一个apk包</li><li>首先，大家都应该知道分渠道的概念。通过分渠道打包，因为我们能把资源也分成不同渠道的，运行不同渠道，所得到的资源是不一样的。</li><li>然后，我们在:<code>项目目录\app\src</code>，创建一个和渠道相同名字的目录。比如说有个<code>red</code>渠道。<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/android-skin/qudao.png" alt="渠道定义"> <img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/android-skin/red.png" alt="red渠道png"></li><li>最后，我们选编译的渠道为red，然后直接运行就可以看到效果了。如果可以直接把res拷贝到皮肤项目打包就行了。<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/android-skin/choose_build.png" alt="选择编译渠道"></li></ul></li><li>换肤对应的属性需要是View提供了set方法的的属性！<ul><li>如果没有提供则不能在java代码中设置值</li><li>如果是自定义View那么就添加对应方法</li><li>如果是系统或类库View，额(⊙o⊙)…</li></ul></li><li>换肤的属性值需要是@开头的数据引用，如：@color/red<ul><li>原因是因为固定的值一般不可能是需要换肤的属性，在<code>SkinInfaterFactory</code>的方法<code>parseSkinAttr</code>中有这样一句来进行过滤没有带@的属性值：<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/android-skin/guo_lv_@.png" alt="过滤没带@的属性值"></li><li>但此时，正好有一个自定义View没有按照常路出牌，它的值就是图片名字没有类型没有引用，通过java代码<code>context.getResources().getIdentifier(name, &quot;mipmap&quot;, context.getPackageName())</code>来获取图片资源（<a href="https://github.com/xujiaji/FlycoTabLayout" target="_blank" rel="noopener">参考这奇葩方式的库</a>）。但由于这个属性是需要换肤更换的属性，于是没办法，专门为这两个属性在<code>SkinInfaterFactory</code>的<code>parseSkinAttr</code>方法中写了个判断<img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/android-skin/dan_du_get_attr.png" alt="单独判断这两属性">。<a href="https://github.com/xujiaji/ThemeSkinning/blob/master/skinlibrary/src/main/java/solid/ren/skinlibrary/loader/SkinInflaterFactory.java" target="_blank" rel="noopener">参考这代码</a></li></ul></li></ol><h2 id="其他参考">其他参考<a href="post/android-skin#其他参考"></a></h2><ol><li><a href="https://www.jianshu.com/p/af7c0585dd5b" target="_blank" rel="noopener">Android主题换肤 无缝切换</a> <em>(主要参考对象，用的也是他修改<code>Android-Skin-Loader</code>后的框架<code>ThemeSkinning</code>）</em></li><li><a href="http://blog.zhaiyifan.cn/2015/09/10/Android%E6%8D%A2%E8%82%A4%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">Android换肤技术总结</a></li><li><a href="https://blog.csdn.net/singwhatiwanna/article/details/22597587" target="_blank" rel="noopener">Android apk动态加载机制的研究</a></li></ol><h2 id="涉及及其延生">涉及及其延生<a href="post/android-skin#涉及及其延生"></a></h2><ol><li>插件化开发，既然能这样获取资源，也能获取class文件</li><li>通过对view的拦截可以把某个控件整体替换掉。<br>比如AppCompatActivity将TextView偷偷替换成了AppCompatTextView等等。</li></ol><hr><blockquote><p>其他一些帮助信息：</p></blockquote><p>上面对应的代码片段都有对应路径哦！</p><p>这篇文章的全部代码，测试项目位置：<a href="https://github.com/xujiaji/ThemeSkinning" target="_blank" rel="noopener">https://github.com/xujiaji/ThemeSkinning</a></p><p>测试项目中的首页底部导航测试和修改位置：<a href="https://github.com/xujiaji/FlycoTabLayout" target="_blank" rel="noopener">https://github.com/xujiaji/FlycoTabLayout</a></p><p>下面这张Gif图片是测试项目运行的效果图：<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/blog/android-skin/skin_run.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;思路整体结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;article-img&quot;&gt;&lt;p&gt;&lt;img src=&quot;https://xujiaji.oss-cn-beijing.aliyuncs.com/image/android-ski
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.xujiaji.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="分析框架" scheme="https://blog.xujiaji.com/tags/%E5%88%86%E6%9E%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android开发-零碎笔记</title>
    <link href="https://blog.xujiaji.com/post/android-notes/index.html"/>
    <id>https://blog.xujiaji.com/post/android-notes/index.html</id>
    <published>2018-01-24T09:03:41.000Z</published>
    <updated>2019-04-08T06:55:02.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="垂直RecyclerView嵌套垂直RecyclerView滑动时出现的卡顿">垂直RecyclerView嵌套垂直RecyclerView滑动时出现的卡顿<a href="post/android-notes#垂直RecyclerView嵌套垂直RecyclerView滑动时出现的卡顿"></a></h2><p>原因：内部RecyclerView重复设置适配器导致的卡顿</p><p>解决：判断内部RecyclerView是否设置过适配器，如果没有才设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内部RecyclerView的获取和处理问题的代码</span></span><br><span class="line">RecyclerView rvItem = helper.getView(R.id.rvItem);</span><br><span class="line">rvItem.setNestedScrollingEnabled(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span>(rvItem.getAdapter() == <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(mContext);</span><br><span class="line">    layoutManager.setAutoMeasureEnabled(<span class="keyword">true</span>);</span><br><span class="line">    rvItem.setLayoutManager(layoutManager);</span><br><span class="line">    rvItem.setAdapter(<span class="keyword">new</span> OrderItemAdapter(item.getList()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ScrollView嵌套RecyclerView滑动滑动起来很吃力">ScrollView嵌套RecyclerView滑动滑动起来很吃力<a href="post/android-notes#ScrollView嵌套RecyclerView滑动滑动起来很吃力"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setNestedScrollingEnabled(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h2 id="RecyclerView嵌套RecyclerView时，刷新内部RecyclerView会跳动">RecyclerView嵌套RecyclerView时，刷新内部RecyclerView会跳动<a href="post/android-notes#RecyclerView嵌套RecyclerView时，刷新内部RecyclerView会跳动"></a></h2><p>原因：内部RecyclerView抢占了焦点</p><p>解决：将内部RecyclerView的焦点设置为false<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.setFocusableInTouchMode(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><h2 id="adb之Wifi连接手机">adb之Wifi连接手机<a href="post/android-notes#adb之Wifi连接手机"></a></h2><blockquote><p>查看当前设备<code>adb devices</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb devices</span><br><span class="line">7d1cbcbbdevice</span><br><span class="line">192.168.56.101:5555device</span><br></pre></td></tr></table></figure><blockquote><p>让adb重新启动，并监听端口5555<code>adb -s 设备名 tcpip 5555</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb -s 7d1cbcbb tcpip 5555</span><br><span class="line">restarting <span class="keyword">in</span> TCP mode port: 5555</span><br></pre></td></tr></table></figure><blockquote><p>连接<code>adb connect ip地址:端口</code>，在手机上查看连接的wifi地址，WiFi需要和电脑网络同网段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb connect 192.168.2.207:5555</span><br><span class="line">connected to 192.168.2.207:5555</span><br></pre></td></tr></table></figure><h2 id="空包签名">空包签名<a href="post/android-notes#空包签名"></a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore [keystore签名秘钥路径] -signedjar [apk输出路径] [apk输入路径（需要签名的空包）] [签名秘钥别名]</span><br></pre></td></tr></table></figure><h2 id="获取签名sha1">获取签名sha1<a href="post/android-notes#获取签名sha1"></a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore [签名路径]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;垂直RecyclerView嵌套垂直RecyclerView滑动时出现的卡顿&quot;&gt;垂直RecyclerView嵌套垂直RecyclerView滑动时出现的卡顿&lt;a href=&quot;post/android-notes#垂直RecyclerView嵌套垂直Recycler
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.xujiaji.com/categories/Android/"/>
    
    
      <category term="笔记" scheme="https://blog.xujiaji.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>HappyBubble-气泡对话框（根据被点击View位置显示、可定制）</title>
    <link href="https://blog.xujiaji.com/post/happy-bubble/index.html"/>
    <id>https://blog.xujiaji.com/post/happy-bubble/index.html</id>
    <published>2017-12-16T06:08:50.000Z</published>
    <updated>2019-04-08T06:55:29.450Z</updated>
    
    <content type="html"><![CDATA[<div class="article-bounded"><div class="article-table"><table><tbody><tr><td><a href="https://github.com/xujiaji/HappyBubble/releases/tag/demoApk" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Download-demo--apk-brightgreen.svg" alt="apk"></a></td><td><a href="https://bintray.com/xujiaji/maven/happy-bubble/1.1.7" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/bintray-1.1.7-brightgreen.svg" alt="maven"></a></td></tr></tbody></table></div></div><h1 id="HappyBubble">HappyBubble<a href="post/happy-bubble#HappyBubble"></a></h1><p><a href="https://github.com/xujiaji/HappyBubble" target="_blank" rel="noopener">Github</a></p><p>气泡布局的形状可以改变，如四角弧度、气泡颜色、箭头大小和阴影。</p><p>气泡Dialog可以根据被点击的view的位置来确定自己展示的位置。</p><p><a href="https://github.com/xujiaji/HappyBubble/blob/master/README-old.md" target="_blank" rel="noopener">旧文档</a></p><h2 id="更新">更新<a href="post/happy-bubble#更新"></a></h2><ul><li>1.1.7: 修复位置问题，修复<code>autoPosition</code>无效问题，修复横屏模式问题。<a href="https://github.com/xujiaji/HappyBubble/issues/13" target="_blank" rel="noopener">#13</a><a href="https://github.com/xujiaji/HappyBubble/issues/11" target="_blank" rel="noopener">#11</a><a href="https://github.com/xujiaji/HappyBubble/issues/10" target="_blank" rel="noopener">#10</a></li><li>1.1.6:<br><a href="https://github.com/xujiaji/HappyBubble/issues/9" target="_blank" rel="noopener">新增方向优先级:issues/9</a></li><li>1.1.5:<br><a href="https://github.com/xujiaji/HappyBubble/issues/8" target="_blank" rel="noopener">修复:issues/8</a></li><li>1.1.4：<br>①新增方法<code>setLayout(int width, int height, int margin)</code>，width（设置气泡的宽）、height（设置气泡的高）、margin（设置距离屏幕边缘的间距,只有当设置width或height为MATCH_PARENT才有效）。<br>②<code>autoPosition(true)</code>方法准备弃用（现在还可以用），使用新方法<code>autoPosition(Auto)</code>,如果两个都使用了会直接用<code>autoPosition(Auto)</code>。请参考下方“方法参考表”。<br>③感谢<a href="https://github.com/wolf8088521" target="_blank" rel="noopener">@wolf8088521</a>提供建议<a href="https://github.com/xujiaji/HappyBubble/issues/4" target="_blank" rel="noopener">#4</a></li><li>1.1.3：<br>①通过重新调用setClickedView可以直接更新当前dialog的所在位置。<br>②新添加setRelativeOffset(int)方法，设置dialog相对与被点击View的偏移（负值：向被点击view的中心偏移；正值：向被点击view的外侧偏移）<br>③<a href="app/src/main/java/com/xujiaji/happybubbletest/SetClickedViewTestActivity.java">测试页面SetClickedViewTestActivity.java</a></li></ul><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/1.1.3.gif" alt="1.1.3.gif" data-zoomable=""></p></div><ul><li><p>1.1.2：修复默认值没有适配屏幕</p></li><li><p>1.1.1：修复大小变化后，没有对应变化位置的问题；修复接触顶部偏位问题；</p></li><li><p>1.1.0：<br>①Dialog交互事件传递到Activity达到不在不关闭Dialog的情况下做其他Activity的操作。<br>②添加自动根据被点击View距离屏幕边缘的距离确定Dialog的位置。<br>③新增“autoPosition”和“setThroughEvent”方法，请参考“BubbleDialog方法参考表”<br><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/1.1.0.gif" alt="1.1.0.gif"></p></li><li><p>1.0.3:继续优化了点击在气泡之外才会被dismiss；修复了Dialog周围会有部分点击无法dismiss；</p></li><li><p>1.0.2:修复点击dialog边缘无法取消</p></li></ul><h2 id="哪些app使用了它？">哪些app使用了它？<a href="post/happy-bubble#哪些app使用了它？"></a></h2><div class="article-bounded"><div class="article-table"><table><thead><tr><th>玩清单</th></tr></thead><tbody><tr><td><a href="https://www.coolapk.com/apk/211388" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/xujiaji/Todo/master/app/src/main/res/mipmap-hdpi/ic_launcher.png" alt="Todo"></a></td></tr></tbody></table></div></div><h2 id="如何开始？">如何开始？<a href="post/happy-bubble#如何开始？"></a></h2><p>在你模块中的build.gradle添加上HappyBubble依赖</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'com.github.xujiaji:happy-bubble:1.1.7'</span></span><br></pre></td></tr></table></figure><h2 id="如何使用-HappyBubble-BubbleDialog？">如何使用 HappyBubble-BubbleDialog？<a href="post/happy-bubble#如何使用-HappyBubble-BubbleDialog？"></a></h2><blockquote><p>方法参考表</p></blockquote><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">addContentView</td><td style="text-align:center">View</td><td style="text-align:left">添加填充在气泡中的视图</td></tr><tr><td style="text-align:left">setClickedView</td><td style="text-align:center">View</td><td style="text-align:left">被点击的View（触发Dialog出现的View）</td></tr><tr><td style="text-align:left">setPosition</td><td style="text-align:center">enum … <br> <code>BubbleDialog.Position:</code><br><code>LEFT</code><br><code>TOP</code><br><code>RIGHT</code><br><code>BOTTOM</code></td><td style="text-align:left">BubbleDialog相对于被点击的view的位置。如果传入多个位置，那么最前面的位置优先级越高</td></tr><tr><td style="text-align:left">setOffsetX</td><td style="text-align:center">int</td><td style="text-align:left">如果您对dialog所展示的x轴位置不满，需要调整x轴方向偏移</td></tr><tr><td style="text-align:left">setOffsetY</td><td style="text-align:center">int</td><td style="text-align:left">如果您对dialog所展示的y轴位置不满，需要调整y轴方向偏移</td></tr><tr><td style="text-align:left">setBubbleLayout</td><td style="text-align:center">BubbleLayout</td><td style="text-align:left">自定义dialog的气泡布局</td></tr><tr><td style="text-align:left">setTransParentBackground</td><td style="text-align:center">-</td><td style="text-align:left">背景透明</td></tr><tr><td style="text-align:left">softShowUp</td><td style="text-align:center">-</td><td style="text-align:left">当气泡dialog中有EditText时，软键盘弹出会遮挡EditText时，dialog随软键盘上移。</td></tr><tr><td style="text-align:left">show</td><td style="text-align:center">-</td><td style="text-align:left">显示</td></tr><tr><td style="text-align:left">autoPosition</td><td style="text-align:center">enum <br><code>Auto:</code><br><code>AROUND</code><br><code>UP_AND_DOWN</code><br><code>LEFT_AND_RIGHT</code></td><td style="text-align:left">自动确定位置功能，显示在被点击View距离屏幕边缘的最大空间。开启后，“setPosition”功能失效。<br>AROUND：被点击View四周；<br>UP_AND_DOWN：被点击View上下显示；<br>LEFT_AND_RIGHT：被点击View左右显示；</td></tr><tr><td style="text-align:left">setThroughEvent</td><td style="text-align:center">boolean, boolean</td><td style="text-align:left">第一个参数isThroughEvent设置是否穿透Dialog手势交互。<br>第二个参数cancelable点击空白是否能取消Dialog，只有当”isThroughEvent=false”时才有效</td></tr><tr><td style="text-align:left">setRelativeOffset</td><td style="text-align:center">int</td><td style="text-align:left">设置dialog相对与被点击View的偏移（负值：向被点击view的中心偏移；正值：向被点击view的外侧偏移），设置后会直接影响setOffsetX和setOffsetY方法。</td></tr><tr><td style="text-align:left">setLayout</td><td style="text-align:center">int，int，int</td><td style="text-align:left">设置气泡的宽高和距离屏幕边缘的距离<br>第一个参数：width（设置气泡的宽）；<br>第二个参数：height（设置气泡的高）；<br>第三个参数：margin（设置距离屏幕边缘的间距,只有当设置width或height为MATCH_PARENT才有效）。<br>宽高单位为px或MATCH_PARENT</td></tr></tbody></table></div></div><h3 id="最简单的实现">最简单的实现<a href="post/happy-bubble#最简单的实现"></a></h3><div class="article-bounded"><div class="article-table"><table><tbody><tr><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/img_example1.png" alt="exampel1"></td><td><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/img_example2.png" alt="exampel2"></td></tr></tbody></table></div></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="向下偏移8dp">向下偏移8dp<a href="post/happy-bubble#向下偏移8dp"></a></h3><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/img_example3.png" alt="exampel3" data-zoomable=""></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton4)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setOffsetY(<span class="number">8</span>)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="当想要输入框随软键盘上移时">当想要输入框随软键盘上移时<a href="post/happy-bubble#当想要输入框随软键盘上移时"></a></h3><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/gif_example4.gif" alt="exampel4" data-zoomable=""></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton12)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .softShowUp()</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="自定义-BubbleLayout">自定义 BubbleLayout<a href="post/happy-bubble#自定义-BubbleLayout"></a></h3><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/20190407164328.png" alt="exampel5" data-zoomable=""></p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BubbleLayout bl = <span class="keyword">new</span> BubbleLayout(<span class="keyword">this</span>);</span><br><span class="line">bl.setBubbleColor(Color.YELLOW);</span><br><span class="line">bl.setShadowColor(Color.RED);</span><br><span class="line">bl.setLookLength(Util.dpToPx(<span class="keyword">this</span>, <span class="number">18</span>));</span><br><span class="line">bl.setLookWidth(Util.dpToPx(<span class="keyword">this</span>, <span class="number">24</span>));</span><br><span class="line">bl.setBubbleRadius(Util.dpToPx(<span class="keyword">this</span>, <span class="number">3</span>));</span><br><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view5, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton8)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setBubbleLayout(bl)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="自定义-BubbleDialog，可交互的-BubbleDialog">自定义 BubbleDialog，可交互的 BubbleDialog<a href="post/happy-bubble#自定义-BubbleDialog，可交互的-BubbleDialog"></a></h3><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/gif_example6.gif" alt="exampel6" data-zoomable=""></p></div><blockquote><p>1、布局</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"160dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button13"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button14"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button15"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button3"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、自定义 BubbleDialog</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义可操作性dialog</span></span><br><span class="line"><span class="comment"> * Created by JiajiXu on 17-12-11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOperateDialog</span> <span class="keyword">extends</span> <span class="title">BubbleDialog</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewHolder mViewHolder;</span><br><span class="line">    <span class="keyword">private</span> OnClickCustomButtonListener mListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomOperateDialog</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        setTransParentBackground();</span><br><span class="line">        setPosition(Position.TOP);</span><br><span class="line">        View rootView = LayoutInflater.from(context).inflate(R.layout.dialog_view4, <span class="keyword">null</span>);</span><br><span class="line">        mViewHolder = <span class="keyword">new</span> ViewHolder(rootView);</span><br><span class="line">        addContentView(rootView);</span><br><span class="line">        mViewHolder.btn13.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mViewHolder.btn14.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mViewHolder.btn15.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mListener.onClick(((Button)v).getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        Button btn13, btn14, btn15;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View rootView)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            btn13 = rootView.findViewById(R.id.button13);</span><br><span class="line">            btn14 = rootView.findViewById(R.id.button14);</span><br><span class="line">            btn15 = rootView.findViewById(R.id.button15);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickListener</span><span class="params">(OnClickCustomButtonListener l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mListener = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickCustomButtonListener</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String str)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、显示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CustomOperateDialog codDialog = <span class="keyword">new</span> CustomOperateDialog(<span class="keyword">this</span>)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setClickedView(mButton10);</span><br><span class="line">codDialog.setClickListener(<span class="keyword">new</span> CustomOperateDialog.OnClickCustomButtonListener()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mButton10.setText(<span class="string">"点击了："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">codDialog.show();</span><br></pre></td></tr></table></figure><h3 id="查看关于BappyDialog的使用代码">查看关于BappyDialog的使用代码<a href="post/happy-bubble#查看关于BappyDialog的使用代码"></a></h3><p><a href="app/src/main/java/com/xujiaji/happybubbletest/TestDialogActivity.java">TestDialogActivity 代码</a></p><h3 id="写法建议">写法建议<a href="post/happy-bubble#写法建议"></a></h3><p>根据<a href="https://juejin.im/user/57bda1ada633bd005d4bc2a9" target="_blank" rel="noopener">@hm</a>该朋友在<a href="https://juejin.im/post/5a333f0af265da431523f408" target="_blank" rel="noopener">文章</a>中反馈的多次点击后位置不对的问题，是由于多次对BappyDialog进行了设置导致，所以建议下方写法。(当然如果对重复调用setClickedView()方法设置不同的被点击的控件来更新位置有需要，是需要写在外面的。)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(mBubbleDialog == <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    mBubbleDialog = <span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton4)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setOffsetY(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">mBubbleDialog.show();</span><br></pre></td></tr></table></figure><hr><h2 id="如何使用-HappyBubble-BubbleLayout？">如何使用 HappyBubble-BubbleLayout？<a href="post/happy-bubble#如何使用-HappyBubble-BubbleLayout？"></a></h2><h3 id="在XML代码中设置属性值">在XML代码中设置属性值<a href="post/happy-bubble#在XML代码中设置属性值"></a></h3><blockquote><p>属性参照表</p></blockquote><div class="article-bounded"><div class="article-table"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:center">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">lookAt</td><td style="text-align:center">left, top, right, bottom</td><td style="text-align:left">箭头指向</td></tr><tr><td style="text-align:left">lookLength</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头的长度</td></tr><tr><td style="text-align:left">lookPosition</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头相对于x或y轴的位置</td></tr><tr><td style="text-align:left">lookWidth</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头的宽度</td></tr><tr><td style="text-align:left">bubbleColor</td><td style="text-align:center">color</td><td style="text-align:left">气泡的颜色</td></tr><tr><td style="text-align:left">bubbleRadius</td><td style="text-align:center">dimension</td><td style="text-align:left">气泡四角的圆弧</td></tr><tr><td style="text-align:left">bubblePadding</td><td style="text-align:center">dimension</td><td style="text-align:left">气泡边缘到BubbleLayout边缘的距离</td></tr><tr><td style="text-align:left">shadowRadius</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影的扩散大小</td></tr><tr><td style="text-align:left">shadowX</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影在x轴方向的偏移</td></tr><tr><td style="text-align:left">shadowY</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影在y轴方向的偏移</td></tr><tr><td style="text-align:left">shadowColor</td><td style="text-align:center">color</td><td style="text-align:left">阴影的颜色</td></tr></tbody></table></div></div><blockquote><p>xml 例子</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.xujiaji.happybubble.BubbleLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/bubbleLayout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookAt</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookLength</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookPosition</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookWidth</span>=<span class="string">"16dp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在java代码中定义属性值">在java代码中定义属性值<a href="post/happy-bubble#在java代码中定义属性值"></a></h3><blockquote><p>BubbleLayout 通过“set属性名”方法和invalidate方法来更新BubbleLayout。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mBubbleLayout.setLook(BubbleLayout.Look.LEFT);</span><br></pre></td></tr></table></figure><blockquote><p>查看更多</p></blockquote><p><a href="app/src/main/java/com/xujiaji/happybubbletest/MainActivity.java">MainActivity 代码</a></p><div class="article-img"><p><img src="https://xujiaji.oss-cn-beijing.aliyuncs.com/github/HappyBubble/gif1.gif" alt="GIF" data-zoomable=""></p></div><h3 id="demo-下载">demo 下载<a href="post/happy-bubble#demo-下载"></a></h3><p><a href="https://github.com/xujiaji/HappyBubble/releases/tag/demoApk" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Download-demo--apk-brightgreen.svg" alt="Download Demo"></a></p><hr><h1 id="License">License<a href="post/happy-bubble#License"></a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Copyright 2016 XuJiaji</span><br><span class="line"></span><br><span class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">you may not use this file except in compliance with the License.</span><br><span class="line">You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">Unless required by applicable law or agreed to in writing, software</span><br><span class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">See the License for the specific language governing permissions and</span><br><span class="line">limitations under the License.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;article-bounded&quot;&gt;&lt;div class=&quot;article-table&quot;&gt;&lt;table&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/xujiaji/HappyBubble/releases/t
      
    
    </summary>
    
      <category term="Android" scheme="https://blog.xujiaji.com/categories/Android/"/>
    
    
      <category term="Android" scheme="https://blog.xujiaji.com/tags/Android/"/>
    
      <category term="Library" scheme="https://blog.xujiaji.com/tags/Library/"/>
    
  </entry>
  
</feed>
