<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐佳吉的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-22T15:30:44.691Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xujiaji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HappyBubble-气泡对话框（根据被点击View位置显示、可定制）</title>
    <link href="http://yoursite.com/2017/12/16/happy-bubble/"/>
    <id>http://yoursite.com/2017/12/16/happy-bubble/</id>
    <published>2017-12-16T06:08:50.000Z</published>
    <updated>2017-12-22T15:30:44.691Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><a href="https://github.com/xujiaji/HappyBubble/releases" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Download-demo--apk-brightgreen.svg" alt="GitHub release"></a></td><td><a href="https://bintray.com/xujiaji/maven/happy-bubble/1.0.1" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/bintray-1.0.1-brightgreen.svg" alt="GitHub release"></a></td></tr></tbody></table><p><a href="https://github.com/xujiaji/HappyBubble" target="_blank" rel="noopener">Github</a></p><p>气泡布局的形状可以改变，如四角弧度、气泡颜色、箭头大小和阴影。</p><p>气泡Dialog可以根据被点击的view的位置来确定自己展示的位置。</p><h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始?"></a>如何开始?</h2><p>在你模块中的build.gradle添加上HappyBubble依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.github.xujiaji:happy-bubble:1.0.1&apos;</span><br></pre></td></tr></table></figure></p><h2 id="如何使用-HappyBubble-BubbleDialog"><a href="#如何使用-HappyBubble-BubbleDialog" class="headerlink" title="如何使用 HappyBubble-BubbleDialog?"></a>如何使用 HappyBubble-BubbleDialog?</h2><blockquote><p>方法参考表</p></blockquote><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:center">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">addContentView</td><td style="text-align:center">View</td><td style="text-align:left">添加填充在气泡中的视图</td></tr><tr><td style="text-align:left">setClickedView</td><td style="text-align:center">View</td><td style="text-align:left">被点击的View（触发Dialog出现的View）</td></tr><tr><td style="text-align:left">setPosition</td><td style="text-align:center">enum BubbleDialog.Position:LEFT, TOP, RIGHT, BOTTOM</td><td style="text-align:left">BubbleDialog相对于被点击的view的位置</td></tr><tr><td style="text-align:left">calBar</td><td style="text-align:center">boolean</td><td style="text-align:left">是否计算状态栏的高度（如果布局没有全屏，则需要计算）</td></tr><tr><td style="text-align:left">setOffsetX</td><td style="text-align:center">int</td><td style="text-align:left">如果您对dialog所展示的x轴位置不满，需要调整x轴方向偏移</td></tr><tr><td style="text-align:left">setOffsetY</td><td style="text-align:center">int</td><td style="text-align:left">如果您对dialog所展示的y轴位置不满，需要调整y轴方向偏移</td></tr><tr><td style="text-align:left">setBubbleLayout</td><td style="text-align:center">BubbleLayout</td><td style="text-align:left">自定义dialog的气泡布局</td></tr><tr><td style="text-align:left">setTransParentBackground</td><td style="text-align:center">-</td><td style="text-align:left">背景透明</td></tr><tr><td style="text-align:left">softShowUp</td><td style="text-align:center">-</td><td style="text-align:left">当气泡dialog中有EditText时，软键盘弹出会遮挡EditText时，dialog随软键盘上移。</td></tr><tr><td style="text-align:left">show</td><td style="text-align:center">-</td><td style="text-align:left">显示</td></tr></tbody></table><h3 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="image/happy-bubble/img_example1.png" alt="exampel1"></td><td><img src="image/happy-bubble/img_example2.png" alt="exampel2"></td></tr></tbody></table><blockquote><p>需要提供：Context、填充的View、被点击的View。<br><br>如果最外层布局没有全屏时，您需要计算状态栏的高度，否则会多向下偏移一个状态栏的高度。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="向下偏移8dp"><a href="#向下偏移8dp" class="headerlink" title="向下偏移8dp"></a>向下偏移8dp</h3><p><img src="image/happy-bubble/img_example3.png" alt="exampel3"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view3, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton4)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setOffsetY(<span class="number">8</span>)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure></p><h3 id="当想要输入框随软键盘上移时"><a href="#当想要输入框随软键盘上移时" class="headerlink" title="当想要输入框随软键盘上移时"></a>当想要输入框随软键盘上移时</h3><p><img src="image/happy-bubble/gif_example4.gif" alt="exampel4"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton12)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .softShowUp()</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure></p><h3 id="自定义-BubbleLayout"><a href="#自定义-BubbleLayout" class="headerlink" title="自定义 BubbleLayout."></a>自定义 BubbleLayout.</h3><p><img src="image/happy-bubble/img_example5.png" alt="exampel5"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BubbleLayout bl = <span class="keyword">new</span> BubbleLayout(<span class="keyword">this</span>);</span><br><span class="line">bl.setBubbleColor(Color.BLUE);</span><br><span class="line">bl.setShadowColor(Color.RED);</span><br><span class="line">bl.setLookLength(Util.dpToPx(<span class="keyword">this</span>, <span class="number">54</span>));</span><br><span class="line">bl.setLookWidth(Util.dpToPx(<span class="keyword">this</span>, <span class="number">48</span>));</span><br><span class="line"><span class="keyword">new</span> BubbleDialog(<span class="keyword">this</span>)</span><br><span class="line">        .addContentView(LayoutInflater.from(<span class="keyword">this</span>).inflate(R.layout.dialog_view5, <span class="keyword">null</span>))</span><br><span class="line">        .setClickedView(mButton8)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .calBar(<span class="keyword">true</span>)</span><br><span class="line">        .setBubbleLayout(bl)</span><br><span class="line">        .show();</span><br></pre></td></tr></table></figure><h3 id="自定义-BubbleDialog，可交互的-BubbleDialog"><a href="#自定义-BubbleDialog，可交互的-BubbleDialog" class="headerlink" title="自定义 BubbleDialog，可交互的 BubbleDialog."></a>自定义 BubbleDialog，可交互的 BubbleDialog.</h3><p><img src="image/happy-bubble/gif_example6.gif" alt="exampel6"></p><blockquote><p>1、布局</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"160dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button13"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button14"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button15"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Button3"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2、自定义 BubbleDialog</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义可操作性dialog</span></span><br><span class="line"><span class="comment"> * Created by JiajiXu on 17-12-11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOperateDialog</span> <span class="keyword">extends</span> <span class="title">BubbleDialog</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewHolder mViewHolder;</span><br><span class="line">    <span class="keyword">private</span> OnClickCustomButtonListener mListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomOperateDialog</span><span class="params">(Context context)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        calBar(<span class="keyword">true</span>);</span><br><span class="line">        setTransParentBackground();</span><br><span class="line">        setPosition(Position.TOP);</span><br><span class="line">        View rootView = LayoutInflater.from(context).inflate(R.layout.dialog_view4, <span class="keyword">null</span>);</span><br><span class="line">        mViewHolder = <span class="keyword">new</span> ViewHolder(rootView);</span><br><span class="line">        addContentView(rootView);</span><br><span class="line">        mViewHolder.btn13.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mViewHolder.btn14.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        mViewHolder.btn15.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mListener.onClick(((Button)v).getText().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        Button btn13, btn14, btn15;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View rootView)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            btn13 = rootView.findViewById(R.id.button13);</span><br><span class="line">            btn14 = rootView.findViewById(R.id.button14);</span><br><span class="line">            btn15 = rootView.findViewById(R.id.button15);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClickListener</span><span class="params">(OnClickCustomButtonListener l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mListener = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickCustomButtonListener</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String str)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、显示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CustomOperateDialog codDialog = <span class="keyword">new</span> CustomOperateDialog(<span class="keyword">this</span>)</span><br><span class="line">        .setPosition(mPosition)</span><br><span class="line">        .setClickedView(mButton10);</span><br><span class="line">codDialog.setClickListener(<span class="keyword">new</span> CustomOperateDialog.OnClickCustomButtonListener()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mButton10.setText(<span class="string">"点击了："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">codDialog.show();</span><br></pre></td></tr></table></figure><h3 id="查看关于BappyDialog的使用代码"><a href="#查看关于BappyDialog的使用代码" class="headerlink" title="查看关于BappyDialog的使用代码"></a>查看关于BappyDialog的使用代码</h3><p><a href="app/src/main/java/com/xujiaji/happybubbletest/TestDialogActivity.java">TestDialogActivity 代码</a></p><hr><h2 id="如何使用-HappyBubble-BubbleLayout"><a href="#如何使用-HappyBubble-BubbleLayout" class="headerlink" title="如何使用 HappyBubble-BubbleLayout?"></a>如何使用 HappyBubble-BubbleLayout?</h2><h3 id="在XML代码中设置属性值"><a href="#在XML代码中设置属性值" class="headerlink" title="在XML代码中设置属性值"></a>在XML代码中设置属性值</h3><blockquote><p>属性参照表</p></blockquote><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:center">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">lookAt</td><td style="text-align:center">left, top, right, bottom</td><td style="text-align:left">箭头指向</td></tr><tr><td style="text-align:left">lookLength</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头的长度</td></tr><tr><td style="text-align:left">lookPosition</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头相对于x或y轴的位置</td></tr><tr><td style="text-align:left">lookWidth</td><td style="text-align:center">dimension</td><td style="text-align:left">箭头的宽度</td></tr><tr><td style="text-align:left">bubbleColor</td><td style="text-align:center">color</td><td style="text-align:left">气泡的颜色</td></tr><tr><td style="text-align:left">bubbleRadius</td><td style="text-align:center">dimension</td><td style="text-align:left">气泡四角的圆弧</td></tr><tr><td style="text-align:left">bubblePadding</td><td style="text-align:center">dimension</td><td style="text-align:left">气泡边缘到内容的距离</td></tr><tr><td style="text-align:left">shadowRadius</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影的扩散大小</td></tr><tr><td style="text-align:left">shadowX</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影在x轴方向的偏移</td></tr><tr><td style="text-align:left">shadowY</td><td style="text-align:center">dimension</td><td style="text-align:left">阴影在y轴方向的偏移</td></tr><tr><td style="text-align:left">shadowColor</td><td style="text-align:center">color</td><td style="text-align:left">阴影的颜色</td></tr></tbody></table><blockquote><p>xml 例子</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.xujiaji.happybubble.BubbleLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/bubbleLayout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookAt</span>=<span class="string">"left"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookLength</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookPosition</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lookWidth</span>=<span class="string">"16dp"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在java代码中定义属性值。"><a href="#在java代码中定义属性值。" class="headerlink" title="在java代码中定义属性值。"></a>在java代码中定义属性值。</h3><blockquote><p>BubbleLayout 通过“set属性名”方法和invalidate方法来更新BubbleLayout。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mBubbleLayout.setLook(BubbleLayout.Look.LEFT);</span><br></pre></td></tr></table></figure><blockquote><p>查看更多</p></blockquote><p><a href="app/src/main/java/com/xujiaji/happybubbletest/MainActivity.java">MainActivity 代码</a></p><p><img src="image/happy-bubble/gif1.gif" alt="GIF"></p><h3 id="demo-下载"><a href="#demo-下载" class="headerlink" title="demo 下载"></a>demo 下载</h3><p><a href="https://github.com/xujiaji/HappyBubble/releases" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Download-demo--apk-brightgreen.svg" alt="GitHub release"></a></p><hr><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Copyright 2016 XuJiaji</span><br><span class="line"></span><br><span class="line">Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">you may not use this file except in compliance with the License.</span><br><span class="line">You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">Unless required by applicable law or agreed to in writing, software</span><br><span class="line">distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">See the License for the specific language governing permissions and</span><br><span class="line">limitations under the License.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/xujiaji/HappyBubble/releases&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="library" scheme="http://yoursite.com/tags/library/"/>
    
  </entry>
  
  <entry>
    <title>Android开发中的bug清单</title>
    <link href="http://yoursite.com/2017/12/12/android-bug-list/"/>
    <id>http://yoursite.com/2017/12/12/android-bug-list/</id>
    <published>2017-12-12T07:34:41.000Z</published>
    <updated>2017-12-12T09:26:17.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-lang-RuntimeException-Unable-to-get-provider"><a href="#java-lang-RuntimeException-Unable-to-get-provider" class="headerlink" title="java.lang.RuntimeException: Unable to get provider"></a>java.lang.RuntimeException: Unable to get provider</h2><ul><li>解决地址：<a href="https://stackoverflow.com/questions/37312103/unable-to-get-provider-com-google-firebase-provider-firebaseinitprovider" target="_blank" rel="noopener">https://stackoverflow.com/questions/37312103/unable-to-get-provider-com-google-firebase-provider-firebaseinitprovider</a></li><li>原因：在SDK &lt;22的设备中遇到同样的问题，原因是MultiDex，MultiDex.install必须在attachBaseContext方法中</li><li>解决方法<br>自定义Application中添加如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachBaseContext(context);</span><br><span class="line">        MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>build.gradle中添加如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.android.support:multidex:1.0.1&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java-lang-RuntimeException-Unable-to-get-provider&quot;&gt;&lt;a href=&quot;#java-lang-RuntimeException-Unable-to-get-provider&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>linux(Ubuntu)笔记</title>
    <link href="http://yoursite.com/2017/12/12/linux-notes/"/>
    <id>http://yoursite.com/2017/12/12/linux-notes/</id>
    <published>2017-12-12T04:25:29.000Z</published>
    <updated>2017-12-25T08:20:03.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每次开机弹出软件崩溃反馈"><a href="#每次开机弹出软件崩溃反馈" class="headerlink" title="每次开机弹出软件崩溃反馈"></a>每次开机弹出软件崩溃反馈</h2><blockquote><p>解决：删除崩溃日志</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /var/crash/*</span><br></pre></td></tr></table></figure><h2 id="更新软件源的索引"><a href="#更新软件源的索引" class="headerlink" title="更新软件源的索引"></a>更新软件源的索引</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="升级软件"><a href="#升级软件" class="headerlink" title="升级软件"></a>升级软件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="修复依赖关系"><a href="#修复依赖关系" class="headerlink" title="修复依赖关系"></a>修复依赖关系</h2><blockquote><p>假如用户的系统上有某个package不满足依赖条件，这个命令就会自动修复，安装程序包所依赖的包</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get -f install</span><br></pre></td></tr></table></figure><h2 id="创建启动器"><a href="#创建启动器" class="headerlink" title="创建启动器"></a>创建启动器</h2><blockquote><p>安装软件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install gnome-panel</span><br></pre></td></tr></table></figure><blockquote><p>打开创建图标的界面，下边的<code>~/桌面/</code>为启动器创建的位置</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-desktop-item-edit ~/桌面/ --create-new</span><br></pre></td></tr></table></figure><blockquote><p>最后根据提示创建图标</p></blockquote><h2 id="安装xmind-linux"><a href="#安装xmind-linux" class="headerlink" title="安装xmind-linux"></a>安装xmind-linux</h2><blockquote><p>下载地址：<a href="https://www.xmind.cn/download/" target="_blank" rel="noopener">https://www.xmind.cn/download/</a></p></blockquote><p>下载下来是一个压缩包，将其放到<code>~/</code>目录并解压。由于我是64位系统，所以进入<code>~/xmind/XMind_amd64/</code>目录双击XMind运行软件。</p><blockquote><p>由于我创建启动器遇到下面的错误，必须在当前目录才能运行XMind，否则就有下面的错误提示对话框出现。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The configuration area at <span class="string">'/./configuration'</span></span><br><span class="line">could not be created.</span><br><span class="line">Please choose a writable location</span><br><span class="line">using the <span class="string">'-configuration'</span> <span class="built_in">command</span> line option.</span><br></pre></td></tr></table></figure><blockquote><p>解决：写一个命令脚步，先跳转到<code>~/xmind/XMind_amd64/</code>目录再执行<code>XMind</code>运行软件，脚步如下：</p></blockquote><p><code>start.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> ~/xmind/XMind_amd64</span><br><span class="line">./XMind</span><br></pre></td></tr></table></figure><blockquote><p>下面时启动器<code>xmind.desktop</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env xdg-open</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Version=1.0</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Icon[zh_CN]=/home/soul/xmind/icon.png</span><br><span class="line">Name[zh_CN]=xmind</span><br><span class="line">Exec=/home/soul/xmind/XMind_amd64/start.sh</span><br><span class="line">Name=xmind</span><br><span class="line">Icon=/home/soul/xmind/icon.png</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;每次开机弹出软件崩溃反馈&quot;&gt;&lt;a href=&quot;#每次开机弹出软件崩溃反馈&quot; class=&quot;headerlink&quot; title=&quot;每次开机弹出软件崩溃反馈&quot;&gt;&lt;/a&gt;每次开机弹出软件崩溃反馈&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;解决：删除崩溃日志&lt;/p&gt;
&lt;/b
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://yoursite.com/2017/12/12/git-notes/"/>
    <id>http://yoursite.com/2017/12/12/git-notes/</id>
    <published>2017-12-12T03:02:34.000Z</published>
    <updated>2017-12-17T05:50:29.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li><p>查看本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure></li><li><p>查看远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure></li><li><p>创建分支1.1.2并切换到1.1.2分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>拆分写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch 1.1.2</span><br><span class="line">$ git checkout 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>删除本地分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>推送本地分支到远程分支，远程分支不存在则创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 1.1.2:1.1.2</span><br></pre></td></tr></table></figure></li><li><p>本地分支留空则是删除远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :1.1.2</span><br></pre></td></tr></table></figure></li><li><p>本地分支推送到远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin 1.1.2</span><br></pre></td></tr></table></figure></li><li><p>合并work分支到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge work</span><br></pre></td></tr></table></figure></li></ul><h2 id="git-pull和本地冲突"><a href="#git-pull和本地冲突" class="headerlink" title="git pull和本地冲突"></a>git pull和本地冲突</h2><blockquote><p>冲突log</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 24, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (17/17), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 24 (delta 7), reused 23 (delta 6), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (24/24), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/elmorec/hexo-theme-inside</span><br><span class="line">   a98e719..3b64c8a  master     -&gt; origin/master</span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by merge:</span><br><span class="line">        _config.yml</span><br><span class="line">Please commit your changes or stash them before you merge.</span><br><span class="line">Aborting</span><br><span class="line">Updating a98e719..3b64c8a</span><br></pre></td></tr></table></figure><blockquote><p>1、用 <code>git stash</code>本地暂时保存起来</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on master: a98e719 update scripts</span><br></pre></td></tr></table></figure><blockquote><p>2、pull</p><p>3、还原<code>git stash pop stash@{0}</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git stash pop stash@&#123;0&#125;</span><br><span class="line">Auto-merging _config.yml</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看本地分支&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>VIM爬坡到半山腰的总结</title>
    <link href="http://yoursite.com/2016/11/30/vim-note1/"/>
    <id>http://yoursite.com/2016/11/30/vim-note1/</id>
    <published>2016-11-30T01:43:00.000Z</published>
    <updated>2017-12-28T12:53:58.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image/vim-1/banner.png" alt="banner"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>将Linux Mint做为我的主系统后，来来回回到处撞墙。慢慢的到现在不仅习惯了Linux下的娱乐和开发，居然还渐渐的顺手顺眼起来，对于Linux生存有了保障的我现在对Linux下的<code>VIM</code>开始好奇了。</p><p>虽听说VIM乃是上古神器，但一直以来对于VIM映像只有黑不溜秋的界面、白晃晃的文字，只知道从命令界面进去后可以点击<code>i</code>进入文本编辑模式、上下左右箭头移动光标、修改完成后<code>Ese</code>然后<code>:wq</code>保存退出、走人。总的来说不想撩你，怕惹祸上身，最终精尽人亡（精神的精）。</p><p>这到现在都没面试，哎！手里闲不住，前几天开始对VIM开始下手了，胆颤心惊的先去网上秋秋别人的VIM长啥样啊！谷歌直接搜图片吧！（我已做好随时逝去）。这一看，瓦特？vim可以分屏？这个人的vim界面还有目录？这GIT分支结构侧边栏怎么都来了？为什么左侧还有代码行号？这些人的代码高亮的这么好看？最下面的那行漂亮的状态栏我咋过没有？我瞬间就被这些人的界面给吸引住了，我感觉我从农村第一次来到城市。</p><p>就这样我走上了撩VIM之路（我有Java精神我不怕，万物皆对象），到现在我已经将上面看到的目录结构弄出来、代码行号、代码高亮主题更换、状态栏显示、VIM中使用GIT等加入到我的VIM之中。从中我了解到了VIM的插件放哪、怎么配置插件，学习了一波基本命令助我前行。我认为写代码最主要的就是要先有个安心、悦目的环境，然后是快捷的操作，这样写代码会感觉很舒服。当然，还有就是提升了一个格调，集齐技术、快捷、装逼、高效与一身。</p><p>下图是我当前的VIM界面截图，是不是有鼻子有眼了。<br><img src="image/vim-1/my-vim.png" alt="This is my vim."></p><h2 id="有想要到达的方向，一切的困难不过是个过程"><a href="#有想要到达的方向，一切的困难不过是个过程" class="headerlink" title="有想要到达的方向，一切的困难不过是个过程"></a>有想要到达的方向，一切的困难不过是个过程</h2><h3 id="我从这里开始入门"><a href="#我从这里开始入门" class="headerlink" title="我从这里开始入门"></a>我从这里开始入门</h3><p>先为您献上链接：<br><a href="http://www.imooc.com/article/13269" target="_blank" rel="noopener">世界上最牛的编辑器： Vim 1 (原创动图演示所有例子!)</a><br><a href="http://www.imooc.com/article/13272" target="_blank" rel="noopener">世界上最牛的编辑器： Vim 2 (原创动图演示所有例子!)</a><br><a href="http://www.imooc.com/article/13275" target="_blank" rel="noopener">世界上最牛的编辑器： Vim 3 (原创动图演示所有例子!)</a></p><p>当这三篇看完后，可以了解到VIM的基本操作，可以安装一些插件（其实我也只是用到了里面的几个插件，其他没用的先不管吧！）。虽然现在你是不明不白的安装了一些插件，但重在先体验体验VIM的感觉。</p><p>这里我想要补充一下(因为我是用的Linux，其他系统原谅我没了解)：<br><code>.vimrc</code>就是vim的配置文件<br><code>.vim/bundle</code>目录下放的都是插件，可以直接将Github插件<code>git clone</code>（下载到）这个目录。</p><p><code>.vim/bundle/vundle</code></p><ol><li>如果您下载了上面教程的<code>.vim</code>里面会有这个目录，这个插件可以在Github搜索然后更新一下。</li><li>如果是Github上可下载的插件就不用亲自去克隆下来了，直接在<code>.vimrc</code>添加如：<code>Plugin &#39;majutsushi/tagbar&#39;</code>（Github地址是：<code>htttps://github.com/majutsushi/tagbar</code>），直接取后面一部分就行了。</li><li>最后打开终端输入<code>vim</code>回车，进入Vim。然后，输入命令<code>:PluginInstall</code>就会将所有的第二步这种形式的插件自动下载下来。</li></ol><h3 id="从这里开始明白了Vim插件管理，如何配置"><a href="#从这里开始明白了Vim插件管理，如何配置" class="headerlink" title="从这里开始明白了Vim插件管理，如何配置"></a>从这里开始明白了Vim插件管理，如何配置</h3><p>还是先敬上链接：<br><a href="http://bhilburn.org/stop-being-scared-of-vim/" target="_blank" rel="noopener">不要在害怕Vim</a></p><p>当然我的英语水平是个渣渣，越来越不得不多学学English了。看了了大概，总体上面是介绍，下面是实际的一些例子。有预览图，理解起来还是比较轻松。里面介绍了一个Vim游戏<a href="http://vim-adventures.com/" target="_blank" rel="noopener">http://vim-adventures.com/</a> ，挺有意思了玩到三关之后要money，20多美元解锁，屌丝的我只能干望着了。</p><p>这里简单说一下我装了的里面提及的几个：<br><a href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener">fugitive</a>：可以在Vim中对项目进行Git命令操作。<br><a href="https://github.com/sjl/gundo.vim" target="_blank" rel="noopener">gundo</a>：查看提交以树行结构展示（请看下图）<br><img src="image/vim-1/gundo.jpg" alt="gundo"><br><a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="noopener">nerdtree</a>：展示目录结构，看起比使用<code>:Ve</code>展示的目录爽多了。（请看下图）<br><img src="image/vim-1/nerdtree.png" alt="nerdtree"><br><a href="https://github.com/Lokaltog/powerline" target="_blank" rel="noopener">powerline</a>：底部状态栏，这个可是把我给折腾够了，不过弄完之后，瞬间展示效果杠杠的。<br><img src="image/vim-1/powerline.png" alt="powerline"></p><blockquote><p>还是简单记录一下我的历程吧！</p></blockquote><p>一开始我以为和其他插件一样，直接在<code>.vimrc</code>中添加<code>Plugin &#39;Lokaltog/powerline&#39;</code>然后在Vim中<code>:PluginInstall</code>，Very Good搞定。其实不然，根本就可以不需要往<code>.vim/bundle</code>中添加，需要配置python，需要在<code>.vimrc</code>中配置。</p><p>通过这篇文章：<a href="http://www.hi-linux.com/2016/04/22/%E4%B8%BABash%E5%92%8CVIM%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA%E7%BE%8E%E8%A7%82%E5%A5%A2%E5%8D%8E%E7%9A%84%E7%8A%B6%E6%80%81%E6%8F%90%E7%A4%BA%E6%A0%8F/" target="_blank" rel="noopener">为Bash和VIM配置一个美观奢华的状态提示栏</a><br>我不仅仅将Vim给加上了状态栏，命令界面的用户状态也变了，我把默认的字体改成powerline的字体，更加美观。先欣赏一下：</p><p><img src="image/vim-1/termina.png" alt="My termina"></p><p>我的步骤：</p><ol><li><p>安装python-pip 与 git 套件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip git</span><br></pre></td></tr></table></figure></li><li><p>使用pip安装Powerline</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user powerline-status</span><br></pre></td></tr></table></figure></li><li><p>字体配置（如果没有这字体，那么Powerline的那些符号我的会显示乱码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/powerline/fonts.git</span><br><span class="line">$ cd fonts</span><br><span class="line">$ ./install.sh</span><br></pre></td></tr></table></figure></li><li><p>配置环境，打开<code>.bashrc</code>，添加如下信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export TERM=&quot;screen-256color&quot;</span><br><span class="line">export PATH=&quot;$HOME/.local/bin:$PATH&quot;</span><br><span class="line">export POWERLINE_COMMAND=powerline</span><br><span class="line">export POWERLINE_CONFIG_COMMAND=powerline-config</span><br><span class="line">powerline-daemon -q</span><br><span class="line">POWERLINE_BASH_CONTINUATION=1</span><br><span class="line">POWERLINE_BASH_SELECT=1</span><br><span class="line">. ~/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh</span><br></pre></td></tr></table></figure></li></ol><p>第二行是加入powerline的命令位置，下图是查看位置。<br><img src="image/vim-1/powerline-position.png" alt="查看powerline命令位置"><br>最下面的一行是安装powerline后的路径<code>. ~/.local/lib/python2.7/site-packages/powerline</code>可能大家会有所不同。（再执行第二步你会看到安装位置哦，如下图）<br><img src="image/vim-1/powerline-position2.png" alt="查看powerline的安装位置"></p><ol><li>选择字体，此时您应该已经可以在命令中中显示如上图的状态了，只是默字体可能无法显示其真正效果。<code>Edit &gt; Preferences</code>看下图：我直接搜索选择了<code>powerline semi</code><br><img src="image/vim-1/choose-font.png" alt="选择字体操作"></li><li><p>最终目的不要忘了，是配置Vim啊！<br>此时只需要在<code>.vimrc</code>中添加如下信息即可：（第一行为powerline目录）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">set rtp+=~/.local/lib/python2.7/site-packages/powerline/bindings/vim/</span><br><span class="line">set guifont=Sauce\ Code\ Powerline:h14.5</span><br><span class="line">set laststatus=2</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set t_Co=256</span><br><span class="line">set number</span><br><span class="line">set fillchars+=stl:\ ,stlnc:\</span><br><span class="line">set term=xterm-256color</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set background=dark</span><br></pre></td></tr></table></figure></li><li><p>重启Vim看看，是不是搞定了！</p></li></ol><blockquote><p>最后献上一个我现在用的主题</p></blockquote><p><a href="https://github.com/morhetz/gruvbox" target="_blank" rel="noopener">gruvbox</a></p><p>配置.vimrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Plugin &apos;morhetz/gruvbox&apos;</span><br><span class="line">colorscheme gruvbox</span><br><span class="line">set background=light</span><br><span class="line">set background=dark</span><br></pre></td></tr></table></figure></p><p>在Vim中下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:PluginInstall</span><br></pre></td></tr></table></figure></p><blockquote><p>好了就到这里，其他插件看个人需求添加，都是大同小异的了。</p></blockquote><h2 id="总结结束"><a href="#总结结束" class="headerlink" title="总结结束"></a>总结结束</h2><p>在放几个网址在这里：<br><a href="http://vim.rtorr.com/" target="_blank" rel="noopener">Vim Cheat Sheet</a> : 多种语音查看Vim命令<br><a href="http://vimcolors.com/" target="_blank" rel="noopener">vimcolors</a> : 很多的Vim配色<br><a href="http://blog.csdn.net/ly0303521/article/details/50761365" target="_blank" rel="noopener"><a href="http://blog.csdn.net/ly0303521/article/details/50761365" target="_blank" rel="noopener">AndroidStudio——-IdeaVim插件</a></a></p><blockquote><p>从现在开启Vim神器功能，进入无尽的砍怪之旅吧！</p></blockquote><hr><p>Github：<a href="https://github.com/xujiaji" target="_blank" rel="noopener">@xujiaji</a></p><blockquote><p>本文是我开始VIM爬到半山坡后的总结！什么半山坡啊！装B，其实就是刚刚个入了门，哈哈。<br>如有欠妥之处还望给予指正，如有什么Vim淫巧还望推荐，谢谢！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;image/vim-1/banner.png&quot; alt=&quot;banner&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;将Linux Mint做为我的
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-依赖倒置原则（DIP）</title>
    <link href="http://yoursite.com/2016/05/29/ood-dip/"/>
    <id>http://yoursite.com/2016/05/29/ood-dip/</id>
    <published>2016-05-29T04:08:00.000Z</published>
    <updated>2017-12-22T15:30:54.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><img src="image/ood/dip.png" alt="DIP.png"></p><blockquote><p>引入：<br>高层的决定不能因为某一个低层次模块的变动而影响全局，导致整个系统的变动。</p></blockquote><h2 id="什么是DIP？"><a href="#什么是DIP？" class="headerlink" title="什么是DIP？"></a>什么是DIP？</h2><ul><li>全称：依赖倒置原则（Dependency inversion principle）</li><li>定义：<ol><li>高层次的模块不应该依赖于低层次的模块，两者都应该依赖于<strong>抽象接口</strong></li><li>抽象接口不应该依赖于具体实现，而具体实现则因该依赖于抽象接口。</li></ol></li></ul><h2 id="我们如何理解DIP？"><a href="#我们如何理解DIP？" class="headerlink" title="我们如何理解DIP？"></a>我们如何理解DIP？</h2><ol><li>知道依赖倒置的由来<ul><li>由于过去传统软件开发方法倾向于高层依赖于低层</li><li>如今<strong>依赖倒置</strong>通过接口隔离，高层和底层都依赖于接口后</li><li>结论：从结构上相对于传统编程方式而言就是<strong>倒置</strong>了。</li></ul></li><li><p>依赖倒置反面教材</p><blockquote><p>结构如下：没有遵循依赖倒置</p></blockquote><p><img src="image/dip-err.png" alt="没有遵循依赖倒置"></p><blockquote><p>代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GaoCeng</span> </span>&#123;</span><br><span class="line">    ZhongCeng mZhongCeng;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GaoCeng</span><span class="params">(ZhongCeng mZhongCeng)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mZhongCeng = mZhongCeng;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhongCeng</span></span>&#123;</span><br><span class="line">    DiCeng mDiCeng;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhongCeng</span><span class="params">(DiCeng mDiCeng)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDiCeng = mDiCeng;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 底层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiCeng</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>依赖倒置正面教材</p><blockquote><p>结构如下：</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1552955-33a2d00c5821ea72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="遵循依赖倒置.png"></p><blockquote><p>代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ZhongCengInterface</span></span>&#123;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">GaoCengInterface</span></span>&#123;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GaoCeng</span> </span>&#123;</span><br><span class="line">    GaoCengInterface mGaoCengInterface;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GaoCeng</span><span class="params">(GaoCengInterface mGaoCengInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mGaoCengInterface = mGaoCengInterface;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhongCeng</span> <span class="keyword">implements</span> <span class="title">GaoCengInterface</span></span>&#123;</span><br><span class="line">    ZhongCengInterface mZhongCengInterface;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhongCeng</span><span class="params">(ZhongCengInterface mZhongCengInterface)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mZhongCengInterface = mZhongCengInterface;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 底层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiCeng</span> <span class="keyword">implements</span> <span class="title">ZhongCengInterface</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结论</p><ul><li>可以从结构图上明确看出两种方式依赖结构是相反的，所以叫依赖倒置</li><li>通过这种结构我们可以肆意的更改具体的接口实现类，而不会影响高层</li></ul></li></ol><h2 id="遵循DIP有什么好处？"><a href="#遵循DIP有什么好处？" class="headerlink" title="遵循DIP有什么好处？"></a>遵循DIP有什么好处？</h2><p>既然我们理解了DIP，那么DIP的好处不言而喻。</p><ol><li>通过依赖于接口，隔离了具体实现类</li><li>低一层的变动并不会导致高一层的变动</li><li>提高了代码的容错性、扩展性和易于维护</li></ol><p>既然有好处，那么就必定有坏处：代码的增加，学习成本和代码思考时间的增加。（不过相对于后期的好处，这点我们还是能理解的）</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>其实<strong>理解DIP的例子</strong>就是一个很好的对比例子。<br>现在来一个实际一点的例子：超重提价</p><ul><li>需求：编写一个称重提价装置，物体2元/斤（物体重量 &lt;= 100）计算。当物体超过100kg提醒，然后超出部分以10元/斤（物体重量 &gt; 100）计算。</li></ul><blockquote><p>以传统方式编程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 称重器传统编程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scales</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> readValue;<span class="comment">//获取到的物体的重量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> highestValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> inPrice;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> outPrice;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Scales</span><span class="params">(<span class="keyword">double</span> highestValue, <span class="keyword">double</span> inPrice, <span class="keyword">double</span> outPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.highestValue = highestValue;</span><br><span class="line">        <span class="keyword">this</span>.inPrice = inPrice;</span><br><span class="line">        <span class="keyword">this</span>.outPrice = outPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当有物体放上去后称重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...readValue = ？ （这里获取称重器计算的重量）</span></span><br><span class="line">        showWeigh(readValue);</span><br><span class="line">        <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> diff = readValue - highestValue;</span><br><span class="line">        <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            outWeighWarn(diff);</span><br><span class="line">            price += highestValue * inPrice;</span><br><span class="line">            price += diff * outPrice;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            price += readValue * inPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        showPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示重量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showWeigh</span><span class="params">(<span class="keyword">double</span> weigh)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超重提醒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outWeighWarn</span><span class="params">(<span class="keyword">double</span> outWeigh)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>依赖倒置后</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 称重接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Weigh</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">read</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 最大重量、范围内价格、范围外价格的设置*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Value</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">highestValue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">inPrice</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">outPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 显示器接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outWeighWarn</span><span class="params">(<span class="keyword">double</span> diff)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showWeigh</span><span class="params">(<span class="keyword">double</span> weigh)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrice</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scales</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Weigh mWeigh;</span><br><span class="line">    <span class="keyword">private</span> Show mShow;</span><br><span class="line">    <span class="keyword">private</span> Value mValue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Scales</span><span class="params">(Weigh mWeigh, Show mShow, Value mValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mShow = mShow;</span><br><span class="line">        <span class="keyword">this</span>.mWeigh = mWeigh;</span><br><span class="line">        <span class="keyword">this</span>.mValue = mValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当有物体放上去后称重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startScales</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mShow.showWeigh(mWeigh.read());</span><br><span class="line">        <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> diff = mWeigh.read() - mValue.highestValue();</span><br><span class="line">        <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mShow.outWeighWarn(diff);</span><br><span class="line">            price += mValue.highestValue() * mValue.inPrice();</span><br><span class="line">            price += diff * mValue.outPrice();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            price += mWeigh.read() * mValue.inPrice();</span><br><span class="line">        &#125;</span><br><span class="line">        mShow.showPrice(price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看出依赖倒置后使代码可复用，可以是任意的称重装置，可以是任意的显示装置，只要它们实现对应的接口即可。高层不必在意底层具体是什么东西。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>DIP的规则：依赖于抽象，不应该依赖于具体类。</li><li>任何变量都不应该持有一个指向具体类的指正或这引用</li><li>任何类都不应该从具体类派生</li><li>任何方法都不应该覆写它的任何基类中已经实现了的方法</li></ul><p>每个程序都会有违反这些规则的情况，有时必须创建具体类的实例。此外，这些规则对于那些具体但却稳定的类来说似乎不太合理。如果一个具体类不太会改变，并且也不会创建其他类似的派生类，那么依赖于它并不会造成损害，比如说String类型。</p><ul><li><p>然而，我们编写的大多数具体类都是不稳定的，我们将它们隐藏在抽象接口后面，隔离它们的不稳定性。</p></li><li><p>由于抽象将高层和细节彼此隔离，所以代码也非常容易维护</p></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>敏捷软件开发 第12章 依赖倒置原则（DIP）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;image/ood/dip.png&quot; alt=&quot;DIP.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引入：&lt;br
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-接口隔离(ISP)</title>
    <link href="http://yoursite.com/2016/05/07/ood-isp/"/>
    <id>http://yoursite.com/2016/05/07/ood-isp/</id>
    <published>2016-05-07T02:12:00.000Z</published>
    <updated>2017-12-22T15:30:55.864Z</updated>
    
    <content type="html"><![CDATA[<p>引入：</p><blockquote><p><code>老手机：</code> 你们这些年轻手机光溜溜的，全身上下只有两个插孔几个按钮，为啥这么受欢迎？<br><code>新手机：</code>老前辈，您虽然占了一半都是按钮，可以快速的点到，但是多数情况下都没用呀！我虽然只有几个按钮，但都是经常用到滴。我也能达到和你一样的效果，而且更简洁。<br><code>老手机：</code>恩，人们只有打字的时候才用到那些按钮。<br><code>新手机：</code>所以在平常时候，我这几个按钮就可以满足大部分需要了。<br><code>老手机：</code>真是一代比一代强咯！</p></blockquote><hr><blockquote><p>ISP</p></blockquote><p><img src="image/ood/isp.png" alt="ISP.png"></p><h2 id="1-何为ISP？"><a href="#1-何为ISP？" class="headerlink" title="1.何为ISP？"></a>1.何为ISP？</h2><ul><li>全称：接口隔离原则（Interface Segregation Principle）</li><li>定义：客户程序不应该被迫依赖于它们不使用的方法</li></ul><h2 id="2-如何理解ISP？"><a href="#2-如何理解ISP？" class="headerlink" title="2.如何理解ISP？"></a>2.如何理解ISP？</h2><ul><li>比如<code>图2-1.违反了ISP</code>中的鸵鸟类不应该被迫依赖于不使用的飞翔方法<br><img src="image/ood/isp-no.png" alt="2-1.违反了ISP"></li></ul><ul><li>现在将<code>2-1.满足ISP</code>的例子中的<code>接口鸟</code>进行拆分，能飞的<code>鸟类麻雀</code>实现<code>接口飞鸟</code>，不能飞的<code>鸟类鸵鸟</code>实现<code>接口鸟</code>，如下<code>图2-2</code>所示。</li></ul><p><img src="image/ood/isp-yes.png" alt="2-2.满足ISP.png"></p><ul><li>可能到这里大家有个疑惑：接口变多了！对！就是接口变多了。不是上面还举例了手机的例子吗？阐明了减少接口的好处。<ul><li>其实我们减少并不是接口，而是接口中的抽象方法。</li><li>通过分离来满足客户端的需求，使客户端程序中只存在需要的方法。</li><li>客户端的不同需求才是导致接口改变的原因。</li></ul></li></ul><h2 id="3-遵循ISP有什么好处？"><a href="#3-遵循ISP有什么好处？" class="headerlink" title="3.遵循ISP有什么好处？"></a>3.遵循ISP有什么好处？</h2><ul><li><p>不遵循ISP而导致的一些问题，在<code>图2-1</code>中，鸵鸟是不需要飞的，但保留了飞的方法。</p><ul><li>现在接口中的<code>飞()</code>方法需要进行改动，假如改成：<code>boolean fly()</code>—可以理解为调用一次向上飞，再调用一次向下飞，依次循环。</li><li>现在不仅会飞的鸟需要改动，连鸵鸟这些不会飞的鸟都要莫名奇妙的跟着去改动。</li><li>显然这导致了程序之间的耦合增强，影响到了不应该影响的客户程序</li></ul></li><li><p>现在正过来看遵循ISP接口，如<code>图2-2</code>所示的例子，分离了方法<code>飞</code>，使得更改时并不会影响到不相干的客户程序<code>（鸵鸟类）</code></p><ul><li>需要尽可能避免这种耦合，因此我们希望分离接口。</li><li>可以看出，分离接口有利于我们对需求变更时的快速高效的执行行动。</li><li>并且使之解构层次更加的分明</li></ul></li></ul><h2 id="4-循序渐进的例子（来自敏捷软件开发-foot1-）"><a href="#4-循序渐进的例子（来自敏捷软件开发-foot1-）" class="headerlink" title="4.循序渐进的例子（来自敏捷软件开发[^foot1]）"></a>4.循序渐进的例子（来自敏捷软件开发[^foot1]）</h2><blockquote><p>以ATM用户界面为例</p></blockquote><ol><li><p>ATM的用户界面有不同的交易模式，现将从ATM的基类<code>Transaction</code>（交易类）中派生子类：</p><ul><li><code>DepositTransaction</code>存款</li><li><code>WithdrawalTransaction</code>取款</li><li><code>TransferTransaction</code>转账</li></ul></li><li><p>每一个子类交易都有一个界面，因此要依赖于UI，调用的不同方法，如：DepositTransaction会调用UI类中的RequestDepositAmount()方法，当前ATM结果如下<code>图4-2-1.ATM操作解构</code>所示。<br><img src="image/ood/isp-atm.png" alt="4-2-1.ATM操作解构"></p><ul><li>这样做是ISP告诉我们应当避免的情形</li><li>每个操作使用的UI方法，其他的操作都不会使用</li><li>当每次<code>Transaction</code>子类的改动都会迫使对UI进行改动，从而影响到了其他所有<code>Transaction</code>子类及其他所有依赖于UI接口的类。</li><li>当要增加一个支付煤气费的交易时，为了处理该操作想要显示的特定消息，就需要在UI中加入新的方法。糟糕的是，由于<code>Transaction</code>的子类全部依赖于UI接口，所以它们都需要重新编译。</li></ul></li><li><p>因此现在有一个办法，将UI接口分解成像<code>DepositUI</code>、<code>WithdrawalUI</code>以及<code>TransferUI</code>这样的单独接口，可以避免这种不合适的耦合，最终的UI接口可以去多重继承这些单独的接口。<code>图5-3-1.分离的ATM接口</code>和之后的代码展示了这个模型。<br><img src="image/ood/isp-atm-yes.png" alt="5-3-1.分离的ATM接口"></p><blockquote><p>定义交易接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 存款UI接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DepositUI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestDepositAmount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 取款UI接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">WithdrawalUI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestWithdrawalAmount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 转账UI接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TransferUI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RequestTransferAmount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** UI接口继承所有的交易接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UI</span> <span class="keyword">extends</span> <span class="title">DepositUI</span>, <span class="title">WithdrawalUI</span>, <span class="title">TransferUI</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>交易抽象类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 交易类*/</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>交易派生类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 存款交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepositTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DepositUI mDepositUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DepositTransaction</span><span class="params">(DepositUI mDepositUI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDepositUI = mDepositUI;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mDepositUI.RequestDepositAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 取款交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithdrawalTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> WithdrawalUI mWithdrawalUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WithdrawalTransaction</span><span class="params">(WithdrawalUI mWithdrawalUI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mWithdrawalUI = mWithdrawalUI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mWithdrawalUI.RequestWithdrawalAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 转账交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransferTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TransferUI mTransferUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferTransaction</span><span class="params">(TransferUI mTransferUI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mTransferUI = mTransferUI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        mTransferUI.RequestTransferAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建交易对象：由于每个操作都必须以特定的方式知晓UI版本，如<code>TransferTransaction</code>必须知道<code>TransferUI</code>。在程序中，使每个操作的构造时给它传入指向特定于它的UI的引用，从而解决这个问题。如下进行初始化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UI GUI;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DepositTransaction mDepositTransaction = <span class="keyword">new</span> DepositTransaction(GUI);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>虽然这样很方便，但同样要求每个操作都有一个指向对应UI的引用成员。另外一种解决这个问题的方法是创建一组全局常量。全局变量并不总是意味着拙劣的设计，在这种情况下，它们有着明显的易于访问的有点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** UI全局变量*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UIGlobals</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DepositUI mDepositUI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WithdrawalUI mWithdrawalUI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TransferUI mTransferUI;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIGlobals</span><span class="params">(UI lui)</span> </span>&#123;</span><br><span class="line">        UIGlobals.mDepositUI = lui;</span><br><span class="line">        UIGlobals.mWithdrawalUI = lui;</span><br><span class="line">        UIGlobals.mTransferUI = lui;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 转账交易类*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransferTransaction</span> <span class="keyword">extends</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        UIGlobals.mTransferUI.RequestTransferAmount();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UI的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UIEntity</span> <span class="keyword">implements</span> <span class="title">UI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequestDepositAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequestTransferAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RequestWithdrawalAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化UI静态类</span></span><br><span class="line">    UIGlobals mUIGlobals = <span class="keyword">new</span> UIGlobals(<span class="keyword">new</span> UIEntity());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用姿势</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Transaction mTransaction = <span class="keyword">new</span> TransferTransaction();</span><br><span class="line">        mTransaction.Execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>由于敏捷软件开发举的例子是c++的，知识有限，表示很多看不懂，可能有些地方偏差较大，想了解更多建议亲自去看看( ¯▽¯；)</code></p></li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><ul><li><p>胖类（fat class）：就是上边讲解的不满足ISP的类型</p></li><li><p>可以看出胖类增强了类之间的耦合，使得对该胖类进行改动会影响到所有其他类。</p></li><li><p>通过将胖类接口分解成多个特定类（客户端程序）的接口，使得强耦合得以解决</p></li><li><p>然后该胖类继承所有特定类的接口，并实现它们。就解除了这个特定类和它没有调用方法间的依赖关系，并使得这些特定类之间互不依赖。</p></li></ul><h2 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6.参考文献"></a>6.参考文献</h2><ul><li>敏捷软件开发  第12章   接口隔离原则（ISP）</li><li><a href="http://blog.jobbole.com/32122/" target="_blank" rel="noopener">如何向妻子解释OOD</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引入：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;老手机：&lt;/code&gt; 你们这些年轻手机光溜溜的，全身上下只有两个插孔几个按钮，为啥这么受欢迎？&lt;br&gt;&lt;code&gt;新手机：&lt;/code&gt;老前辈，您虽然占了一半都是按钮，可以快速的点到，但是多数情况下都没用呀！我虽
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-里氏替换原则(LSP)</title>
    <link href="http://yoursite.com/2016/04/23/ood-lsp/"/>
    <id>http://yoursite.com/2016/04/23/ood-lsp/</id>
    <published>2016-04-23T03:02:00.000Z</published>
    <updated>2017-12-22T15:31:00.457Z</updated>
    
    <content type="html"><![CDATA[<p>引：</p><blockquote><p>有一只小麻雀在大平原上，飞呀飞～。飞累了，看见前方一个大鸟…<br><code>小麻雀：</code>大鸟兄你好，本鸟叫麻雀！请问您怎么称呼？<br><code>大鸵鸟：</code>原来是麻雀小弟呀！本鸟叫鸵鸟！<br><code>小麻雀：</code>鸵鸟哥耶！小弟飞的累的不行！让兄弟在您雄伟的身躯上歇歇脚么？<br><code>大鸵鸟：</code>不行！本鸟还走累了呢！那我咋办？<br><code>小麻雀：</code>你飞呗！难道我还拖着你不成？<br><code>大鸵鸟：</code>前提是我要是能飞的起来呀！<br><code>小麻雀：</code>开什么玩笑！咱们都是鸟，你飞不起来？“飞”是咋们鸟类的特征，想到飞就想到咋们鸟～。</p></blockquote><hr><blockquote><p>LSP</p></blockquote><p><img src="image/ood/lsp.png" alt="LSP.png"></p><h2 id="1-何为LSP？"><a href="#1-何为LSP？" class="headerlink" title="1. 何为LSP？"></a>1. 何为LSP？</h2><ul><li>全称：里氏替换原则（Liskov Substitution principle）</li><li>定义：<code>派生类（子类）</code>对象能够替换其<code>基类（超类）</code>对象被使用[^foot1]<ul><li>Barbara Liskov对LSP定义是这么说的：若对每个类型<code>S</code>的对象<code>q1</code>，都存在一个类型<code>T</code>的对象<code>q2</code>，使得在所有对<code>T</code>编写的程序<code>P</code>中，用<code>q1</code>替换<code>q2</code>后，程序<code>P</code>行为功能不变，则<code>S</code>是<code>T</code>的子类型。<br>听着有些绕，我将它画一个类图便于理解：<blockquote><p>LSP定义理解dsf<br>在类P中将T的对象q2，换成S的对象q1行为功能不变<br>则S继承T，得如图所示的关系</p></blockquote></li></ul></li></ul><p><img src="image/ood/lsp1.png" alt="LSP定义理解dsf在类P中将T的对象q2，换成S的对象q1行为功能不变则S继承T，得如图所示的关系"></p><h2 id="2-何为L？何为S？"><a href="#2-何为L？何为S？" class="headerlink" title="2. 何为L？何为S？"></a>2. 何为L？何为S？</h2><p><strong>L:</strong><code>芭芭拉·利斯科夫（Barbara Liskov）</code>因为提出这个原则的女士姓里<br><strong>S:</strong><code>替换（Substitution）</code>父类能被子类<strong>替换</strong></p><ul><li><code>替换</code>如上述定义所述，子类替换父类后不会影响其行为和功能。</li></ul><h2 id="3-为何要有LSP？"><a href="#3-为何要有LSP？" class="headerlink" title="3. 为何要有LSP？"></a>3. 为何要有LSP？</h2><blockquote><p>①首先谈谈要是违反LSP</p></blockquote><ul><li>来张违反LSP的类图</li></ul><p><img src="image/ood/lsp-no.png" alt="违反LSP.png"></p><ul><li><p>分析</p><ul><li>现在我说天上飞着一只鸟。。。</li><li>子类麻雀替换父类：天上飞着一只麻雀。</li><li>子类鸵鸟替换父类：天上飞着一只鸵鸟。</li></ul></li><li><p>由上因为违反了里氏替代原则，导致整个设计存在严重逻辑错误。</p></li><li>由于违反了里氏替代原则，间接的违反了OCP原则[^foot2]。因为明显可以看出飞翔对于鸵鸟因该是封闭的。</li></ul><blockquote><p>②再来看一些代码（LSP的违反导致OCP的违反）</p></blockquote><ul><li>代码如下</li></ul><p><code>有三个类：鸟、鸵鸟、麻雀。鸵鸟和麻雀都有要去北京的方法</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IS_OSTRICH = <span class="number">1</span>;<span class="comment">//是鸵鸟</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IS_SPARROW = <span class="number">2</span>;<span class="comment">//是麻雀</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> isType;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(<span class="keyword">int</span> isType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isType = isType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸵鸟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ostrich</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Bird.IS_OSTRICH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toBeiJing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"跑着去北京！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 麻雀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sparrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Bird.IS_SPARROW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toBeiJing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"飞着去北京！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>现在有一个方法birdLetGo，统一处理去北京的行为</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">birdLetGo</span><span class="params">(Bird bird)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bird.isType == Bird.IS_OSTRICH) &#123;</span><br><span class="line">        Ostrich ostrich = (Ostrich) bird;</span><br><span class="line">        ostrich.toBeiJing();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bird.isType == Bird.IS_SPARROW) &#123;</span><br><span class="line">        Sparrow sparrow = (Sparrow) bird;</span><br><span class="line">        sparrow.toBeiJing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>分析<br>大家可以看出，birdLetGo方法明显的违反了开闭原则[^foot2]，它必须要知道所有Bird的子类。并且每次创建一个Bird子类就得修改它一次。</li></ul><blockquote><p>③结论</p></blockquote><p>由上面的分析可以大致的了解了遵守LSP的重要性了吧！</p><ul><li>如果不遵守，导致逻辑设计缺陷</li><li>如果不遵守，导致同时违反开闭原则</li><li>单个模型，孤立时并不具有设计意义。当多个模型出现时，抽象提取共同特征作为父类（基类），使之任何子类能替代于父类</li><li>如果试图预测所有假设，我们所得到的结果可能会充满很多不必要的复杂性。通常最好的办法是只预测那些最明显的LSP的违反状态，直到设计开始出现脆弱的状态，才去处理它们。[^foot3]</li></ul><h2 id="4-基于契约设计能支持LSP？"><a href="#4-基于契约设计能支持LSP？" class="headerlink" title="4. 基于契约设计能支持LSP？"></a>4. 基于契约设计能支持LSP？</h2><ul><li>什么是契约设计？<ul><li>通过为每个方法声明的前置条件和后置条件[^foot4]来指定的。要是使一个方法得以执行，前置条件必须要为真。执行完毕后，该方法要保证后置条件为真。</li></ul></li><li>一个例子</li></ul><blockquote><p>几个继承关系的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String food;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.food = food;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸟</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bird</span><span class="params">(String food)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸵鸟</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ostrich</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Ostrich</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"草"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//麻雀</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sparrow</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sparrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"虫子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在动物园对象中调用吃的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃早餐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">eatBreakfast</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> animal.getFood();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析</p></blockquote><ul><li>这里的满足前置条件就是调用方需满足能接受String这个食物类型</li><li>满足后置条件可以看做是参数和返回类型</li><li>前置条件不能更强，只能更弱，比如可以这样调用：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object food = <span class="keyword">new</span> Zoo().eatBreakfast(<span class="keyword">new</span> Animal(<span class="string">"肉"</span>));</span><br></pre></td></tr></table></figure><ul><li>后置条件可以更强，比如可以这样写：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String food = <span class="keyword">new</span> Zoo().eatBreakfast(<span class="keyword">new</span> Ostrich());</span><br></pre></td></tr></table></figure><ul><li>这样我们就可以说是前置条件和后置条件就都得以满足</li></ul><h2 id="5-结论总结"><a href="#5-结论总结" class="headerlink" title="5. 结论总结"></a>5. 结论总结</h2><ul><li><p>如果LSP有效运用，程序会具有更多的可维护性、可重用性和健壮性</p></li><li><p>LSP是使OCP成为可能的主要原则之一</p></li><li><p>正是因为子类的可替换性，才使得父类模块无须修改的情况就得以扩展</p></li></ul><h2 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6. 参考文章"></a>6. 参考文章</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">里氏替换原则-维基百科</a></li><li><a href="http://www.jianshu.com/p/0fe6ab955842" target="_blank" rel="noopener">OCP</a></li><li>敏捷软件开发  第10章  里氏替换原则(LSP)</li><li><a href="http://blog.csdn.net/q345852047/article/details/7955792" target="_blank" rel="noopener">前置条件和后置条件是什么？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一只小麻雀在大平原上，飞呀飞～。飞累了，看见前方一个大鸟…&lt;br&gt;&lt;code&gt;小麻雀：&lt;/code&gt;大鸟兄你好，本鸟叫麻雀！请问您怎么称呼？&lt;br&gt;&lt;code&gt;大鸵鸟：&lt;/code&gt;原来是麻雀小弟呀！本鸟叫鸵鸟！&lt;br&gt;&lt;co
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android-UI事件传递就是这么个事儿</title>
    <link href="http://yoursite.com/2016/04/16/android-ui-event/"/>
    <id>http://yoursite.com/2016/04/16/android-ui-event/</id>
    <published>2016-04-16T07:31:00.000Z</published>
    <updated>2017-12-22T15:30:52.494Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们寻找的，也只不过是内心世界的片刻安宁，<br>以及，那样一场盛大的清欢。</p></blockquote><h2 id="聊聊UI事件传递"><a href="#聊聊UI事件传递" class="headerlink" title="聊聊UI事件传递"></a>聊聊UI事件传递</h2><p><img src="image/android-ui-event/ui-event.png" alt="Android UI事件传递.png"></p><h2 id="什么是UI事件？"><a href="#什么是UI事件？" class="headerlink" title="什么是UI事件？"></a>什么是UI事件？</h2><ul><li>触摸屏幕中UI控件的那一刻即为事件发生</li><li>MotionEvent对象包含了所有的触摸事件，如<code>触摸的位置、多指触摸等</code></li><li>MotionEvent描述了当前的操作类型，以下为常见类型(数字代表对应的值)：<ul><li><code>ACTION_DOWN = 0</code> 按下</li><li><code>ACTION_UP = 1</code> 抬起</li><li><code>ACTION_MOVE = 2</code> 移动</li><li><code>ACTION_CANCEL = 3</code> 动作取消</li><li><code>ACTION_OUTSIDE = 4</code>  动作超出边界</li><li><code>ACTION_POINTER_DOWN = 5</code> 已有一个点被按住，此时再按下一个点</li><li><code>ACTION_POINTER_UP = 6</code> 多个点被按住，非最后放开的点都会调用</li></ul></li></ul><h2 id="事件如何传递？"><a href="#事件如何传递？" class="headerlink" title="事件如何传递？"></a>事件如何传递？</h2><blockquote><p>自定义的父布局和子布局，用来观察事件的变化(View1和Button1为自定义View和自定义Button，默认以自定义View1举例</p></blockquote><p><img src="image/android-ui-event/1.png" alt="1"></p><p>上图简略关系如下：<br><img src="image/android-ui-event/2.png" alt="布局简略关系.png"></p><p><strong>×</strong> 之前一直以为事件是从子布局开始传递到父布，因为以直观的角度我们先碰到的是子布局<code>得到错误的事件顺序：view1 --&gt; ViewGroup2 --&gt; ViewGroup1</code></p><p><strong>√</strong> 后来才知道事件是从父布局传递到子布局，是由父布局判断点击位置上面有子布局然后向子布局传递。如果事件向子布局传递没有被拦截和消费，那么事件又会向父布局传递。<code>正确的没有被拦截和消费的事件顺序：Activity --&gt; ViewGroup1 --&gt; ViewGroup2 --&gt; View1 --&gt; ViewGroup2 --&gt; ViewGroup1 --&gt; Activity</code></p><pre><code>以下的Log为当手指对view1点击、滑动、抬起时，发生的一系列事件传递（0.按下；1.抬起； 2.移动）：</code></pre><p>-<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: ----------- dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------- dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------- onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------- dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------- onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/View1: ------------------ dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/View1: ------------------ onTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------- onTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------- onTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: ----------- onTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: ----------- dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------- onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------- dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------- onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------- dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------- onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------- dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/MainActivity: ----------- onTouchEvent = <span class="number">1</span></span><br><span class="line">E/MainActivity: ----------- dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/MainActivity: ----------- onTouchEvent = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:left"><code>观察</code></th></tr></thead><tbody><tr><td style="text-align:left"><code>可以看出事件由外层大布局到内部子布局传进去，在从子布局传出去（Activity --&gt; ViewGroup1 --&gt; ViewGroup2 --&gt; View1 --&gt; ViewGroup2 --&gt; ViewGroup1 --&gt; Activity）</code></td></tr><tr><td style="text-align:left"><code>由此log还可以看出：当按下的事件没有被拦截，那么所有状态的事件都由Activity进行处理</code></td></tr></tbody></table><blockquote><p>没有拦截事件时</p></blockquote><p><img src="image/android-ui-event/3.png" alt="没有拦截事件时.png"></p><h2 id="如何拦截？"><a href="#如何拦截？" class="headerlink" title="如何拦截？"></a>如何拦截？</h2><ul><li>通过dispatchTouchEvent对事件进行拦截，<strong>当返回值为<code>true</code>的时候拦截事件</strong></li><li><p>拦截后事件将不会传到子布局</p><pre><code>现在以ViewGroup1为例：让ViewGroup1中的dispatchTouchEvent直接返回true当手指对View1点击、移动、抬起时发生的一系列事件传递（0.按下；1.抬起； 2.移动）</code></pre>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th style="text-align:left"><code>观察</code></th></tr></thead><tbody><tr><td style="text-align:left"><code>可以看出事件传递到ViewGroup1后被拦截，没有被任何布局消费</code></td></tr><tr><td style="text-align:left"><code>也就是说事件还没被消费就被拦截会导致触摸无效</code></td></tr><tr><td style="text-align:left"><code>我们可以在dispatchTouchEvent判断哪些情况需要拦截，哪些不需要拦截就放事件过去（以上直接返回了true拦截了所有情况的事件）</code></td></tr></tbody></table><blockquote><p>拦截ViewGroup1的所有事件</p></blockquote><p><img src="image/android-ui-event/4.png" alt="拦截ViewGroup1的所有事件.png"></p><h2 id="如何获取？"><a href="#如何获取？" class="headerlink" title="如何获取？"></a>如何获取？</h2><ul><li>通过onInterceptTouchEvent获取事件，<strong>当返回值为<code>true</code>的时候获取事件</strong></li><li>获取事件后会调用onTouchEvent方法，调用这个方法后，如果我们设置了OnTouchListener，那么触摸监听将会被调用。<pre><code>现在以ViewGroup2为例：让ViewGroup2中的onInterceptTouchEvent直接返回true当手指对View1点击、移动、抬起时发生的一系列事件传递（0.按下；1.抬起； 2.移动）</code></pre></li></ul><p>-<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------------  onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------------  onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------------  onTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------------  onTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><table><thead><tr><th><code>观察问题</code></th><th style="text-align:center"><code>原因</code></th><th style="text-align:center"><code>解决</code></th></tr></thead><tbody><tr><td><code>哎呀呀~！为啥我获取到了的事件之后，移动和抬起手指的事件被MainActivity吃了！愤怒！！</code></td><td style="text-align:center"><code>原来onTouchEvent如果处理按下事件DOWN的时候没有返回true。如果onTouchEvent处理DOWN时候返回false，则表示没有消费事件，事件将会回到父布局，并且后续事件将不会再传递过来。</code></td><td style="text-align:center"><code>onTouchEvent方法中判断为按下DOWN事件的时候，返回true即下面要说的消费</code></td></tr></tbody></table><blockquote><p>当ViewGroup2事件获取到了，但没有消费</p></blockquote><p><img src="image/android-ui-event/5.png" alt="当ViewGroup2事件获取到了，但没有消费.png"></p><h2 id="如何消费？"><a href="#如何消费？" class="headerlink" title="如何消费？"></a>如何消费？</h2><ul><li><p>上边已经提到过，就是获取事件遗留下来一个问题：获取到了按下事件，为啥没继续获取到后续的事件？就是因为按下时onTouchEvent没有返回true，导致事件从新回到父布局，也就是没有消费事件。</p><pre><code>现在接着以ViewGroup2为例：还是让ViewGroup2中的onInterceptTouchEvent直接返回true添加：在onTouchEvent方法中添加判断if (event.getAction() == MotionEvent.ACTION_DOWN) {return true;}当手指对View1点击、移动、抬起时发生的一系列事件传递（0.按下；1.抬起； 2.移动）</code></pre>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ------------------  onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------------  onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ------------------  onTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  onInterceptTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ------------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ------------------  onInterceptTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ------------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: ----------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup1: ------------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup1: ------------------  onInterceptTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup2: ------------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup2: ------------------  onTouchEvent = <span class="number">1</span></span><br><span class="line">E/MainActivity: ----------------  onTouchEvent = <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th><code>观察</code></th></tr></thead><tbody><tr><td><code>由上边log可以看出，现在在ViewGroup2中的onTouchEvent的按下事件返回一个true后，按下事件并没有在传递回父布局中，使得后续事件都将能得到</code></td></tr><tr><td><code>可以看出当后续事件传递过来时，ViewGroup2已经没有再次调用onInterceptTouchEvent方法</code></td></tr><tr><td><code>我们只是将按下DOWN的事件返回true，所以除了按下事件其他移动或抬起的事件activity都也能获取到。当onTouchEvent不管三七二十一直接返回一个true时，activity就不会获取到事件</code></td></tr></tbody></table><blockquote><p>当消费ViewGroup2的按下DOWN事件时</p></blockquote><p><img src="image/android-ui-event/6.png" alt="当消费ViewGroup2的按下DOWN事件时.png"></p><blockquote><p>当ViewGroup2中onTouchEvent直接返回true时</p></blockquote><p><img src="image/android-ui-event/7.png" alt="当ViewGroup2中onTouchEvent直接返回true时.png"></p><h2 id="Button获取事件是怎么回事？"><a href="#Button获取事件是怎么回事？" class="headerlink" title="Button获取事件是怎么回事？"></a>Button获取事件是怎么回事？</h2><ul><li><p>现在将View1换成Button1，其他的恢复最初状态，先来看看触摸的log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">E/MainActivity: -------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ---------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup1: ---------------  onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ---------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/ViewGroup2: ---------------  onInterceptTouchEvent = <span class="number">0</span></span><br><span class="line">E/Button1: ------------------  dispatchTouchEvent = <span class="number">0</span></span><br><span class="line">E/Button1: ------------------  onTouchEvent = <span class="number">0</span></span><br><span class="line">E/MainActivity: -------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ---------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ---------------  onInterceptTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ---------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ---------------  onInterceptTouchEvent = <span class="number">2</span></span><br><span class="line">E/Button1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/Button1: ------------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: -------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ---------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup1: ---------------  onInterceptTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ---------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/ViewGroup2: ---------------  onInterceptTouchEvent = <span class="number">2</span></span><br><span class="line">E/Button1: ------------------  dispatchTouchEvent = <span class="number">2</span></span><br><span class="line">E/Button1: ------------------  onTouchEvent = <span class="number">2</span></span><br><span class="line">E/MainActivity: -------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup1: ---------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup1: ---------------  onInterceptTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup2: ---------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/ViewGroup2: ---------------  onInterceptTouchEvent = <span class="number">1</span></span><br><span class="line">E/Button1: ------------------  dispatchTouchEvent = <span class="number">1</span></span><br><span class="line">E/Button1: ------------------  onTouchEvent = <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>在来看看序列图</p></li></ul><blockquote><p>Button获取触摸事件</p></blockquote><p><img src="image/android-ui-event/8.png" alt="Button获取触摸事件.png"></p><ul><li><p>这一看，这不是和上面那张图<code>当ViewGroup2中onTouchEvent直接返回true时</code>的效果一样的吗？也就是说button默认就是直接获取了事件，没有让事件返回主布局中。</p></li><li><p>等等还有一个！！！大家都知道布局有个属性<strong>clickable</strong>吧！当设置它的值为true时，使得这个布局事件如button所述！</p></li><li><p>更深入的理解的话这里博客已经介绍的很详细了</p><ul><li><a href="http://blog.csdn.net/guolin_blog/article/details/9097463" target="_blank" rel="noopener">Android事件分发机制完全解析，带你从源码的角度彻底理解(上)</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/9153747" target="_blank" rel="noopener">Android事件分发机制完全解析，带你从源码的角度彻底理解(下)</a></li></ul></li></ul><h2 id="实际的应用"><a href="#实际的应用" class="headerlink" title="实际的应用"></a>实际的应用</h2><p>-<br>来一个简单的应用</p><p>xml布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CheckBox</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/checkbox_lock"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Lock Selection"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/selection_first"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"First"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/selection_second"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Second"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/selection_third"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Third"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>activity代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.examples.customtouch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Dave Smith</span></span><br><span class="line"><span class="comment"> * Double Encore, Inc.</span></span><br><span class="line"><span class="comment"> * Date: 9/25/12</span></span><br><span class="line"><span class="comment"> * TouchListenerActivity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TouchListenerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Views to display last seen touch event */</span></span><br><span class="line">    CheckBox mLockBox;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.touch_listener);</span><br><span class="line"></span><br><span class="line">        mLockBox = (CheckBox) findViewById(R.id.checkbox_lock);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.selection_first).setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.selection_second).setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        findViewById(R.id.selection_third).setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Consume the events here so the buttons cannot process them</span></span><br><span class="line"><span class="comment">         * if the CheckBox in the UI is checked</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Log.e(<span class="string">"TouchListenerActivity"</span>, getNameForEvent(event));</span><br><span class="line">        <span class="keyword">return</span> mLockBox.isChecked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"onTouchEvent"</span>, getNameForEvent(event));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getNameForEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        String action = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                action = <span class="string">"ACTION_DOWN"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                action = <span class="string">"ACTION_CANCEL"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                action = <span class="string">"ACTION_MOVE"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                action = <span class="string">"ACTION_UP"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s\n%.1f, %.1f"</span>, action, event.getX(), event.getY());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="image/android-ui-event/9.png" alt="效果图"></p><table><thead><tr><th style="text-align:center"><code>状态</code></th><th style="text-align:center"><code>描述</code></th></tr></thead><tbody><tr><td style="text-align:center"><code>当Lock Selection没有勾选时</code></td><td style="text-align:center"><code>下边的单选能正常选择</code></td></tr><tr><td style="text-align:center"><code>当Lock Selection勾选时</code></td><td style="text-align:center"><code>下边的单选无法点击</code></td></tr></tbody></table><ul><li>大家是否疑惑了，为什么复选框选中状态，ontouch返回了true反而不能点击了。为什么不是返回false无法点击，返回true时才能点击呢？其实这些控件默认可以点击的都是默认获取事件的，如上面说的button为什么获取事件一样，所以返回true和false和预想的结果相反。</li></ul><h1 id="所用知识和资料"><a href="#所用知识和资料" class="headerlink" title="所用知识和资料"></a>所用知识和资料</h1><ol><li>Android studio插件plantUml画序列图和类图</li><li><a href="http://archive.3zso.com/archives/plantuml-quickstart.html#sec-5-3" target="_blank" rel="noopener">PlantUML快速指南</a> 和 <a href="http://plantuml.com/classes.html" target="_blank" rel="noopener">PlantUML官网</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/9097463" target="_blank" rel="noopener">Android事件分发机制完全解析，带你从源码的角度彻底理解(上)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9153747" target="_blank" rel="noopener">Android事件分发机制完全解析，带你从源码的角度彻底理解(下)</a></li><li><a href="http://a.codekk.com/detail/Android/Trinea/%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%20View%20%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92" target="_blank" rel="noopener">公共技术点之 View 事件传递</a></li><li><a href="https://github.com/devunwired/custom-touch-examples" target="_blank" rel="noopener">最后的那个例子来自于这儿</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们寻找的，也只不过是内心世界的片刻安宁，&lt;br&gt;以及，那样一场盛大的清欢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;聊聊UI事件传递&quot;&gt;&lt;a href=&quot;#聊聊UI事件传递&quot; class=&quot;headerlink&quot; title=&quot;聊聊U
      
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-开闭原则(OCP)</title>
    <link href="http://yoursite.com/2016/04/12/ood-ocp/"/>
    <id>http://yoursite.com/2016/04/12/ood-ocp/</id>
    <published>2016-04-12T00:43:00.000Z</published>
    <updated>2017-12-22T15:30:59.193Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>OCP</p></blockquote><p><img src="image/ood/ocp.png" alt="OCP.png"></p><h2 id="啥是OCP？"><a href="#啥是OCP？" class="headerlink" title="啥是OCP？"></a>啥是OCP？</h2><ul><li>全称：开闭原则(Open-Closed Principle)[^foot2]</li><li>定义：软件实体（类、模块、函数等等）应该是可以扩展的</li></ul><h2 id="开-O-什么？关-C-什么？"><a href="#开-O-什么？关-C-什么？" class="headerlink" title="开(O)什么？关(C)什么？"></a>开(O)什么？关(C)什么？</h2><blockquote><p>开(O)：对于扩展是开放的</p></blockquote><p>对于某个模块的功能是可以进行扩展的。当需求改变，我们只需对其进行扩展即可满足于新的需求。</p><p>比如说：“砖”，我们不需要改变它的形态与结构，就可以根据需求来建高楼、建围墙、建厕所、建这样建那样(๑乛乛๑)。 - - 所以可以认为“砖”对于扩展的需求是开放的。又比如说电脑主板对于cpu、内存等是可扩展的。</p><blockquote><p>关(C)：对于更改是封闭的</p></blockquote><p>对模块进行扩展时，不必改动模块的源代码或者二进制代码。如果说这个模块已经明确的定义、稳定、有效的被多个其他模块使用，那么关闭这个模块，提供接口供其它模块使用。</p><p>比如我们的电脑由“CPU”、“主板”、“内存”等构成，它们并不是紧紧耦合做成一块的。想想，要是紧紧的长一块，什么CUP、什么内存密密麻麻的小线、触角、身体的一部分和主板一体化。那么现在我的一个内存坏了，我表示我是渣渣得重新买一台电脑了，能内存修好的高手因该不多吧！就算内存能修好CPU又多少人能修好啊！但还好它们都是分离的，接口都是规定好了的，我需要买一个内存插上就好了。我们不需要知道知道内存里面、CPU里面是啥构造。要是坏了时，要是升级时，只需要更换这个模块而不需要更换整个硬件系统或修理这个硬件系统里的某个小模块。- - 原谅我废话了一大圈，就是想表达个封闭内部，能减少bug，方便扩展，能更好的分工合作（做主板的就做主板）</p><h2 id="为何要提倡OCP？"><a href="#为何要提倡OCP？" class="headerlink" title="为何要提倡OCP？"></a>为何要提倡OCP？</h2><p>其实在上面大家因该已经明白一些了，“开放”是为了更好的扩展，适应更多的相应需求。“关闭”是为了降低耦合，降低了维护难度和制作成本。两者可以说本是互为一体，而又被分开说成两样。因为关闭时得留出口开放本就是处理的一个模块同时进行。</p><blockquote><p>在许多方面，OCP的面向对象的核心所在<br>注意：</p><ul><li>我们因该对频繁出现的变化进行封闭开放处理也就是进行抽象</li><li>拒绝不成熟的抽象和抽象本身一样重要</li></ul></blockquote><h2 id="比如说？-实际例子"><a href="#比如说？-实际例子" class="headerlink" title="比如说？(实际例子)"></a>比如说？(实际例子)</h2><ul><li><p>违反OCP,既不开放又不封闭<br><img src="image/ood/ocp-no.png" alt="既不开放又不封闭.png"></p><p>上图展示了一个没有遵循OCP的设计例子，电灯类和电源类是两个具体的类。要让电灯发光，需要电源这个属性。如果此时要将电灯接在另一个电源上面，就必须更换成另一个电源的属性（将电灯连线与另一个电源）。</p></li><li><p>遵循OCP,既开放又封闭<br><img src="image/ood/ocp-yes.png" alt="既开放又封闭.png"></p><p>上图展示了一个解决上面问题的OCP设计，灯座是一个拥有抽象成员的接口（比如说与电源的连线）。电灯类使用这个抽象类（有插座的成员属性），而电灯的对象使用的是灯座接口的实现类电源。如果我们需要将电灯接到另一个电源，只需要接到另一插座。如果要更换电源，那么将插座接到另一个电源。这样双方的改变，被插座接口隔离而不会影响到具体的类。（我理解为隔离了变化的扩散）</p></li></ul><table><thead><tr><th>注意</th></tr></thead><tbody><tr><td>只有当我们预测到这种变化，那么就可以设计一个抽象来进行隔离</td></tr><tr><td>无论模块是多么的封闭都会存在一些无法对之封闭的变化（比如说我现在要让灯泡闪红光），没有对所有的情况都贴切的模型</td></tr><tr><td>设计人员必须对设计的模块应该对哪种变化封闭做出选择</td></tr></tbody></table><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><ul><li><p>总的来说开闭原则也如锦上添花，在原有锦织物上增添鲜花，让美的东西更美。</p></li><li><p>在许多方面，OCP都是面向对象的核心所在。遵循这个原则可给面向对象技术带来巨大的好处（灵活性、可重用性以及可维护性）。然而，并不是说只要使用一种面向对象语言就是遵循了这个原则。</p></li><li><p>对于应用程序中的每个部分都肆意地进行抽象同样不是一个好主意。正确地做法是开发人员应当仅仅对程序中频繁变化的那些部分做出抽象，拒绝不成熟的抽象和抽象本身一样重要。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2></li><li>《敏捷软件开发：原则、模式与实践》第9章  开放-封闭原则</li><li><a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">维基百科-开闭原则</a></li><li>《面向对象软件构造》第二版 中英对照 第3章 3.3五项原则</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;OCP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;image/ood/ocp.png&quot; alt=&quot;OCP.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;啥是OCP？&quot;&gt;&lt;a href=&quot;#啥是OCP？&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计-单一职责原则(SRP)</title>
    <link href="http://yoursite.com/2016/04/07/ood-srp/"/>
    <id>http://yoursite.com/2016/04/07/ood-srp/</id>
    <published>2016-04-07T15:55:00.000Z</published>
    <updated>2017-12-22T15:31:05.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>SRP</p></blockquote><p><img src="image/ood/srp.png" alt="SRP.png"></p><h2 id="何为SRP？"><a href="#何为SRP？" class="headerlink" title="何为SRP？"></a>何为SRP？</h2><ul><li>全称：单一职责原则(Single Responsibility Principle)</li><li>定义:该原则规定每个类都应该只有一个单一的功能，并且该功能应该由这个类完全封装起来</li></ul><h2 id="何为职责-R"><a href="#何为职责-R" class="headerlink" title="何为职责(R)?"></a>何为职责(R)?</h2><blockquote><p>既然是单一“职责”，那么职责即为被规定的因素。</p></blockquote><ul><li><p>概括：”功能(职责)”为改变的原因，一个类或者模块应该有且只有一个改变的原因。</p></li><li><p>如下图农活责任所示，耕菜地和耕水田即为牛和耕地机的职责，即为这个对象存在的原因（下面将来讨论这个关系图）。</p></li></ul><blockquote><p>农活责任</p></blockquote><p><img src="image/ood/srp-nong-huo.png" alt="农活责任"></p><h2 id="为何要提倡SRP？"><a href="#为何要提倡SRP？" class="headerlink" title="为何要提倡SRP？"></a>为何要提倡SRP？</h2><blockquote><p>其思想简单，但却难以掌握。就是一个模块，一个类只能干一件事情。</p></blockquote><p>看上图农活责任，晃眼一看我们会决定这是对的！但仔细一分析农活接口其中包含的耕菜地和耕水田两个责任。</p><ul><li><p>牛耕水田，但它耕不动菜地，只能调用耕水田的接口，因此耕菜地的接口对于牛来说就是多余的。但耕地机即能耕菜地，也能耕水田。这就像是牛本来是耕田的，我们却说它还能去耕菜地，耕地机能做的事情，老牛表示无能为力！</p></li><li><p>这样违反了SRP，导致了严重的问题。因为我们给牛保留了一个多余而不会完成的责任，这让我们每次提到牛不仅说它能耕水田还能耕菜地。这让我们对牛的描述更加的复杂而没有准确性。程序也时这样，当没用的责任增加，就会让相应的类都变得臃肿腐臭。当我们要添加牛要耕后要吃草，耕地机耕地后要加油时，继续往农活接口中添加，这样使得农活什么都能干，使得后期修改维护等难度太大。</p></li><li>如果不分离责任，在不断变化和添加的需求面前，责任之间耦合度强导致我们的程序更加的脆弱。<h2 id="比如说？（实际举例说明）"><a href="#比如说？（实际举例说明）" class="headerlink" title="比如说？（实际举例说明）"></a>比如说？（实际举例说明）</h2></li><li>例子一<blockquote><p>农活责任(改)</p></blockquote></li></ul><p><img src="image/ood/srp-nong-huo-gai.png" alt="农活责任(改).png"></p><p>如上图将两个责任分离，牛实现耕水田的时候，不会知道也不会去在意耕菜地，分离了责任，该做的才做，不做的不用管。</p><ul><li>例子二（来自敏捷软件开发第8章）[^foot]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//调制解调器</span><br><span class="line">interface Modem &#123;</span><br><span class="line">    void dial(String pno);//拨号</span><br><span class="line">    void hangup();//挂断</span><br><span class="line">    void send(char c);//发送消息</span><br><span class="line">    void recv();//接收消息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这个接口中显示了两个职责，一个是连接管理，一个是数据通信。dial和hangup函数进行调制解调器的连接处理，而send和recv函数进行数据的通信。</p></blockquote><p>这两个责任应该被分开吗？这决定于应用程序以何种方式变化。如果应用程序的变化会影响连接函数的部署，那么这个设计就具有僵化性的臭味。因为调用send和recv的类必须要重新编译连接处理函数，部署的次数常常会超过我们希望的次数。在这种情况下，这两个职责应该被分离。如图下图所示，这样避免了客户应用程序和这两个职责耦合在一起。</p><blockquote><p>分离的Modem接口</p></blockquote><p><img src="image/ood/srp-fen-li.png" alt="分离的Modem接口"></p><table><thead><tr><th style="text-align:center">注意</th></tr></thead><tbody><tr><td style="text-align:center">另一方面，如果应用程序的变化方式总是会导致两个职责同时变化，那么就不必分离他们，分离后会导致不必要的复杂性。</td></tr><tr><td style="text-align:center">此外还有个推论：变化的曲线是仅当变化实际发生时才具有真正的意义。如果没有征兆，那么去应用SRP，或者其他原则都是不明智的。</td></tr></tbody></table><h2 id="结论总结"><a href="#结论总结" class="headerlink" title="结论总结"></a>结论总结</h2><ul><li>SRP为最简单的原则，也是最难运用好的原则</li><li>软件设计真正要做的其实就是发现责任并把那些责任分离</li><li>其他原则都将能追溯到SRP</li><li>大道至简，只有不断在代码中运用才能真正体会其中的奥妙</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>[1]《敏捷软件开发：原则、模式与实践》第8章 单一职责原则<br>[2]<a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%B8%80%E5%8A%9F%E8%83%BD%E5%8E%9F%E5%88%99" target="_blank" rel="noopener">维基百科</a><br>[3]<a href="http://www.oschina.net/translate/how-i-explained-ood-to-my-wife?lang=chs&amp;page=1#" target="_blank" rel="noopener">我是怎样向妻子解释OOD的</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;SRP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;image/ood/srp.png&quot; alt=&quot;SRP.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;何为SRP？&quot;&gt;&lt;a href=&quot;#何为SRP？&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象设计" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Android studio</title>
    <link href="http://yoursite.com/2016/03/27/install-android-studio-linux/"/>
    <id>http://yoursite.com/2016/03/27/install-android-studio-linux/</id>
    <published>2016-03-26T23:13:00.000Z</published>
    <updated>2017-12-10T14:12:39.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1.安装jdk"></a>1.安装jdk</h2><h3 id="①由于linux自带openjdk因此我就将openjdk卸载了装jdk1-7"><a href="#①由于linux自带openjdk因此我就将openjdk卸载了装jdk1-7" class="headerlink" title="①由于linux自带openjdk因此我就将openjdk卸载了装jdk1.7"></a>①由于linux自带openjdk因此我就将openjdk卸载了装jdk1.7</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove openjdk-*</span><br></pre></td></tr></table></figure><h3 id="②下载jdk1-7"><a href="#②下载jdk1-7" class="headerlink" title="②下载jdk1.7"></a>②下载jdk1.7</h3><p><a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">jdk1.7下载链接</a><br>我下载的文件为：jdk-7u79-linux-x64.tar.gz</p><h3 id="③解压"><a href="#③解压" class="headerlink" title="③解压"></a>③解压</h3><ul><li><p>创建/usr/java目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /usr/java</span><br></pre></td></tr></table></figure></li><li><p>将当前目录下的jdk压缩包移/usr/java</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/下载 $ sudo mv jdk-7u79-linux-x64.tar.gz /usr/java</span><br></pre></td></tr></table></figure></li><li><p>解压到/usr/java，删除压缩包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/java</span><br><span class="line">$ sudo tar -zxvf /usr/java/jdk-7u79-linux-x64.tar.gz</span><br><span class="line">$ sudo rm jdk-7u79-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li></ul><h3 id="④配置jdk环境变量"><a href="#④配置jdk环境变量" class="headerlink" title="④配置jdk环境变量"></a>④配置jdk环境变量</h3><ul><li><p>打开环境变量配置文件profile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gedit /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>在文本最后添加如下信息，注意改成自己的jdk版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.7.0_79</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>保存、重启、java -version验证是否配置成功</p></li></ul><h2 id="2-安装android-studio"><a href="#2-安装android-studio" class="headerlink" title="2.安装android studio"></a>2.安装android studio</h2><h3 id="①下载linux-android-studio"><a href="#①下载linux-android-studio" class="headerlink" title="①下载linux android studio"></a>①下载linux android studio</h3><p><a href="http://developer.android.com/intl/zh-cn/sdk/index.html" target="_blank" rel="noopener">官网下载</a></p><h3 id="②解压"><a href="#②解压" class="headerlink" title="②解压"></a>②解压</h3><p>将下载好的android studio压缩包移动到/usr/local目录，然后unzip命令解压<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip android-studio-ide-141.2456560-linux.zip</span><br></pre></td></tr></table></figure></p><h3 id="③运行"><a href="#③运行" class="headerlink" title="③运行"></a>③运行</h3><p>进入android-studio/bin,然后运行studio.sh<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> android-studio/bin</span><br><span class="line">$ sh studio.sh</span><br></pre></td></tr></table></figure></p><h3 id="④因为在linux-mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！"><a href="#④因为在linux-mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！" class="headerlink" title="④因为在linux mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！"></a>④因为在linux mint第一天已经修改hosts翻墙，所以就自动下载sdk和更新，节省操作咯！</h3><h2 id="3-安装Genymotion"><a href="#3-安装Genymotion" class="headerlink" title="3.安装Genymotion"></a>3.安装Genymotion</h2><blockquote><p>Genymotion被称为是速度最快的Android模拟器可不是盖的，手机也没有两，就打算安装一个模拟器。</p></blockquote><h3 id="Genymotion官网"><a href="#Genymotion官网" class="headerlink" title="Genymotion官网"></a><a href="https://www.genymotion.com/" target="_blank" rel="noopener">Genymotion官网</a></h3><p>注册一个号，登录了就能下载免费版本的虚拟机。<a href="http://files2.genymotion.com/genymotion/genymotion-2.6.0/genymotion-2.6.0-linux_x64.bin" target="_blank" rel="noopener">我下载版本的连接地址</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>根据这篇教程<a href="http://www.lihuan.com.cn/2015/02/15/521.html" target="_blank" rel="noopener">Ubuntu下安装Genymotion安卓模拟器 Linux教程</a></p><ul><li>将genymotion-2.6.0-ubuntu15_x64.bin移动到用户目录<code>$ mv genymotion-2.6.0-ubuntu15_x64.bin /home/jiana</code></li><li>需要安装一个软件virtualbox才能使用Gecymotion,命令:<code>sudo apt-get install virtualbox</code></li><li><p>进入/home/jiana运行genymotion文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/jiana/</span><br><span class="line">$ chmod +x genymotion-2.6.0-ubuntu15_x64.bin </span><br><span class="line">$ ./genymotion-2.6.0-ubuntu15_x64.bin</span><br></pre></td></tr></table></figure></li><li><p>完成后进入该用户目录下的genymotion目录，双击运行genymotion。好了，接下来就可以下载genymotion虚拟机来体验快感了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装jdk&quot;&gt;&lt;a href=&quot;#1-安装jdk&quot; class=&quot;headerlink&quot; title=&quot;1.安装jdk&quot;&gt;&lt;/a&gt;1.安装jdk&lt;/h2&gt;&lt;h3 id=&quot;①由于linux自带openjdk因此我就将openjdk卸载了装jdk1-7&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
